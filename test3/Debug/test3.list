
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000317c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  080033b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080033b4  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008666  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001918  00000000  00000000  0002869b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000840  00000000  00000000  00029fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000798  00000000  00000000  0002a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000193cd  00000000  00000000  0002af90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007dea  00000000  00000000  0004435d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000957fb  00000000  00000000  0004c147  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e1942  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000202c  00000000  00000000  000e19c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003348 	.word	0x08003348

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003348 	.word	0x08003348

08000224 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800022a:	f000 fb43 	bl	80008b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800022e:	f000 f857 	bl	80002e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//ADC_ChannelConfTypeDef sConfig = {0};
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000232:	f000 f94f 	bl	80004d4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000236:	f000 f927 	bl	8000488 <MX_DMA_Init>
	MX_ADC1_Init();
 800023a:	f000 f8af 	bl	800039c <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800023e:	f000 f8f9 	bl	8000434 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000242:	4821      	ldr	r0, [pc, #132]	; (80002c8 <main+0xa4>)
 8000244:	f001 f8f8 	bl	8001438 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, AD_RES, 2);
 8000248:	2202      	movs	r2, #2
 800024a:	4920      	ldr	r1, [pc, #128]	; (80002cc <main+0xa8>)
 800024c:	481e      	ldr	r0, [pc, #120]	; (80002c8 <main+0xa4>)
 800024e:	f000 fd33 	bl	8000cb8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 8000252:	481d      	ldr	r0, [pc, #116]	; (80002c8 <main+0xa4>)
 8000254:	f000 fc7a 	bl	8000b4c <HAL_ADC_Start_IT>


	HAL_UART_Receive_DMA(&huart1, buffer, 1);
 8000258:	2201      	movs	r2, #1
 800025a:	491d      	ldr	r1, [pc, #116]	; (80002d0 <main+0xac>)
 800025c:	481d      	ldr	r0, [pc, #116]	; (80002d4 <main+0xb0>)
 800025e:	f002 fdb2 	bl	8002dc6 <HAL_UART_Receive_DMA>

	while(buffer[0] == 0);
 8000262:	bf00      	nop
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <main+0xac>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0fb      	beq.n	8000264 <main+0x40>

	int numberofmotor = buffer[0];
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <main+0xac>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	607b      	str	r3, [r7, #4]

	numberofarray = 5*numberofmotor+2;
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	4613      	mov	r3, r2
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	4413      	add	r3, r2
 800027a:	3302      	adds	r3, #2
 800027c:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <main+0xb4>)
 800027e:	6013      	str	r3, [r2, #0]

	HAL_UART_DMAStop(&huart1);
 8000280:	4814      	ldr	r0, [pc, #80]	; (80002d4 <main+0xb0>)
 8000282:	f002 fdd0 	bl	8002e26 <HAL_UART_DMAStop>

	HAL_UART_Receive_DMA(&huart1, buffer, numberofarray);
 8000286:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <main+0xb4>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	b29b      	uxth	r3, r3
 800028c:	461a      	mov	r2, r3
 800028e:	4910      	ldr	r1, [pc, #64]	; (80002d0 <main+0xac>)
 8000290:	4810      	ldr	r0, [pc, #64]	; (80002d4 <main+0xb0>)
 8000292:	f002 fd98 	bl	8002dc6 <HAL_UART_Receive_DMA>

		/* USER CODE BEGIN 3 */
//		HAL_ADC_Start_IT(&hadc1);

		//get Direction of Rotation
		uint8_t MSB = buffer[1] & 0xF0;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <main+0xac>)
 8000298:	785b      	ldrb	r3, [r3, #1]
 800029a:	f023 030f 	bic.w	r3, r3, #15
 800029e:	70fb      	strb	r3, [r7, #3]
		//4 bit shift to right
		MSB = MSB>>4;
 80002a0:	78fb      	ldrb	r3, [r7, #3]
 80002a2:	091b      	lsrs	r3, r3, #4
 80002a4:	70fb      	strb	r3, [r7, #3]

		//get 4bit of degree in binery
		uint8_t LSB = buffer[1] & 0x0F;
 80002a6:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <main+0xac>)
 80002a8:	785b      	ldrb	r3, [r3, #1]
 80002aa:	f003 030f 	and.w	r3, r3, #15
 80002ae:	70bb      	strb	r3, [r7, #2]
		//calculate degree in 2 byte
		degree = LSB<<8 | buffer[2];
 80002b0:	78bb      	ldrb	r3, [r7, #2]
 80002b2:	021b      	lsls	r3, r3, #8
 80002b4:	b21a      	sxth	r2, r3
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <main+0xac>)
 80002b8:	789b      	ldrb	r3, [r3, #2]
 80002ba:	b21b      	sxth	r3, r3
 80002bc:	4313      	orrs	r3, r2
 80002be:	b21b      	sxth	r3, r3
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <main+0xb8>)
 80002c4:	801a      	strh	r2, [r3, #0]
	{
 80002c6:	e7e6      	b.n	8000296 <main+0x72>
 80002c8:	20000054 	.word	0x20000054
 80002cc:	2000004c 	.word	0x2000004c
 80002d0:	20000028 	.word	0x20000028
 80002d4:	200000c8 	.word	0x200000c8
 80002d8:	20000048 	.word	0x20000048
 80002dc:	20000150 	.word	0x20000150

080002e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b096      	sub	sp, #88	; 0x58
 80002e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ea:	2228      	movs	r2, #40	; 0x28
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 f822 	bl	8003338 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	f107 031c 	add.w	r3, r7, #28
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]
 8000312:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000314:	2301      	movs	r3, #1
 8000316:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000322:	2301      	movs	r3, #1
 8000324:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	2302      	movs	r3, #2
 8000328:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000330:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000334:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800033a:	4618      	mov	r0, r3
 800033c:	f001 ff3c 	bl	80021b8 <HAL_RCC_OscConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x6a>
	{
		Error_Handler();
 8000346:	f000 f927 	bl	8000598 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	230f      	movs	r3, #15
 800034c:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	2302      	movs	r3, #2
 8000350:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000360:	f107 031c 	add.w	r3, r7, #28
 8000364:	2102      	movs	r1, #2
 8000366:	4618      	mov	r0, r3
 8000368:	f002 f9a6 	bl	80026b8 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000372:	f000 f911 	bl	8000598 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000376:	2302      	movs	r3, #2
 8000378:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800037a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800037e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4618      	mov	r0, r3
 8000384:	f002 fb34 	bl	80029f0 <HAL_RCCEx_PeriphCLKConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0xb2>
	{
		Error_Handler();
 800038e:	f000 f903 	bl	8000598 <Error_Handler>
	}
}
 8000392:	bf00      	nop
 8000394:	3758      	adds	r7, #88	; 0x58
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <MX_ADC1_Init+0x90>)
 80003ae:	4a20      	ldr	r2, [pc, #128]	; (8000430 <MX_ADC1_Init+0x94>)
 80003b0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003b2:	4b1e      	ldr	r3, [pc, #120]	; (800042c <MX_ADC1_Init+0x90>)
 80003b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003b8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80003ba:	4b1c      	ldr	r3, [pc, #112]	; (800042c <MX_ADC1_Init+0x90>)
 80003bc:	2201      	movs	r2, #1
 80003be:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003c0:	4b1a      	ldr	r3, [pc, #104]	; (800042c <MX_ADC1_Init+0x90>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003c6:	4b19      	ldr	r3, [pc, #100]	; (800042c <MX_ADC1_Init+0x90>)
 80003c8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003cc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ce:	4b17      	ldr	r3, [pc, #92]	; (800042c <MX_ADC1_Init+0x90>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_ADC1_Init+0x90>)
 80003d6:	2202      	movs	r2, #2
 80003d8:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003da:	4814      	ldr	r0, [pc, #80]	; (800042c <MX_ADC1_Init+0x90>)
 80003dc:	f000 facc 	bl	8000978 <HAL_ADC_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 80003e6:	f000 f8d7 	bl	8000598 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80003ea:	2301      	movs	r3, #1
 80003ec:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ee:	2301      	movs	r3, #1
 80003f0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80003f2:	2305      	movs	r3, #5
 80003f4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	480c      	ldr	r0, [pc, #48]	; (800042c <MX_ADC1_Init+0x90>)
 80003fc:	f000 fe22 	bl	8001044 <HAL_ADC_ConfigChannel>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8000406:	f000 f8c7 	bl	8000598 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800040a:	2302      	movs	r3, #2
 800040c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4619      	mov	r1, r3
 8000412:	4806      	ldr	r0, [pc, #24]	; (800042c <MX_ADC1_Init+0x90>)
 8000414:	f000 fe16 	bl	8001044 <HAL_ADC_ConfigChannel>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_ADC1_Init+0x86>
	{
		Error_Handler();
 800041e:	f000 f8bb 	bl	8000598 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000054 	.word	0x20000054
 8000430:	40012400 	.word	0x40012400

08000434 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800043a:	4a12      	ldr	r2, [pc, #72]	; (8000484 <MX_USART1_UART_Init+0x50>)
 800043c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000444:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800046c:	f002 fc5e 	bl	8002d2c <HAL_UART_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000476:	f000 f88f 	bl	8000598 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200000c8 	.word	0x200000c8
 8000484:	40013800 	.word	0x40013800

08000488 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_DMA_Init+0x48>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a0f      	ldr	r2, [pc, #60]	; (80004d0 <MX_DMA_Init+0x48>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <MX_DMA_Init+0x48>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	200b      	movs	r0, #11
 80004ac:	f001 f951 	bl	8001752 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004b0:	200b      	movs	r0, #11
 80004b2:	f001 f96a 	bl	800178a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2100      	movs	r1, #0
 80004ba:	200f      	movs	r0, #15
 80004bc:	f001 f949 	bl	8001752 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004c0:	200f      	movs	r0, #15
 80004c2:	f001 f962 	bl	800178a <HAL_NVIC_EnableIRQ>

}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000

080004d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b28      	ldr	r3, [pc, #160]	; (800058c <MX_GPIO_Init+0xb8>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a27      	ldr	r2, [pc, #156]	; (800058c <MX_GPIO_Init+0xb8>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b25      	ldr	r3, [pc, #148]	; (800058c <MX_GPIO_Init+0xb8>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <MX_GPIO_Init+0xb8>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <MX_GPIO_Init+0xb8>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <MX_GPIO_Init+0xb8>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <MX_GPIO_Init+0xb8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a1b      	ldr	r2, [pc, #108]	; (800058c <MX_GPIO_Init+0xb8>)
 800051e:	f043 0320 	orr.w	r3, r3, #32
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <MX_GPIO_Init+0xb8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0320 	and.w	r3, r3, #32
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000536:	4816      	ldr	r0, [pc, #88]	; (8000590 <MX_GPIO_Init+0xbc>)
 8000538:	f001 fe26 	bl	8002188 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000542:	4814      	ldr	r0, [pc, #80]	; (8000594 <MX_GPIO_Init+0xc0>)
 8000544:	f001 fe20 	bl	8002188 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000548:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800054c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	2301      	movs	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	2302      	movs	r3, #2
 8000558:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	4619      	mov	r1, r3
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <MX_GPIO_Init+0xbc>)
 8000562:	f001 fca7 	bl	8001eb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000566:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800056a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2302      	movs	r3, #2
 8000576:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_GPIO_Init+0xc0>)
 8000580:	f001 fc98 	bl	8001eb4 <HAL_GPIO_Init>

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	40010c00 	.word	0x40010c00
 8000594:	40011400 	.word	0x40011400

08000598 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800059e:	e7fe      	b.n	800059e <Error_Handler+0x6>

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_MspInit+0x5c>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a14      	ldr	r2, [pc, #80]	; (80005fc <HAL_MspInit+0x5c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_MspInit+0x5c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_MspInit+0x5c>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_MspInit+0x5c>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <HAL_MspInit+0x5c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_MspInit+0x60>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <HAL_MspInit+0x60>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010000 	.word	0x40010000

08000604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a2c      	ldr	r2, [pc, #176]	; (80006d0 <HAL_ADC_MspInit+0xcc>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d151      	bne.n	80006c8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <HAL_ADC_MspInit+0xd0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a2a      	ldr	r2, [pc, #168]	; (80006d4 <HAL_ADC_MspInit+0xd0>)
 800062a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <HAL_ADC_MspInit+0xd0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <HAL_ADC_MspInit+0xd0>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <HAL_ADC_MspInit+0xd0>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <HAL_ADC_MspInit+0xd0>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000654:	2306      	movs	r3, #6
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000658:	2303      	movs	r3, #3
 800065a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	481d      	ldr	r0, [pc, #116]	; (80006d8 <HAL_ADC_MspInit+0xd4>)
 8000664:	f001 fc26 	bl	8001eb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <HAL_ADC_MspInit+0xd8>)
 800066a:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <HAL_ADC_MspInit+0xdc>)
 800066c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_ADC_MspInit+0xd8>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <HAL_ADC_MspInit+0xd8>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_ADC_MspInit+0xd8>)
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <HAL_ADC_MspInit+0xd8>)
 8000682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000686:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <HAL_ADC_MspInit+0xd8>)
 800068a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800068e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_ADC_MspInit+0xd8>)
 8000692:	2220      	movs	r2, #32
 8000694:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <HAL_ADC_MspInit+0xd8>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800069c:	480f      	ldr	r0, [pc, #60]	; (80006dc <HAL_ADC_MspInit+0xd8>)
 800069e:	f001 f88f 	bl	80017c0 <HAL_DMA_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80006a8:	f7ff ff76 	bl	8000598 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <HAL_ADC_MspInit+0xd8>)
 80006b0:	621a      	str	r2, [r3, #32]
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <HAL_ADC_MspInit+0xd8>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2012      	movs	r0, #18
 80006be:	f001 f848 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006c2:	2012      	movs	r0, #18
 80006c4:	f001 f861 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40012400 	.word	0x40012400
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40010800 	.word	0x40010800
 80006dc:	2000010c 	.word	0x2000010c
 80006e0:	40020008 	.word	0x40020008

080006e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <HAL_UART_MspInit+0xd8>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d157      	bne.n	80007b4 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000704:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <HAL_UART_MspInit+0xdc>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a2d      	ldr	r2, [pc, #180]	; (80007c0 <HAL_UART_MspInit+0xdc>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <HAL_UART_MspInit+0xdc>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <HAL_UART_MspInit+0xdc>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <HAL_UART_MspInit+0xdc>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <HAL_UART_MspInit+0xdc>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000738:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4619      	mov	r1, r3
 8000748:	481e      	ldr	r0, [pc, #120]	; (80007c4 <HAL_UART_MspInit+0xe0>)
 800074a:	f001 fbb3 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	4818      	ldr	r0, [pc, #96]	; (80007c4 <HAL_UART_MspInit+0xe0>)
 8000764:	f001 fba6 	bl	8001eb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_UART_MspInit+0xe4>)
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <HAL_UART_MspInit+0xe8>)
 800076c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <HAL_UART_MspInit+0xe4>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_UART_MspInit+0xe4>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <HAL_UART_MspInit+0xe4>)
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <HAL_UART_MspInit+0xe4>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <HAL_UART_MspInit+0xe4>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <HAL_UART_MspInit+0xe4>)
 800078e:	2220      	movs	r2, #32
 8000790:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <HAL_UART_MspInit+0xe4>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <HAL_UART_MspInit+0xe4>)
 800079a:	f001 f811 	bl	80017c0 <HAL_DMA_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80007a4:	f7ff fef8 	bl	8000598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_UART_MspInit+0xe4>)
 80007ac:	639a      	str	r2, [r3, #56]	; 0x38
 80007ae:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <HAL_UART_MspInit+0xe4>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40013800 	.word	0x40013800
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800
 80007c8:	20000084 	.word	0x20000084
 80007cc:	40020058 	.word	0x40020058

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <NMI_Handler+0x4>

080007d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler+0x4>

080007dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <MemManage_Handler+0x4>

080007e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler+0x4>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <UsageFault_Handler+0x4>

080007ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr

08000806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000816:	f000 f893 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <DMA1_Channel1_IRQHandler+0x10>)
 8000826:	f001 f8db 	bl	80019e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000010c 	.word	0x2000010c

08000834 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <DMA1_Channel5_IRQHandler+0x10>)
 800083a:	f001 f8d1 	bl	80019e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000084 	.word	0x20000084

08000848 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800084c:	4802      	ldr	r0, [pc, #8]	; (8000858 <ADC1_2_IRQHandler+0x10>)
 800084e:	f000 fb11 	bl	8000e74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000054 	.word	0x20000054

0800085c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <Reset_Handler>:
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <LoopFillZerobss+0x12>)
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <LoopFillZerobss+0x16>)
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <LoopFillZerobss+0x1a>)
 800086e:	2300      	movs	r3, #0
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:
 8000872:	58d4      	ldr	r4, [r2, r3]
 8000874:	50c4      	str	r4, [r0, r3]
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:
 8000878:	18c4      	adds	r4, r0, r3
 800087a:	428c      	cmp	r4, r1
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <LoopFillZerobss+0x1e>)
 8000880:	4c0a      	ldr	r4, [pc, #40]	; (80008ac <LoopFillZerobss+0x22>)
 8000882:	2300      	movs	r3, #0
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:
 800088a:	42a2      	cmp	r2, r4
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>
 800088e:	f7ff ffe5 	bl	800085c <SystemInit>
 8000892:	f002 fd2d 	bl	80032f0 <__libc_init_array>
 8000896:	f7ff fcc5 	bl	8000224 <main>
 800089a:	4770      	bx	lr
 800089c:	20000000 	.word	0x20000000
 80008a0:	2000000c 	.word	0x2000000c
 80008a4:	080033a8 	.word	0x080033a8
 80008a8:	2000000c 	.word	0x2000000c
 80008ac:	20000158 	.word	0x20000158

080008b0 <ADC3_IRQHandler>:
 80008b0:	e7fe      	b.n	80008b0 <ADC3_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_Init+0x28>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_Init+0x28>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 ff39 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff fe66 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 ff51 	bl	80017a6 <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 ff19 	bl	8001752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	; (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x1c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_IncTick+0x20>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a03      	ldr	r2, [pc, #12]	; (8000960 <HAL_IncTick+0x20>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	20000008 	.word	0x20000008
 8000960:	20000154 	.word	0x20000154

08000964 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <HAL_GetTick+0x10>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000154 	.word	0x20000154

08000978 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e0ce      	b.n	8000b38 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fe24 	bl	8000604 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 fc93 	bl	80012e8 <ADC_ConversionStop_Disable>
 80009c2:	4603      	mov	r3, r0
 80009c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f040 80a9 	bne.w	8000b26 <HAL_ADC_Init+0x1ae>
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 80a5 	bne.w	8000b26 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009e4:	f023 0302 	bic.w	r3, r3, #2
 80009e8:	f043 0202 	orr.w	r2, r3, #2
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4951      	ldr	r1, [pc, #324]	; (8000b40 <HAL_ADC_Init+0x1c8>)
 80009fa:	428b      	cmp	r3, r1
 80009fc:	d10a      	bne.n	8000a14 <HAL_ADC_Init+0x9c>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000a06:	d002      	beq.n	8000a0e <HAL_ADC_Init+0x96>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	e004      	b.n	8000a18 <HAL_ADC_Init+0xa0>
 8000a0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a12:	e001      	b.n	8000a18 <HAL_ADC_Init+0xa0>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7b1b      	ldrb	r3, [r3, #12]
 8000a1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a30:	d003      	beq.n	8000a3a <HAL_ADC_Init+0xc2>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d102      	bne.n	8000a40 <HAL_ADC_Init+0xc8>
 8000a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3e:	e000      	b.n	8000a42 <HAL_ADC_Init+0xca>
 8000a40:	2300      	movs	r3, #0
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7d1b      	ldrb	r3, [r3, #20]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d119      	bne.n	8000a84 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7b1b      	ldrb	r3, [r3, #12]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d109      	bne.n	8000a6c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	035a      	lsls	r2, r3, #13
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	e00b      	b.n	8000a84 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a70:	f043 0220 	orr.w	r2, r3, #32
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7c:	f043 0201 	orr.w	r2, r3, #1
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	430a      	orrs	r2, r1
 8000a96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <HAL_ADC_Init+0x1cc>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	6812      	ldr	r2, [r2, #0]
 8000aa6:	68b9      	ldr	r1, [r7, #8]
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ab4:	d003      	beq.n	8000abe <HAL_ADC_Init+0x146>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d104      	bne.n	8000ac8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	051b      	lsls	r3, r3, #20
 8000ac6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_ADC_Init+0x1d0>)
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d10b      	bne.n	8000b04 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af6:	f023 0303 	bic.w	r3, r3, #3
 8000afa:	f043 0201 	orr.w	r2, r3, #1
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b02:	e018      	b.n	8000b36 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	f023 0312 	bic.w	r3, r3, #18
 8000b0c:	f043 0210 	orr.w	r2, r3, #16
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b18:	f043 0201 	orr.w	r2, r3, #1
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b24:	e007      	b.n	8000b36 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2a:	f043 0210 	orr.w	r2, r3, #16
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40013c00 	.word	0x40013c00
 8000b44:	ffe1f7fd 	.word	0xffe1f7fd
 8000b48:	ff1f0efe 	.word	0xff1f0efe

08000b4c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d101      	bne.n	8000b66 <HAL_ADC_Start_IT+0x1a>
 8000b62:	2302      	movs	r3, #2
 8000b64:	e0a0      	b.n	8000ca8 <HAL_ADC_Start_IT+0x15c>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 fb60 	bl	8001234 <ADC_Enable>
 8000b74:	4603      	mov	r3, r0
 8000b76:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 808f 	bne.w	8000c9e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b88:	f023 0301 	bic.w	r3, r3, #1
 8000b8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a45      	ldr	r2, [pc, #276]	; (8000cb0 <HAL_ADC_Start_IT+0x164>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d105      	bne.n	8000baa <HAL_ADC_Start_IT+0x5e>
 8000b9e:	4b45      	ldr	r3, [pc, #276]	; (8000cb4 <HAL_ADC_Start_IT+0x168>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d115      	bne.n	8000bd6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d026      	beq.n	8000c12 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bd4:	e01d      	b.n	8000c12 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a33      	ldr	r2, [pc, #204]	; (8000cb4 <HAL_ADC_Start_IT+0x168>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d004      	beq.n	8000bf6 <HAL_ADC_Start_IT+0xaa>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <HAL_ADC_Start_IT+0x164>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d10d      	bne.n	8000c12 <HAL_ADC_Start_IT+0xc6>
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <HAL_ADC_Start_IT+0x168>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	f023 0206 	bic.w	r2, r3, #6
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c2a:	e002      	b.n	8000c32 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f06f 0202 	mvn.w	r2, #2
 8000c42:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f042 0220 	orr.w	r2, r2, #32
 8000c52:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c62:	d113      	bne.n	8000c8c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c68:	4a11      	ldr	r2, [pc, #68]	; (8000cb0 <HAL_ADC_Start_IT+0x164>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d105      	bne.n	8000c7a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_ADC_Start_IT+0x168>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d108      	bne.n	8000c8c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	e00c      	b.n	8000ca6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	e003      	b.n	8000ca6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40012800 	.word	0x40012800
 8000cb4:	40012400 	.word	0x40012400

08000cb8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a64      	ldr	r2, [pc, #400]	; (8000e60 <HAL_ADC_Start_DMA+0x1a8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d004      	beq.n	8000cdc <HAL_ADC_Start_DMA+0x24>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a63      	ldr	r2, [pc, #396]	; (8000e64 <HAL_ADC_Start_DMA+0x1ac>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d106      	bne.n	8000cea <HAL_ADC_Start_DMA+0x32>
 8000cdc:	4b60      	ldr	r3, [pc, #384]	; (8000e60 <HAL_ADC_Start_DMA+0x1a8>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f040 80b3 	bne.w	8000e50 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d101      	bne.n	8000cf8 <HAL_ADC_Start_DMA+0x40>
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e0ae      	b.n	8000e56 <HAL_ADC_Start_DMA+0x19e>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f000 fa97 	bl	8001234 <ADC_Enable>
 8000d06:	4603      	mov	r3, r0
 8000d08:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f040 809a 	bne.w	8000e46 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d1a:	f023 0301 	bic.w	r3, r3, #1
 8000d1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a4e      	ldr	r2, [pc, #312]	; (8000e64 <HAL_ADC_Start_DMA+0x1ac>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d105      	bne.n	8000d3c <HAL_ADC_Start_DMA+0x84>
 8000d30:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <HAL_ADC_Start_DMA+0x1a8>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d115      	bne.n	8000d68 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d026      	beq.n	8000da4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d66:	e01d      	b.n	8000da4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a39      	ldr	r2, [pc, #228]	; (8000e60 <HAL_ADC_Start_DMA+0x1a8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d004      	beq.n	8000d88 <HAL_ADC_Start_DMA+0xd0>
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a38      	ldr	r2, [pc, #224]	; (8000e64 <HAL_ADC_Start_DMA+0x1ac>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d10d      	bne.n	8000da4 <HAL_ADC_Start_DMA+0xec>
 8000d88:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <HAL_ADC_Start_DMA+0x1a8>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d007      	beq.n	8000da4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	f023 0206 	bic.w	r2, r3, #6
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dbc:	e002      	b.n	8000dc4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	4a25      	ldr	r2, [pc, #148]	; (8000e68 <HAL_ADC_Start_DMA+0x1b0>)
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	4a24      	ldr	r2, [pc, #144]	; (8000e6c <HAL_ADC_Start_DMA+0x1b4>)
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <HAL_ADC_Start_DMA+0x1b8>)
 8000de2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f06f 0202 	mvn.w	r2, #2
 8000dec:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dfc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6a18      	ldr	r0, [r3, #32]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	334c      	adds	r3, #76	; 0x4c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f000 fd4d 	bl	80018ac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e1c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e20:	d108      	bne.n	8000e34 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e30:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e32:	e00f      	b.n	8000e54 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e42:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e44:	e006      	b.n	8000e54 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000e4e:	e001      	b.n	8000e54 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40012400 	.word	0x40012400
 8000e64:	40012800 	.word	0x40012800
 8000e68:	0800136b 	.word	0x0800136b
 8000e6c:	080013e7 	.word	0x080013e7
 8000e70:	08001403 	.word	0x08001403

08000e74 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0320 	and.w	r3, r3, #32
 8000e86:	2b20      	cmp	r3, #32
 8000e88:	d140      	bne.n	8000f0c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d139      	bne.n	8000f0c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d105      	bne.n	8000eb0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000eba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ebe:	d11d      	bne.n	8000efc <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d119      	bne.n	8000efc <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0220 	bic.w	r2, r2, #32
 8000ed6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef4:	f043 0201 	orr.w	r2, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f87c 	bl	8000ffa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f06f 0212 	mvn.w	r2, #18
 8000f0a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	2b80      	cmp	r3, #128	; 0x80
 8000f18:	d14f      	bne.n	8000fba <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d148      	bne.n	8000fba <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d105      	bne.n	8000f40 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000f4a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000f4e:	d012      	beq.n	8000f76 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d125      	bne.n	8000faa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f68:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f6c:	d11d      	bne.n	8000faa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d119      	bne.n	8000faa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f84:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	f043 0201 	orr.w	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 faf0 	bl	8001590 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f06f 020c 	mvn.w	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc4:	2b40      	cmp	r3, #64	; 0x40
 8000fc6:	d114      	bne.n	8000ff2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f81b 	bl	800101e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f06f 0201 	mvn.w	r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
	...

08001044 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x20>
 8001060:	2302      	movs	r3, #2
 8001062:	e0dc      	b.n	800121e <HAL_ADC_ConfigChannel+0x1da>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b06      	cmp	r3, #6
 8001072:	d81c      	bhi.n	80010ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	3b05      	subs	r3, #5
 8001086:	221f      	movs	r2, #31
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	4019      	ands	r1, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	3b05      	subs	r3, #5
 80010a0:	fa00 f203 	lsl.w	r2, r0, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
 80010ac:	e03c      	b.n	8001128 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b0c      	cmp	r3, #12
 80010b4:	d81c      	bhi.n	80010f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	3b23      	subs	r3, #35	; 0x23
 80010c8:	221f      	movs	r2, #31
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	4019      	ands	r1, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	3b23      	subs	r3, #35	; 0x23
 80010e2:	fa00 f203 	lsl.w	r2, r0, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	631a      	str	r2, [r3, #48]	; 0x30
 80010ee:	e01b      	b.n	8001128 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	3b41      	subs	r3, #65	; 0x41
 8001102:	221f      	movs	r2, #31
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	4019      	ands	r1, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	3b41      	subs	r3, #65	; 0x41
 800111c:	fa00 f203 	lsl.w	r2, r0, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b09      	cmp	r3, #9
 800112e:	d91c      	bls.n	800116a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68d9      	ldr	r1, [r3, #12]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	3b1e      	subs	r3, #30
 8001142:	2207      	movs	r2, #7
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	4019      	ands	r1, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	6898      	ldr	r0, [r3, #8]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	3b1e      	subs	r3, #30
 800115c:	fa00 f203 	lsl.w	r2, r0, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	e019      	b.n	800119e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6919      	ldr	r1, [r3, #16]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	2207      	movs	r2, #7
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	4019      	ands	r1, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6898      	ldr	r0, [r3, #8]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	fa00 f203 	lsl.w	r2, r0, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b10      	cmp	r3, #16
 80011a4:	d003      	beq.n	80011ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011aa:	2b11      	cmp	r3, #17
 80011ac:	d132      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_ADC_ConfigChannel+0x1e4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d125      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d126      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b10      	cmp	r3, #16
 80011dc:	d11a      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_ADC_ConfigChannel+0x1e8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <HAL_ADC_ConfigChannel+0x1ec>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	0c9a      	lsrs	r2, r3, #18
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f4:	e002      	b.n	80011fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f9      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001202:	e007      	b.n	8001214 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	f043 0220 	orr.w	r2, r3, #32
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	40012400 	.word	0x40012400
 800122c:	20000000 	.word	0x20000000
 8001230:	431bde83 	.word	0x431bde83

08001234 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d040      	beq.n	80012d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0201 	orr.w	r2, r2, #1
 8001260:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <ADC_Enable+0xac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <ADC_Enable+0xb0>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	0c9b      	lsrs	r3, r3, #18
 800126e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001270:	e002      	b.n	8001278 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3b01      	subs	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f9      	bne.n	8001272 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800127e:	f7ff fb71 	bl	8000964 <HAL_GetTick>
 8001282:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001284:	e01f      	b.n	80012c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001286:	f7ff fb6d 	bl	8000964 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d918      	bls.n	80012c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d011      	beq.n	80012c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f043 0210 	orr.w	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e007      	b.n	80012d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d1d8      	bne.n	8001286 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d12e      	bne.n	8001360 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001312:	f7ff fb27 	bl	8000964 <HAL_GetTick>
 8001316:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001318:	e01b      	b.n	8001352 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800131a:	f7ff fb23 	bl	8000964 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d914      	bls.n	8001352 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10d      	bne.n	8001352 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f043 0210 	orr.w	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e007      	b.n	8001362 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d0dc      	beq.n	800131a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001380:	2b00      	cmp	r3, #0
 8001382:	d127      	bne.n	80013d4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800139a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800139e:	d115      	bne.n	80013cc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d111      	bne.n	80013cc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff fe14 	bl	8000ffa <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80013d2:	e004      	b.n	80013de <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	4798      	blx	r3
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f7ff fe09 	bl	800100c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	f043 0204 	orr.w	r2, r3, #4
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f7ff fe01 	bl	8001030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_ADCEx_Calibration_Start+0x1e>
 8001452:	2302      	movs	r3, #2
 8001454:	e095      	b.n	8001582 <HAL_ADCEx_Calibration_Start+0x14a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff42 	bl	80012e8 <ADC_ConversionStop_Disable>
 8001464:	4603      	mov	r3, r0
 8001466:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 8084 	bne.w	8001578 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001478:	f023 0302 	bic.w	r3, r3, #2
 800147c:	f043 0202 	orr.w	r2, r3, #2
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001484:	4b41      	ldr	r3, [pc, #260]	; (800158c <HAL_ADCEx_Calibration_Start+0x154>)
 8001486:	681c      	ldr	r4, [r3, #0]
 8001488:	2002      	movs	r0, #2
 800148a:	f001 fb67 	bl	8002b5c <HAL_RCCEx_GetPeriphCLKFreq>
 800148e:	4603      	mov	r3, r0
 8001490:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001494:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001496:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001498:	e002      	b.n	80014a0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3b01      	subs	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f9      	bne.n	800149a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fec4 	bl	8001234 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0208 	orr.w	r2, r2, #8
 80014ba:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80014bc:	f7ff fa52 	bl	8000964 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014c2:	e01b      	b.n	80014fc <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014c4:	f7ff fa4e 	bl	8000964 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b0a      	cmp	r3, #10
 80014d0:	d914      	bls.n	80014fc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00d      	beq.n	80014fc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	f023 0312 	bic.w	r3, r3, #18
 80014e8:	f043 0210 	orr.w	r2, r3, #16
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e042      	b.n	8001582 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1dc      	bne.n	80014c4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0204 	orr.w	r2, r2, #4
 8001518:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800151a:	f7ff fa23 	bl	8000964 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001520:	e01b      	b.n	800155a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001522:	f7ff fa1f 	bl	8000964 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b0a      	cmp	r3, #10
 800152e:	d914      	bls.n	800155a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00d      	beq.n	800155a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	f023 0312 	bic.w	r3, r3, #18
 8001546:	f043 0210 	orr.w	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e013      	b.n	8001582 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1dc      	bne.n	8001522 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	f023 0303 	bic.w	r3, r3, #3
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001580:	7dfb      	ldrb	r3, [r7, #23]
}
 8001582:	4618      	mov	r0, r3
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	20000000 	.word	0x20000000

08001590 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
	...

080015a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4906      	ldr	r1, [pc, #24]	; (800163c <__NVIC_EnableIRQ+0x34>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f7ff ff90 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff2d 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff42 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff90 	bl	8001694 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5f 	bl	8001640 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff35 	bl	8001608 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa2 	bl	80016f8 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e059      	b.n	800188a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_DMA_Init+0xd4>)
 80017de:	429a      	cmp	r2, r3
 80017e0:	d80f      	bhi.n	8001802 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_DMA_Init+0xd8>)
 80017ea:	4413      	add	r3, r2
 80017ec:	4a2b      	ldr	r2, [pc, #172]	; (800189c <HAL_DMA_Init+0xdc>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	009a      	lsls	r2, r3, #2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <HAL_DMA_Init+0xe0>)
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001800:	e00e      	b.n	8001820 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_DMA_Init+0xe4>)
 800180a:	4413      	add	r3, r2
 800180c:	4a23      	ldr	r2, [pc, #140]	; (800189c <HAL_DMA_Init+0xdc>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	009a      	lsls	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <HAL_DMA_Init+0xe8>)
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001836:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800183a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40020407 	.word	0x40020407
 8001898:	bffdfff8 	.word	0xbffdfff8
 800189c:	cccccccd 	.word	0xcccccccd
 80018a0:	40020000 	.word	0x40020000
 80018a4:	bffdfbf8 	.word	0xbffdfbf8
 80018a8:	40020400 	.word	0x40020400

080018ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_DMA_Start_IT+0x20>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e04a      	b.n	8001962 <HAL_DMA_Start_IT+0xb6>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d13a      	bne.n	8001954 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2202      	movs	r2, #2
 80018e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 faa8 	bl	8001e58 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 020e 	orr.w	r2, r2, #14
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e00f      	b.n	8001942 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0204 	bic.w	r2, r2, #4
 8001930:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 020a 	orr.w	r2, r2, #10
 8001940:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0201 	orr.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e005      	b.n	8001960 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800195c:	2302      	movs	r3, #2
 800195e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001960:	7dfb      	ldrb	r3, [r7, #23]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800197c:	2b02      	cmp	r3, #2
 800197e:	d008      	beq.n	8001992 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2204      	movs	r2, #4
 8001984:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e020      	b.n	80019d4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 020e 	bic.w	r2, r2, #14
 80019a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ba:	2101      	movs	r1, #1
 80019bc:	fa01 f202 	lsl.w	r2, r1, r2
 80019c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	2204      	movs	r2, #4
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80d6 	beq.w	8001bb6 <HAL_DMA_IRQHandler+0x1d6>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80d0 	beq.w	8001bb6 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0204 	bic.w	r2, r2, #4
 8001a32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b9b      	ldr	r3, [pc, #620]	; (8001ca8 <HAL_DMA_IRQHandler+0x2c8>)
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d958      	bls.n	8001af2 <HAL_DMA_IRQHandler+0x112>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a99      	ldr	r2, [pc, #612]	; (8001cac <HAL_DMA_IRQHandler+0x2cc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d04f      	beq.n	8001aea <HAL_DMA_IRQHandler+0x10a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a98      	ldr	r2, [pc, #608]	; (8001cb0 <HAL_DMA_IRQHandler+0x2d0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d048      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x106>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a96      	ldr	r2, [pc, #600]	; (8001cb4 <HAL_DMA_IRQHandler+0x2d4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d040      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x100>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a95      	ldr	r2, [pc, #596]	; (8001cb8 <HAL_DMA_IRQHandler+0x2d8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d038      	beq.n	8001ada <HAL_DMA_IRQHandler+0xfa>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a93      	ldr	r2, [pc, #588]	; (8001cbc <HAL_DMA_IRQHandler+0x2dc>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d030      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0xf4>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a92      	ldr	r2, [pc, #584]	; (8001cc0 <HAL_DMA_IRQHandler+0x2e0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d028      	beq.n	8001ace <HAL_DMA_IRQHandler+0xee>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a89      	ldr	r2, [pc, #548]	; (8001ca8 <HAL_DMA_IRQHandler+0x2c8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d020      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0xe8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a8e      	ldr	r2, [pc, #568]	; (8001cc4 <HAL_DMA_IRQHandler+0x2e4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d019      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0xe4>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a8c      	ldr	r2, [pc, #560]	; (8001cc8 <HAL_DMA_IRQHandler+0x2e8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d012      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0xe0>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a8b      	ldr	r2, [pc, #556]	; (8001ccc <HAL_DMA_IRQHandler+0x2ec>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d00a      	beq.n	8001aba <HAL_DMA_IRQHandler+0xda>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a89      	ldr	r2, [pc, #548]	; (8001cd0 <HAL_DMA_IRQHandler+0x2f0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d102      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0xd4>
 8001aae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ab2:	e01b      	b.n	8001aec <HAL_DMA_IRQHandler+0x10c>
 8001ab4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ab8:	e018      	b.n	8001aec <HAL_DMA_IRQHandler+0x10c>
 8001aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abe:	e015      	b.n	8001aec <HAL_DMA_IRQHandler+0x10c>
 8001ac0:	2340      	movs	r3, #64	; 0x40
 8001ac2:	e013      	b.n	8001aec <HAL_DMA_IRQHandler+0x10c>
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	e011      	b.n	8001aec <HAL_DMA_IRQHandler+0x10c>
 8001ac8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001acc:	e00e      	b.n	8001aec <HAL_DMA_IRQHandler+0x10c>
 8001ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ad2:	e00b      	b.n	8001aec <HAL_DMA_IRQHandler+0x10c>
 8001ad4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ad8:	e008      	b.n	8001aec <HAL_DMA_IRQHandler+0x10c>
 8001ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ade:	e005      	b.n	8001aec <HAL_DMA_IRQHandler+0x10c>
 8001ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae4:	e002      	b.n	8001aec <HAL_DMA_IRQHandler+0x10c>
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	e000      	b.n	8001aec <HAL_DMA_IRQHandler+0x10c>
 8001aea:	2304      	movs	r3, #4
 8001aec:	4a79      	ldr	r2, [pc, #484]	; (8001cd4 <HAL_DMA_IRQHandler+0x2f4>)
 8001aee:	6053      	str	r3, [r2, #4]
 8001af0:	e057      	b.n	8001ba2 <HAL_DMA_IRQHandler+0x1c2>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6d      	ldr	r2, [pc, #436]	; (8001cac <HAL_DMA_IRQHandler+0x2cc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d04f      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x1bc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a6b      	ldr	r2, [pc, #428]	; (8001cb0 <HAL_DMA_IRQHandler+0x2d0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d048      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x1b8>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6a      	ldr	r2, [pc, #424]	; (8001cb4 <HAL_DMA_IRQHandler+0x2d4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d040      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x1b2>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a68      	ldr	r2, [pc, #416]	; (8001cb8 <HAL_DMA_IRQHandler+0x2d8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d038      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x1ac>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a67      	ldr	r2, [pc, #412]	; (8001cbc <HAL_DMA_IRQHandler+0x2dc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d030      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x1a6>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a65      	ldr	r2, [pc, #404]	; (8001cc0 <HAL_DMA_IRQHandler+0x2e0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d028      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x1a0>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a5d      	ldr	r2, [pc, #372]	; (8001ca8 <HAL_DMA_IRQHandler+0x2c8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d020      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x19a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a61      	ldr	r2, [pc, #388]	; (8001cc4 <HAL_DMA_IRQHandler+0x2e4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d019      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x196>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a60      	ldr	r2, [pc, #384]	; (8001cc8 <HAL_DMA_IRQHandler+0x2e8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d012      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x192>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a5e      	ldr	r2, [pc, #376]	; (8001ccc <HAL_DMA_IRQHandler+0x2ec>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00a      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x18c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a5d      	ldr	r2, [pc, #372]	; (8001cd0 <HAL_DMA_IRQHandler+0x2f0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d102      	bne.n	8001b66 <HAL_DMA_IRQHandler+0x186>
 8001b60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b64:	e01b      	b.n	8001b9e <HAL_DMA_IRQHandler+0x1be>
 8001b66:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b6a:	e018      	b.n	8001b9e <HAL_DMA_IRQHandler+0x1be>
 8001b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b70:	e015      	b.n	8001b9e <HAL_DMA_IRQHandler+0x1be>
 8001b72:	2340      	movs	r3, #64	; 0x40
 8001b74:	e013      	b.n	8001b9e <HAL_DMA_IRQHandler+0x1be>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e011      	b.n	8001b9e <HAL_DMA_IRQHandler+0x1be>
 8001b7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b7e:	e00e      	b.n	8001b9e <HAL_DMA_IRQHandler+0x1be>
 8001b80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b84:	e00b      	b.n	8001b9e <HAL_DMA_IRQHandler+0x1be>
 8001b86:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b8a:	e008      	b.n	8001b9e <HAL_DMA_IRQHandler+0x1be>
 8001b8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b90:	e005      	b.n	8001b9e <HAL_DMA_IRQHandler+0x1be>
 8001b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b96:	e002      	b.n	8001b9e <HAL_DMA_IRQHandler+0x1be>
 8001b98:	2340      	movs	r3, #64	; 0x40
 8001b9a:	e000      	b.n	8001b9e <HAL_DMA_IRQHandler+0x1be>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	4a4e      	ldr	r2, [pc, #312]	; (8001cd8 <HAL_DMA_IRQHandler+0x2f8>)
 8001ba0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8136 	beq.w	8001e18 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bb4:	e130      	b.n	8001e18 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	2202      	movs	r2, #2
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80f8 	beq.w	8001db8 <HAL_DMA_IRQHandler+0x3d8>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80f2 	beq.w	8001db8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10b      	bne.n	8001bfa <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 020a 	bic.w	r2, r2, #10
 8001bf0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_DMA_IRQHandler+0x2c8>)
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d973      	bls.n	8001cee <HAL_DMA_IRQHandler+0x30e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_DMA_IRQHandler+0x2cc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d06a      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x306>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_DMA_IRQHandler+0x2d0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d063      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x302>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_DMA_IRQHandler+0x2d4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d05b      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x2fc>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <HAL_DMA_IRQHandler+0x2d8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d038      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x2c0>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_DMA_IRQHandler+0x2dc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d030      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x2ba>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a20      	ldr	r2, [pc, #128]	; (8001cc0 <HAL_DMA_IRQHandler+0x2e0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d028      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x2b4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <HAL_DMA_IRQHandler+0x2c8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d020      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x2ae>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <HAL_DMA_IRQHandler+0x2e4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x2aa>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <HAL_DMA_IRQHandler+0x2e8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d012      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x2a6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <HAL_DMA_IRQHandler+0x2ec>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00a      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x2a0>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <HAL_DMA_IRQHandler+0x2f0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d102      	bne.n	8001c7a <HAL_DMA_IRQHandler+0x29a>
 8001c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c78:	e036      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x308>
 8001c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7e:	e033      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x308>
 8001c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c84:	e030      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x308>
 8001c86:	2320      	movs	r3, #32
 8001c88:	e02e      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x308>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e02c      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x308>
 8001c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c92:	e029      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x308>
 8001c94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c98:	e026      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x308>
 8001c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9e:	e023      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x308>
 8001ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca4:	e020      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x308>
 8001ca6:	bf00      	nop
 8001ca8:	40020080 	.word	0x40020080
 8001cac:	40020008 	.word	0x40020008
 8001cb0:	4002001c 	.word	0x4002001c
 8001cb4:	40020030 	.word	0x40020030
 8001cb8:	40020044 	.word	0x40020044
 8001cbc:	40020058 	.word	0x40020058
 8001cc0:	4002006c 	.word	0x4002006c
 8001cc4:	40020408 	.word	0x40020408
 8001cc8:	4002041c 	.word	0x4002041c
 8001ccc:	40020430 	.word	0x40020430
 8001cd0:	40020444 	.word	0x40020444
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce0:	e002      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x308>
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	e000      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x308>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	4a4e      	ldr	r2, [pc, #312]	; (8001e24 <HAL_DMA_IRQHandler+0x444>)
 8001cea:	6053      	str	r3, [r2, #4]
 8001cec:	e057      	b.n	8001d9e <HAL_DMA_IRQHandler+0x3be>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a4d      	ldr	r2, [pc, #308]	; (8001e28 <HAL_DMA_IRQHandler+0x448>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d04f      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x3b8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a4b      	ldr	r2, [pc, #300]	; (8001e2c <HAL_DMA_IRQHandler+0x44c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d048      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x3b4>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a4a      	ldr	r2, [pc, #296]	; (8001e30 <HAL_DMA_IRQHandler+0x450>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d040      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x3ae>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a48      	ldr	r2, [pc, #288]	; (8001e34 <HAL_DMA_IRQHandler+0x454>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d038      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x3a8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a47      	ldr	r2, [pc, #284]	; (8001e38 <HAL_DMA_IRQHandler+0x458>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d030      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x3a2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a45      	ldr	r2, [pc, #276]	; (8001e3c <HAL_DMA_IRQHandler+0x45c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d028      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x39c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a44      	ldr	r2, [pc, #272]	; (8001e40 <HAL_DMA_IRQHandler+0x460>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d020      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x396>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a42      	ldr	r2, [pc, #264]	; (8001e44 <HAL_DMA_IRQHandler+0x464>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d019      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x392>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a41      	ldr	r2, [pc, #260]	; (8001e48 <HAL_DMA_IRQHandler+0x468>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d012      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x38e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3f      	ldr	r2, [pc, #252]	; (8001e4c <HAL_DMA_IRQHandler+0x46c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00a      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x388>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a3e      	ldr	r2, [pc, #248]	; (8001e50 <HAL_DMA_IRQHandler+0x470>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d102      	bne.n	8001d62 <HAL_DMA_IRQHandler+0x382>
 8001d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d60:	e01b      	b.n	8001d9a <HAL_DMA_IRQHandler+0x3ba>
 8001d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d66:	e018      	b.n	8001d9a <HAL_DMA_IRQHandler+0x3ba>
 8001d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d6c:	e015      	b.n	8001d9a <HAL_DMA_IRQHandler+0x3ba>
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e013      	b.n	8001d9a <HAL_DMA_IRQHandler+0x3ba>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e011      	b.n	8001d9a <HAL_DMA_IRQHandler+0x3ba>
 8001d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d7a:	e00e      	b.n	8001d9a <HAL_DMA_IRQHandler+0x3ba>
 8001d7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d80:	e00b      	b.n	8001d9a <HAL_DMA_IRQHandler+0x3ba>
 8001d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d86:	e008      	b.n	8001d9a <HAL_DMA_IRQHandler+0x3ba>
 8001d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8c:	e005      	b.n	8001d9a <HAL_DMA_IRQHandler+0x3ba>
 8001d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d92:	e002      	b.n	8001d9a <HAL_DMA_IRQHandler+0x3ba>
 8001d94:	2320      	movs	r3, #32
 8001d96:	e000      	b.n	8001d9a <HAL_DMA_IRQHandler+0x3ba>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	4a2e      	ldr	r2, [pc, #184]	; (8001e54 <HAL_DMA_IRQHandler+0x474>)
 8001d9c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d034      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001db6:	e02f      	b.n	8001e18 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d028      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x43a>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d023      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 020e 	bic.w	r2, r2, #14
 8001de0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
    }
  }
  return;
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
}
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40020008 	.word	0x40020008
 8001e2c:	4002001c 	.word	0x4002001c
 8001e30:	40020030 	.word	0x40020030
 8001e34:	40020044 	.word	0x40020044
 8001e38:	40020058 	.word	0x40020058
 8001e3c:	4002006c 	.word	0x4002006c
 8001e40:	40020080 	.word	0x40020080
 8001e44:	40020408 	.word	0x40020408
 8001e48:	4002041c 	.word	0x4002041c
 8001e4c:	40020430 	.word	0x40020430
 8001e50:	40020444 	.word	0x40020444
 8001e54:	40020000 	.word	0x40020000

08001e58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	2101      	movs	r1, #1
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d108      	bne.n	8001e98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e96:	e007      	b.n	8001ea8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	60da      	str	r2, [r3, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b08b      	sub	sp, #44	; 0x2c
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	e133      	b.n	8002130 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 8122 	bne.w	800212a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b12      	cmp	r3, #18
 8001eec:	d034      	beq.n	8001f58 <HAL_GPIO_Init+0xa4>
 8001eee:	2b12      	cmp	r3, #18
 8001ef0:	d80d      	bhi.n	8001f0e <HAL_GPIO_Init+0x5a>
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d02b      	beq.n	8001f4e <HAL_GPIO_Init+0x9a>
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d804      	bhi.n	8001f04 <HAL_GPIO_Init+0x50>
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d031      	beq.n	8001f62 <HAL_GPIO_Init+0xae>
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d01c      	beq.n	8001f3c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f02:	e048      	b.n	8001f96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d043      	beq.n	8001f90 <HAL_GPIO_Init+0xdc>
 8001f08:	2b11      	cmp	r3, #17
 8001f0a:	d01b      	beq.n	8001f44 <HAL_GPIO_Init+0x90>
          break;
 8001f0c:	e043      	b.n	8001f96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f0e:	4a8f      	ldr	r2, [pc, #572]	; (800214c <HAL_GPIO_Init+0x298>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d026      	beq.n	8001f62 <HAL_GPIO_Init+0xae>
 8001f14:	4a8d      	ldr	r2, [pc, #564]	; (800214c <HAL_GPIO_Init+0x298>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d806      	bhi.n	8001f28 <HAL_GPIO_Init+0x74>
 8001f1a:	4a8d      	ldr	r2, [pc, #564]	; (8002150 <HAL_GPIO_Init+0x29c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d020      	beq.n	8001f62 <HAL_GPIO_Init+0xae>
 8001f20:	4a8c      	ldr	r2, [pc, #560]	; (8002154 <HAL_GPIO_Init+0x2a0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01d      	beq.n	8001f62 <HAL_GPIO_Init+0xae>
          break;
 8001f26:	e036      	b.n	8001f96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f28:	4a8b      	ldr	r2, [pc, #556]	; (8002158 <HAL_GPIO_Init+0x2a4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d019      	beq.n	8001f62 <HAL_GPIO_Init+0xae>
 8001f2e:	4a8b      	ldr	r2, [pc, #556]	; (800215c <HAL_GPIO_Init+0x2a8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d016      	beq.n	8001f62 <HAL_GPIO_Init+0xae>
 8001f34:	4a8a      	ldr	r2, [pc, #552]	; (8002160 <HAL_GPIO_Init+0x2ac>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0xae>
          break;
 8001f3a:	e02c      	b.n	8001f96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	623b      	str	r3, [r7, #32]
          break;
 8001f42:	e028      	b.n	8001f96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	623b      	str	r3, [r7, #32]
          break;
 8001f4c:	e023      	b.n	8001f96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	3308      	adds	r3, #8
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e01e      	b.n	8001f96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	330c      	adds	r3, #12
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e019      	b.n	8001f96 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e012      	b.n	8001f96 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	611a      	str	r2, [r3, #16]
          break;
 8001f82:	e008      	b.n	8001f96 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f84:	2308      	movs	r3, #8
 8001f86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	615a      	str	r2, [r3, #20]
          break;
 8001f8e:	e002      	b.n	8001f96 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
          break;
 8001f94:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	2bff      	cmp	r3, #255	; 0xff
 8001f9a:	d801      	bhi.n	8001fa0 <HAL_GPIO_Init+0xec>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	e001      	b.n	8001fa4 <HAL_GPIO_Init+0xf0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2bff      	cmp	r3, #255	; 0xff
 8001faa:	d802      	bhi.n	8001fb2 <HAL_GPIO_Init+0xfe>
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x104>
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	3b08      	subs	r3, #8
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	210f      	movs	r1, #15
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	401a      	ands	r2, r3
 8001fca:	6a39      	ldr	r1, [r7, #32]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a2 	beq.w	800212a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe6:	4b5f      	ldr	r3, [pc, #380]	; (8002164 <HAL_GPIO_Init+0x2b0>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	4a5e      	ldr	r2, [pc, #376]	; (8002164 <HAL_GPIO_Init+0x2b0>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6193      	str	r3, [r2, #24]
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <HAL_GPIO_Init+0x2b0>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ffe:	4a5a      	ldr	r2, [pc, #360]	; (8002168 <HAL_GPIO_Init+0x2b4>)
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4013      	ands	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a51      	ldr	r2, [pc, #324]	; (800216c <HAL_GPIO_Init+0x2b8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <HAL_GPIO_Init+0x1b6>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a50      	ldr	r2, [pc, #320]	; (8002170 <HAL_GPIO_Init+0x2bc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d019      	beq.n	8002066 <HAL_GPIO_Init+0x1b2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4f      	ldr	r2, [pc, #316]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_GPIO_Init+0x1ae>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4e      	ldr	r2, [pc, #312]	; (8002178 <HAL_GPIO_Init+0x2c4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00d      	beq.n	800205e <HAL_GPIO_Init+0x1aa>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4d      	ldr	r2, [pc, #308]	; (800217c <HAL_GPIO_Init+0x2c8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x1a6>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4c      	ldr	r2, [pc, #304]	; (8002180 <HAL_GPIO_Init+0x2cc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_GPIO_Init+0x1a2>
 8002052:	2305      	movs	r3, #5
 8002054:	e00a      	b.n	800206c <HAL_GPIO_Init+0x1b8>
 8002056:	2306      	movs	r3, #6
 8002058:	e008      	b.n	800206c <HAL_GPIO_Init+0x1b8>
 800205a:	2304      	movs	r3, #4
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x1b8>
 800205e:	2303      	movs	r3, #3
 8002060:	e004      	b.n	800206c <HAL_GPIO_Init+0x1b8>
 8002062:	2302      	movs	r3, #2
 8002064:	e002      	b.n	800206c <HAL_GPIO_Init+0x1b8>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_GPIO_Init+0x1b8>
 800206a:	2300      	movs	r3, #0
 800206c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206e:	f002 0203 	and.w	r2, r2, #3
 8002072:	0092      	lsls	r2, r2, #2
 8002074:	4093      	lsls	r3, r2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207c:	493a      	ldr	r1, [pc, #232]	; (8002168 <HAL_GPIO_Init+0x2b4>)
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3302      	adds	r3, #2
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	493a      	ldr	r1, [pc, #232]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
 80020a2:	e006      	b.n	80020b2 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a4:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	4935      	ldr	r1, [pc, #212]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4930      	ldr	r1, [pc, #192]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
 80020ca:	e006      	b.n	80020da <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	492b      	ldr	r1, [pc, #172]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	4926      	ldr	r1, [pc, #152]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
 80020f2:	e006      	b.n	8002102 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	4921      	ldr	r1, [pc, #132]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020fe:	4013      	ands	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	491c      	ldr	r1, [pc, #112]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	60cb      	str	r3, [r1, #12]
 800211a:	e006      	b.n	800212a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	43db      	mvns	r3, r3
 8002124:	4917      	ldr	r1, [pc, #92]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 8002126:	4013      	ands	r3, r2
 8002128:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	3301      	adds	r3, #1
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	f47f aec4 	bne.w	8001ec8 <HAL_GPIO_Init+0x14>
  }
}
 8002140:	bf00      	nop
 8002142:	372c      	adds	r7, #44	; 0x2c
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	10210000 	.word	0x10210000
 8002150:	10110000 	.word	0x10110000
 8002154:	10120000 	.word	0x10120000
 8002158:	10310000 	.word	0x10310000
 800215c:	10320000 	.word	0x10320000
 8002160:	10220000 	.word	0x10220000
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000
 800216c:	40010800 	.word	0x40010800
 8002170:	40010c00 	.word	0x40010c00
 8002174:	40011000 	.word	0x40011000
 8002178:	40011400 	.word	0x40011400
 800217c:	40011800 	.word	0x40011800
 8002180:	40011c00 	.word	0x40011c00
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e26c      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8087 	beq.w	80022e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d00c      	beq.n	80021fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e4:	4b8f      	ldr	r3, [pc, #572]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d112      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
 80021f0:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d10b      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d06c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x12c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d168      	bne.n	80022e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e246      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x76>
 8002220:	4b80      	ldr	r3, [pc, #512]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a7f      	ldr	r2, [pc, #508]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e02e      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x98>
 8002236:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7a      	ldr	r2, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b78      	ldr	r3, [pc, #480]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a77      	ldr	r2, [pc, #476]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0xbc>
 800225a:	4b72      	ldr	r3, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a71      	ldr	r2, [pc, #452]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002274:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a67      	ldr	r2, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe fb66 	bl	8000964 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe fb62 	bl	8000964 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1fa      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xe4>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fb52 	bl	8000964 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe fb4e 	bl	8000964 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1e6      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x10c>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f2:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
 800230a:	4b46      	ldr	r3, [pc, #280]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1ba      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4939      	ldr	r1, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe fb07 	bl	8000964 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235a:	f7fe fb03 	bl	8000964 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e19b      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4927      	ldr	r1, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe fae6 	bl	8000964 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe fae2 	bl	8000964 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e17a      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d03a      	beq.n	800243c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d019      	beq.n	8002402 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_RCC_OscConfig+0x274>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7fe fac6 	bl	8000964 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fac2 	bl	8000964 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e15a      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f000 fada 	bl	80029b4 <RCC_Delay>
 8002400:	e01c      	b.n	800243c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_OscConfig+0x274>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7fe faac 	bl	8000964 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	e00f      	b.n	8002430 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe faa8 	bl	8000964 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d908      	bls.n	8002430 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e140      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	42420000 	.word	0x42420000
 800242c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002430:	4b9e      	ldr	r3, [pc, #632]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e9      	bne.n	8002410 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a6 	beq.w	8002596 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b97      	ldr	r3, [pc, #604]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b94      	ldr	r3, [pc, #592]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a93      	ldr	r2, [pc, #588]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	61d3      	str	r3, [r2, #28]
 8002466:	4b91      	ldr	r3, [pc, #580]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b8e      	ldr	r3, [pc, #568]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a8a      	ldr	r2, [pc, #552]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7fe fa69 	bl	8000964 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7fe fa65 	bl	8000964 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b64      	cmp	r3, #100	; 0x64
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0fd      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b81      	ldr	r3, [pc, #516]	; (80026b0 <HAL_RCC_OscConfig+0x4f8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x312>
 80024bc:	4b7b      	ldr	r3, [pc, #492]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a7a      	ldr	r2, [pc, #488]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	e02d      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x334>
 80024d2:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a75      	ldr	r2, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b73      	ldr	r3, [pc, #460]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a72      	ldr	r2, [pc, #456]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	e01c      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0x356>
 80024f4:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a6c      	ldr	r2, [pc, #432]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a69      	ldr	r2, [pc, #420]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 800250e:	4b67      	ldr	r3, [pc, #412]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a66      	ldr	r2, [pc, #408]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6213      	str	r3, [r2, #32]
 800251a:	4b64      	ldr	r3, [pc, #400]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a63      	ldr	r2, [pc, #396]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d015      	beq.n	800255a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fe fa19 	bl	8000964 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fe fa15 	bl	8000964 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0ab      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ee      	beq.n	8002536 <HAL_RCC_OscConfig+0x37e>
 8002558:	e014      	b.n	8002584 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255a:	f7fe fa03 	bl	8000964 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe f9ff 	bl	8000964 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e095      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ee      	bne.n	8002562 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b48      	ldr	r3, [pc, #288]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a47      	ldr	r2, [pc, #284]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8081 	beq.w	80026a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a0:	4b42      	ldr	r3, [pc, #264]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d061      	beq.n	8002670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d146      	bne.n	8002642 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_RCC_OscConfig+0x4fc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fe f9d3 	bl	8000964 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe f9cf 	bl	8000964 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e067      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d108      	bne.n	80025fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	492d      	ldr	r1, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a19      	ldr	r1, [r3, #32]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	430b      	orrs	r3, r1
 800260e:	4927      	ldr	r1, [pc, #156]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x4fc>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7fe f9a3 	bl	8000964 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe f99f 	bl	8000964 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e037      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x46a>
 8002640:	e02f      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_RCC_OscConfig+0x4fc>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe f98c 	bl	8000964 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe f988 	bl	8000964 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e020      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x498>
 800266e:	e018      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e013      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	429a      	cmp	r2, r3
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40007000 	.word	0x40007000
 80026b4:	42420060 	.word	0x42420060

080026b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0d0      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d910      	bls.n	80026fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b67      	ldr	r3, [pc, #412]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	4965      	ldr	r1, [pc, #404]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b63      	ldr	r3, [pc, #396]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0b8      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002714:	4b59      	ldr	r3, [pc, #356]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a58      	ldr	r2, [pc, #352]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800271e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800272c:	4b53      	ldr	r3, [pc, #332]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002736:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	4b50      	ldr	r3, [pc, #320]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	494d      	ldr	r1, [pc, #308]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d040      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d115      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e07f      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e073      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b3d      	ldr	r3, [pc, #244]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06b      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002796:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f023 0203 	bic.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4936      	ldr	r1, [pc, #216]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a8:	f7fe f8dc 	bl	8000964 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7fe f8d8 	bl	8000964 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e053      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 020c 	and.w	r2, r3, #12
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1eb      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d210      	bcs.n	8002808 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 0207 	bic.w	r2, r3, #7
 80027ee:	4922      	ldr	r1, [pc, #136]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e032      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4916      	ldr	r1, [pc, #88]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	490e      	ldr	r1, [pc, #56]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002846:	f000 f821 	bl	800288c <HAL_RCC_GetSysClockFreq>
 800284a:	4601      	mov	r1, r0
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	5cd3      	ldrb	r3, [r2, r3]
 800285a:	fa21 f303 	lsr.w	r3, r1, r3
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1cc>)
 8002860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1d0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe f83a 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40022000 	.word	0x40022000
 800287c:	40021000 	.word	0x40021000
 8002880:	08003388 	.word	0x08003388
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	b490      	push	{r4, r7}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002894:	1d3c      	adds	r4, r7, #4
 8002896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800289c:	4b28      	ldr	r3, [pc, #160]	; (8002940 <HAL_RCC_GetSysClockFreq+0xb4>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d002      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x40>
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x46>
 80028ca:	e02d      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028cc:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028ce:	623b      	str	r3, [r7, #32]
      break;
 80028d0:	e02d      	b.n	800292e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	0c9b      	lsrs	r3, r3, #18
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028de:	4413      	add	r3, r2
 80028e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	0c5b      	lsrs	r3, r3, #17
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028fe:	4413      	add	r3, r2
 8002900:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002904:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <HAL_RCC_GetSysClockFreq+0xbc>)
 800290a:	fb02 f203 	mul.w	r2, r2, r3
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	e004      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	4a0c      	ldr	r2, [pc, #48]	; (800294c <HAL_RCC_GetSysClockFreq+0xc0>)
 800291c:	fb02 f303 	mul.w	r3, r2, r3
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	623b      	str	r3, [r7, #32]
      break;
 8002926:	e002      	b.n	800292e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <HAL_RCC_GetSysClockFreq+0xbc>)
 800292a:	623b      	str	r3, [r7, #32]
      break;
 800292c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292e:	6a3b      	ldr	r3, [r7, #32]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3728      	adds	r7, #40	; 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bc90      	pop	{r4, r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	08003360 	.word	0x08003360
 8002940:	08003370 	.word	0x08003370
 8002944:	40021000 	.word	0x40021000
 8002948:	007a1200 	.word	0x007a1200
 800294c:	003d0900 	.word	0x003d0900

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b02      	ldr	r3, [pc, #8]	; (8002960 <HAL_RCC_GetHCLKFreq+0x10>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000000 	.word	0x20000000

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002968:	f7ff fff2 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 800296c:	4601      	mov	r1, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4a03      	ldr	r2, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	08003398 	.word	0x08003398

0800298c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002990:	f7ff ffde 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002994:	4601      	mov	r1, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0adb      	lsrs	r3, r3, #11
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a2:	5cd3      	ldrb	r3, [r2, r3]
 80029a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	08003398 	.word	0x08003398

080029b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <RCC_Delay+0x34>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <RCC_Delay+0x38>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0a5b      	lsrs	r3, r3, #9
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029d0:	bf00      	nop
  }
  while (Delay --);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	60fa      	str	r2, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f9      	bne.n	80029d0 <RCC_Delay+0x1c>
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000000 	.word	0x20000000
 80029ec:	10624dd3 	.word	0x10624dd3

080029f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d07d      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a10:	4b4f      	ldr	r3, [pc, #316]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10d      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1c:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a26:	61d3      	str	r3, [r2, #28]
 8002a28:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a34:	2301      	movs	r3, #1
 8002a36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b46      	ldr	r3, [pc, #280]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d118      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a44:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a42      	ldr	r2, [pc, #264]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a50:	f7fd ff88 	bl	8000964 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	e008      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a58:	f7fd ff84 	bl	8000964 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	; 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e06d      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a76:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d02e      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d027      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a94:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa4:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aaa:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d014      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fd ff53 	bl	8000964 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fd ff4f 	bl	8000964 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e036      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ee      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4917      	ldr	r1, [pc, #92]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	490b      	ldr	r1, [pc, #44]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	4904      	ldr	r1, [pc, #16]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40007000 	.word	0x40007000
 8002b58:	42420440 	.word	0x42420440

08002b5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b08d      	sub	sp, #52	; 0x34
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b64:	4b6b      	ldr	r3, [pc, #428]	; (8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b66:	f107 040c 	add.w	r4, r7, #12
 8002b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b70:	4b69      	ldr	r3, [pc, #420]	; (8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	f200 80b6 	bhi.w	8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002b94:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002c7f 	.word	0x08002c7f
 8002ba0:	08002ce5 	.word	0x08002ce5
 8002ba4:	08002d01 	.word	0x08002d01
 8002ba8:	08002c6f 	.word	0x08002c6f
 8002bac:	08002d01 	.word	0x08002d01
 8002bb0:	08002d01 	.word	0x08002d01
 8002bb4:	08002d01 	.word	0x08002d01
 8002bb8:	08002c77 	.word	0x08002c77
 8002bbc:	08002d01 	.word	0x08002d01
 8002bc0:	08002d01 	.word	0x08002d01
 8002bc4:	08002d01 	.word	0x08002d01
 8002bc8:	08002d01 	.word	0x08002d01
 8002bcc:	08002d01 	.word	0x08002d01
 8002bd0:	08002d01 	.word	0x08002d01
 8002bd4:	08002d01 	.word	0x08002d01
 8002bd8:	08002bdd 	.word	0x08002bdd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002bdc:	4b4f      	ldr	r3, [pc, #316]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002be2:	4b4e      	ldr	r3, [pc, #312]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 808a 	beq.w	8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	0c9b      	lsrs	r3, r3, #18
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c02:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d018      	beq.n	8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c0e:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	0c5b      	lsrs	r3, r3, #17
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c2e:	4a3c      	ldr	r2, [pc, #240]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3e:	e004      	b.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	4a38      	ldr	r2, [pc, #224]	; (8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c4a:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c56:	d102      	bne.n	8002c5e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002c5c:	e052      	b.n	8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4a31      	ldr	r2, [pc, #196]	; (8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c6c:	e04a      	b.n	8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002c6e:	f7ff fe0d 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8002c72:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002c74:	e049      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002c76:	f7ff fe09 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8002c7a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002c7c:	e045      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002c7e:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c8e:	d108      	bne.n	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8002c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca0:	e01f      	b.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8002cba:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc0:	e00f      	b.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ccc:	d11c      	bne.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002cce:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d016      	beq.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8002cda:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002ce0:	e012      	b.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002ce2:	e011      	b.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002ce4:	f7ff fe52 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	0b9b      	lsrs	r3, r3, #14
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002cfe:	e004      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8002d00:	bf00      	nop
 8002d02:	e002      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002d04:	bf00      	nop
 8002d06:	e000      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002d08:	bf00      	nop
    }
  }
  return (frequency);
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3734      	adds	r7, #52	; 0x34
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}
 8002d14:	08003374 	.word	0x08003374
 8002d18:	08003384 	.word	0x08003384
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	007a1200 	.word	0x007a1200
 8002d24:	003d0900 	.word	0x003d0900
 8002d28:	aaaaaaab 	.word	0xaaaaaaab

08002d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e03f      	b.n	8002dbe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fd fcc6 	bl	80006e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fa2f 	bl	80031d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695a      	ldr	r2, [r3, #20]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d11d      	bne.n	8002e1c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_UART_Receive_DMA+0x26>
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e016      	b.n	8002e1e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Receive_DMA+0x38>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e00f      	b.n	8002e1e <HAL_UART_Receive_DMA+0x58>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f938 	bl	8003088 <UART_Start_Receive_DMA>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	e000      	b.n	8002e1e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b21      	cmp	r3, #33	; 0x21
 8002e52:	d116      	bne.n	8002e82 <HAL_UART_DMAStop+0x5c>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d013      	beq.n	8002e82 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e68:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fd77 	bl	800196a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f967 	bl	8003150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf14      	ite	ne
 8002e90:	2301      	movne	r3, #1
 8002e92:	2300      	moveq	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b22      	cmp	r3, #34	; 0x22
 8002ea2:	d116      	bne.n	8002ed2 <HAL_UART_DMAStop+0xac>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d013      	beq.n	8002ed2 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d004      	beq.n	8002ecc <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fd4f 	bl	800196a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f954 	bl	800317a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d12a      	bne.n	8002f9a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f58:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f78:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d107      	bne.n	8002f9a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0210 	bic.w	r2, r2, #16
 8002f98:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d106      	bne.n	8002fb0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7ff ffb2 	bl	8002f12 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fae:	e002      	b.n	8002fb6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7ff ff93 	bl	8002edc <HAL_UART_RxCpltCallback>
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d108      	bne.n	8002fe6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4619      	mov	r1, r3
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f7ff ff97 	bl	8002f12 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fe4:	e002      	b.n	8002fec <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7ff ff81 	bl	8002eee <HAL_UART_RxHalfCpltCallback>
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b21      	cmp	r3, #33	; 0x21
 8003026:	d108      	bne.n	800303a <UART_DMAError+0x46>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2200      	movs	r2, #0
 8003032:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003034:	68b8      	ldr	r0, [r7, #8]
 8003036:	f000 f88b 	bl	8003150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b22      	cmp	r3, #34	; 0x22
 800305a:	d108      	bne.n	800306e <UART_DMAError+0x7a>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2200      	movs	r2, #0
 8003066:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003068:	68b8      	ldr	r0, [r7, #8]
 800306a:	f000 f886 	bl	800317a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f043 0210 	orr.w	r2, r3, #16
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800307a:	68b8      	ldr	r0, [r7, #8]
 800307c:	f7ff ff40 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2222      	movs	r2, #34	; 0x22
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	4a23      	ldr	r2, [pc, #140]	; (8003144 <UART_Start_Receive_DMA+0xbc>)
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	4a22      	ldr	r2, [pc, #136]	; (8003148 <UART_Start_Receive_DMA+0xc0>)
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	4a21      	ldr	r2, [pc, #132]	; (800314c <UART_Start_Receive_DMA+0xc4>)
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	2200      	movs	r2, #0
 80030ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80030d0:	f107 0308 	add.w	r3, r7, #8
 80030d4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3304      	adds	r3, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	f7fe fbe0 	bl	80018ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003118:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0201 	orr.w	r2, r2, #1
 8003128:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003138:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	08002f29 	.word	0x08002f29
 8003148:	08002fbf 	.word	0x08002fbf
 800314c:	08002ff5 	.word	0x08002ff5

08003150 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003166:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003190:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d107      	bne.n	80031ba <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0210 	bic.w	r2, r2, #16
 80031b8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr
	...

080031d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800320e:	f023 030c 	bic.w	r3, r3, #12
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	430b      	orrs	r3, r1
 800321a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <UART_SetConfig+0x114>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d103      	bne.n	8003244 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800323c:	f7ff fba6 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	e002      	b.n	800324a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003244:	f7ff fb8e 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8003248:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <UART_SetConfig+0x118>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	0119      	lsls	r1, r3, #4
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	009a      	lsls	r2, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003280:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <UART_SetConfig+0x118>)
 8003282:	fba3 0302 	umull	r0, r3, r3, r2
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2064      	movs	r0, #100	; 0x64
 800328a:	fb00 f303 	mul.w	r3, r0, r3
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	3332      	adds	r3, #50	; 0x32
 8003294:	4a15      	ldr	r2, [pc, #84]	; (80032ec <UART_SetConfig+0x118>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a0:	4419      	add	r1, r3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009a      	lsls	r2, r3, #2
 80032ac:	441a      	add	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <UART_SetConfig+0x118>)
 80032ba:	fba3 0302 	umull	r0, r3, r3, r2
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2064      	movs	r0, #100	; 0x64
 80032c2:	fb00 f303 	mul.w	r3, r0, r3
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	3332      	adds	r3, #50	; 0x32
 80032cc:	4a07      	ldr	r2, [pc, #28]	; (80032ec <UART_SetConfig+0x118>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	440a      	add	r2, r1
 80032de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40013800 	.word	0x40013800
 80032ec:	51eb851f 	.word	0x51eb851f

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	2500      	movs	r5, #0
 80032f4:	4e0c      	ldr	r6, [pc, #48]	; (8003328 <__libc_init_array+0x38>)
 80032f6:	4c0d      	ldr	r4, [pc, #52]	; (800332c <__libc_init_array+0x3c>)
 80032f8:	1ba4      	subs	r4, r4, r6
 80032fa:	10a4      	asrs	r4, r4, #2
 80032fc:	42a5      	cmp	r5, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	f000 f822 	bl	8003348 <_init>
 8003304:	2500      	movs	r5, #0
 8003306:	4e0a      	ldr	r6, [pc, #40]	; (8003330 <__libc_init_array+0x40>)
 8003308:	4c0a      	ldr	r4, [pc, #40]	; (8003334 <__libc_init_array+0x44>)
 800330a:	1ba4      	subs	r4, r4, r6
 800330c:	10a4      	asrs	r4, r4, #2
 800330e:	42a5      	cmp	r5, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003318:	4798      	blx	r3
 800331a:	3501      	adds	r5, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003322:	4798      	blx	r3
 8003324:	3501      	adds	r5, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	080033a0 	.word	0x080033a0
 800332c:	080033a0 	.word	0x080033a0
 8003330:	080033a0 	.word	0x080033a0
 8003334:	080033a4 	.word	0x080033a4

08003338 <memset>:
 8003338:	4603      	mov	r3, r0
 800333a:	4402      	add	r2, r0
 800333c:	4293      	cmp	r3, r2
 800333e:	d100      	bne.n	8003342 <memset+0xa>
 8003340:	4770      	bx	lr
 8003342:	f803 1b01 	strb.w	r1, [r3], #1
 8003346:	e7f9      	b.n	800333c <memset+0x4>

08003348 <_init>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	bf00      	nop
 800334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334e:	bc08      	pop	{r3}
 8003350:	469e      	mov	lr, r3
 8003352:	4770      	bx	lr

08003354 <_fini>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	bf00      	nop
 8003358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335a:	bc08      	pop	{r3}
 800335c:	469e      	mov	lr, r3
 800335e:	4770      	bx	lr
