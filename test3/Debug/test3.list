
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ec  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004ad0  08004ad0  00014ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b10  08004b10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b10  08004b10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b10  08004b10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b10  08004b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  08004b24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004b24  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d18  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a7f  00000000  00000000  00028d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000888  00000000  00000000  0002a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d0  00000000  00000000  0002b058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019593  00000000  00000000  0002b828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086cd  00000000  00000000  00044dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000958bc  00000000  00000000  0004d488  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2d44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002280  00000000  00000000  000e2dc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004ab8 	.word	0x08004ab8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004ab8 	.word	0x08004ab8

08000224 <__aeabi_drsub>:
 8000224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__adddf3>
 800022a:	bf00      	nop

0800022c <__aeabi_dsub>:
 800022c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000230 <__adddf3>:
 8000230:	b530      	push	{r4, r5, lr}
 8000232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023a:	ea94 0f05 	teq	r4, r5
 800023e:	bf08      	it	eq
 8000240:	ea90 0f02 	teqeq	r0, r2
 8000244:	bf1f      	itttt	ne
 8000246:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000256:	f000 80e2 	beq.w	800041e <__adddf3+0x1ee>
 800025a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000262:	bfb8      	it	lt
 8000264:	426d      	neglt	r5, r5
 8000266:	dd0c      	ble.n	8000282 <__adddf3+0x52>
 8000268:	442c      	add	r4, r5
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	ea82 0000 	eor.w	r0, r2, r0
 8000276:	ea83 0101 	eor.w	r1, r3, r1
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	2d36      	cmp	r5, #54	; 0x36
 8000284:	bf88      	it	hi
 8000286:	bd30      	pophi	{r4, r5, pc}
 8000288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800028c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x70>
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x84>
 80002ae:	4252      	negs	r2, r2
 80002b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b4:	ea94 0f05 	teq	r4, r5
 80002b8:	f000 80a7 	beq.w	800040a <__adddf3+0x1da>
 80002bc:	f1a4 0401 	sub.w	r4, r4, #1
 80002c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c4:	db0d      	blt.n	80002e2 <__adddf3+0xb2>
 80002c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ca:	fa22 f205 	lsr.w	r2, r2, r5
 80002ce:	1880      	adds	r0, r0, r2
 80002d0:	f141 0100 	adc.w	r1, r1, #0
 80002d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d8:	1880      	adds	r0, r0, r2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	4159      	adcs	r1, r3
 80002e0:	e00e      	b.n	8000300 <__adddf3+0xd0>
 80002e2:	f1a5 0520 	sub.w	r5, r5, #32
 80002e6:	f10e 0e20 	add.w	lr, lr, #32
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f0:	bf28      	it	cs
 80002f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	18c0      	adds	r0, r0, r3
 80002fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	d507      	bpl.n	8000316 <__adddf3+0xe6>
 8000306:	f04f 0e00 	mov.w	lr, #0
 800030a:	f1dc 0c00 	rsbs	ip, ip, #0
 800030e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000312:	eb6e 0101 	sbc.w	r1, lr, r1
 8000316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031a:	d31b      	bcc.n	8000354 <__adddf3+0x124>
 800031c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000320:	d30c      	bcc.n	800033c <__adddf3+0x10c>
 8000322:	0849      	lsrs	r1, r1, #1
 8000324:	ea5f 0030 	movs.w	r0, r0, rrx
 8000328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800032c:	f104 0401 	add.w	r4, r4, #1
 8000330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000338:	f080 809a 	bcs.w	8000470 <__adddf3+0x240>
 800033c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000340:	bf08      	it	eq
 8000342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000346:	f150 0000 	adcs.w	r0, r0, #0
 800034a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034e:	ea41 0105 	orr.w	r1, r1, r5
 8000352:	bd30      	pop	{r4, r5, pc}
 8000354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000358:	4140      	adcs	r0, r0
 800035a:	eb41 0101 	adc.w	r1, r1, r1
 800035e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000362:	f1a4 0401 	sub.w	r4, r4, #1
 8000366:	d1e9      	bne.n	800033c <__adddf3+0x10c>
 8000368:	f091 0f00 	teq	r1, #0
 800036c:	bf04      	itt	eq
 800036e:	4601      	moveq	r1, r0
 8000370:	2000      	moveq	r0, #0
 8000372:	fab1 f381 	clz	r3, r1
 8000376:	bf08      	it	eq
 8000378:	3320      	addeq	r3, #32
 800037a:	f1a3 030b 	sub.w	r3, r3, #11
 800037e:	f1b3 0220 	subs.w	r2, r3, #32
 8000382:	da0c      	bge.n	800039e <__adddf3+0x16e>
 8000384:	320c      	adds	r2, #12
 8000386:	dd08      	ble.n	800039a <__adddf3+0x16a>
 8000388:	f102 0c14 	add.w	ip, r2, #20
 800038c:	f1c2 020c 	rsb	r2, r2, #12
 8000390:	fa01 f00c 	lsl.w	r0, r1, ip
 8000394:	fa21 f102 	lsr.w	r1, r1, r2
 8000398:	e00c      	b.n	80003b4 <__adddf3+0x184>
 800039a:	f102 0214 	add.w	r2, r2, #20
 800039e:	bfd8      	it	le
 80003a0:	f1c2 0c20 	rsble	ip, r2, #32
 80003a4:	fa01 f102 	lsl.w	r1, r1, r2
 80003a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ac:	bfdc      	itt	le
 80003ae:	ea41 010c 	orrle.w	r1, r1, ip
 80003b2:	4090      	lslle	r0, r2
 80003b4:	1ae4      	subs	r4, r4, r3
 80003b6:	bfa2      	ittt	ge
 80003b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003bc:	4329      	orrge	r1, r5
 80003be:	bd30      	popge	{r4, r5, pc}
 80003c0:	ea6f 0404 	mvn.w	r4, r4
 80003c4:	3c1f      	subs	r4, #31
 80003c6:	da1c      	bge.n	8000402 <__adddf3+0x1d2>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc0e      	bgt.n	80003ea <__adddf3+0x1ba>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0220 	rsb	r2, r4, #32
 80003d4:	fa20 f004 	lsr.w	r0, r0, r4
 80003d8:	fa01 f302 	lsl.w	r3, r1, r2
 80003dc:	ea40 0003 	orr.w	r0, r0, r3
 80003e0:	fa21 f304 	lsr.w	r3, r1, r4
 80003e4:	ea45 0103 	orr.w	r1, r5, r3
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f1c4 040c 	rsb	r4, r4, #12
 80003ee:	f1c4 0220 	rsb	r2, r4, #32
 80003f2:	fa20 f002 	lsr.w	r0, r0, r2
 80003f6:	fa01 f304 	lsl.w	r3, r1, r4
 80003fa:	ea40 0003 	orr.w	r0, r0, r3
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	fa21 f004 	lsr.w	r0, r1, r4
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f094 0f00 	teq	r4, #0
 800040e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000412:	bf06      	itte	eq
 8000414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000418:	3401      	addeq	r4, #1
 800041a:	3d01      	subne	r5, #1
 800041c:	e74e      	b.n	80002bc <__adddf3+0x8c>
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf18      	it	ne
 8000424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000428:	d029      	beq.n	800047e <__adddf3+0x24e>
 800042a:	ea94 0f05 	teq	r4, r5
 800042e:	bf08      	it	eq
 8000430:	ea90 0f02 	teqeq	r0, r2
 8000434:	d005      	beq.n	8000442 <__adddf3+0x212>
 8000436:	ea54 0c00 	orrs.w	ip, r4, r0
 800043a:	bf04      	itt	eq
 800043c:	4619      	moveq	r1, r3
 800043e:	4610      	moveq	r0, r2
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea91 0f03 	teq	r1, r3
 8000446:	bf1e      	ittt	ne
 8000448:	2100      	movne	r1, #0
 800044a:	2000      	movne	r0, #0
 800044c:	bd30      	popne	{r4, r5, pc}
 800044e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000452:	d105      	bne.n	8000460 <__adddf3+0x230>
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	4149      	adcs	r1, r1
 8000458:	bf28      	it	cs
 800045a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000464:	bf3c      	itt	cc
 8000466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046a:	bd30      	popcc	{r4, r5, pc}
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf1a      	itte	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4610      	movne	r0, r2
 8000488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800048c:	bf1c      	itt	ne
 800048e:	460b      	movne	r3, r1
 8000490:	4602      	movne	r2, r0
 8000492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000496:	bf06      	itte	eq
 8000498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800049c:	ea91 0f03 	teqeq	r1, r3
 80004a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	bf00      	nop

080004a8 <__aeabi_ui2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f04f 0500 	mov.w	r5, #0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e750      	b.n	8000368 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e0:	bf48      	it	mi
 80004e2:	4240      	negmi	r0, r0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e73e      	b.n	8000368 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_f2d>:
 80004ec:	0042      	lsls	r2, r0, #1
 80004ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fa:	bf1f      	itttt	ne
 80004fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000508:	4770      	bxne	lr
 800050a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050e:	bf08      	it	eq
 8000510:	4770      	bxeq	lr
 8000512:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000516:	bf04      	itt	eq
 8000518:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e71c      	b.n	8000368 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aed8 	beq.w	8000316 <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6bd      	b.n	8000316 <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_dmul>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005aa:	bf1d      	ittte	ne
 80005ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b0:	ea94 0f0c 	teqne	r4, ip
 80005b4:	ea95 0f0c 	teqne	r5, ip
 80005b8:	f000 f8de 	bleq	8000778 <__aeabi_dmul+0x1dc>
 80005bc:	442c      	add	r4, r5
 80005be:	ea81 0603 	eor.w	r6, r1, r3
 80005c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ce:	bf18      	it	ne
 80005d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005dc:	d038      	beq.n	8000650 <__aeabi_dmul+0xb4>
 80005de:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e2:	f04f 0500 	mov.w	r5, #0
 80005e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f2:	f04f 0600 	mov.w	r6, #0
 80005f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fa:	f09c 0f00 	teq	ip, #0
 80005fe:	bf18      	it	ne
 8000600:	f04e 0e01 	orrne.w	lr, lr, #1
 8000604:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800060c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000610:	d204      	bcs.n	800061c <__aeabi_dmul+0x80>
 8000612:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000616:	416d      	adcs	r5, r5
 8000618:	eb46 0606 	adc.w	r6, r6, r6
 800061c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000620:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000624:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000628:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800062c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000630:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000634:	bf88      	it	hi
 8000636:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063a:	d81e      	bhi.n	800067a <__aeabi_dmul+0xde>
 800063c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000654:	ea46 0101 	orr.w	r1, r6, r1
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	ea81 0103 	eor.w	r1, r1, r3
 8000660:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000664:	bfc2      	ittt	gt
 8000666:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066e:	bd70      	popgt	{r4, r5, r6, pc}
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f04f 0e00 	mov.w	lr, #0
 8000678:	3c01      	subs	r4, #1
 800067a:	f300 80ab 	bgt.w	80007d4 <__aeabi_dmul+0x238>
 800067e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000682:	bfde      	ittt	le
 8000684:	2000      	movle	r0, #0
 8000686:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd70      	pople	{r4, r5, r6, pc}
 800068c:	f1c4 0400 	rsb	r4, r4, #0
 8000690:	3c20      	subs	r4, #32
 8000692:	da35      	bge.n	8000700 <__aeabi_dmul+0x164>
 8000694:	340c      	adds	r4, #12
 8000696:	dc1b      	bgt.n	80006d0 <__aeabi_dmul+0x134>
 8000698:	f104 0414 	add.w	r4, r4, #20
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f305 	lsl.w	r3, r0, r5
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	fa21 f604 	lsr.w	r6, r1, r4
 80006c0:	eb42 0106 	adc.w	r1, r2, r6
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 040c 	rsb	r4, r4, #12
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f304 	lsl.w	r3, r0, r4
 80006dc:	fa20 f005 	lsr.w	r0, r0, r5
 80006e0:	fa01 f204 	lsl.w	r2, r1, r4
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f0:	f141 0100 	adc.w	r1, r1, #0
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f205 	lsl.w	r2, r0, r5
 8000708:	ea4e 0e02 	orr.w	lr, lr, r2
 800070c:	fa20 f304 	lsr.w	r3, r0, r4
 8000710:	fa01 f205 	lsl.w	r2, r1, r5
 8000714:	ea43 0302 	orr.w	r3, r3, r2
 8000718:	fa21 f004 	lsr.w	r0, r1, r4
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	fa21 f204 	lsr.w	r2, r1, r4
 8000724:	ea20 0002 	bic.w	r0, r0, r2
 8000728:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000730:	bf08      	it	eq
 8000732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f094 0f00 	teq	r4, #0
 800073c:	d10f      	bne.n	800075e <__aeabi_dmul+0x1c2>
 800073e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000742:	0040      	lsls	r0, r0, #1
 8000744:	eb41 0101 	adc.w	r1, r1, r1
 8000748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3c01      	subeq	r4, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1a6>
 8000752:	ea41 0106 	orr.w	r1, r1, r6
 8000756:	f095 0f00 	teq	r5, #0
 800075a:	bf18      	it	ne
 800075c:	4770      	bxne	lr
 800075e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	eb43 0303 	adc.w	r3, r3, r3
 8000768:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3d01      	subeq	r5, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1c6>
 8000772:	ea43 0306 	orr.w	r3, r3, r6
 8000776:	4770      	bx	lr
 8000778:	ea94 0f0c 	teq	r4, ip
 800077c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000780:	bf18      	it	ne
 8000782:	ea95 0f0c 	teqne	r5, ip
 8000786:	d00c      	beq.n	80007a2 <__aeabi_dmul+0x206>
 8000788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078c:	bf18      	it	ne
 800078e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000792:	d1d1      	bne.n	8000738 <__aeabi_dmul+0x19c>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a6:	bf06      	itte	eq
 80007a8:	4610      	moveq	r0, r2
 80007aa:	4619      	moveq	r1, r3
 80007ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b0:	d019      	beq.n	80007e6 <__aeabi_dmul+0x24a>
 80007b2:	ea94 0f0c 	teq	r4, ip
 80007b6:	d102      	bne.n	80007be <__aeabi_dmul+0x222>
 80007b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007bc:	d113      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007be:	ea95 0f0c 	teq	r5, ip
 80007c2:	d105      	bne.n	80007d0 <__aeabi_dmul+0x234>
 80007c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c8:	bf1c      	itt	ne
 80007ca:	4610      	movne	r0, r2
 80007cc:	4619      	movne	r1, r3
 80007ce:	d10a      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ee:	bd70      	pop	{r4, r5, r6, pc}

080007f0 <__aeabi_ddiv>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fe:	bf1d      	ittte	ne
 8000800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000804:	ea94 0f0c 	teqne	r4, ip
 8000808:	ea95 0f0c 	teqne	r5, ip
 800080c:	f000 f8a7 	bleq	800095e <__aeabi_ddiv+0x16e>
 8000810:	eba4 0405 	sub.w	r4, r4, r5
 8000814:	ea81 0e03 	eor.w	lr, r1, r3
 8000818:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800081c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000820:	f000 8088 	beq.w	8000934 <__aeabi_ddiv+0x144>
 8000824:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000828:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800082c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000834:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000838:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800083c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000840:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000844:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000848:	429d      	cmp	r5, r3
 800084a:	bf08      	it	eq
 800084c:	4296      	cmpeq	r6, r2
 800084e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000852:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000856:	d202      	bcs.n	800085e <__aeabi_ddiv+0x6e>
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	1ab6      	subs	r6, r6, r2
 8000860:	eb65 0503 	sbc.w	r5, r5, r3
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 000c 	orrcs.w	r0, r0, ip
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008cc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d0:	d018      	beq.n	8000904 <__aeabi_ddiv+0x114>
 80008d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008da:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ee:	d1c0      	bne.n	8000872 <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	d10b      	bne.n	800090e <__aeabi_ddiv+0x11e>
 80008f6:	ea41 0100 	orr.w	r1, r1, r0
 80008fa:	f04f 0000 	mov.w	r0, #0
 80008fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000902:	e7b6      	b.n	8000872 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	bf04      	itt	eq
 800090a:	4301      	orreq	r1, r0
 800090c:	2000      	moveq	r0, #0
 800090e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000912:	bf88      	it	hi
 8000914:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000918:	f63f aeaf 	bhi.w	800067a <__aeabi_dmul+0xde>
 800091c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000920:	bf04      	itt	eq
 8000922:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092a:	f150 0000 	adcs.w	r0, r0, #0
 800092e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000938:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800093c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000940:	bfc2      	ittt	gt
 8000942:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094a:	bd70      	popgt	{r4, r5, r6, pc}
 800094c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000950:	f04f 0e00 	mov.w	lr, #0
 8000954:	3c01      	subs	r4, #1
 8000956:	e690      	b.n	800067a <__aeabi_dmul+0xde>
 8000958:	ea45 0e06 	orr.w	lr, r5, r6
 800095c:	e68d      	b.n	800067a <__aeabi_dmul+0xde>
 800095e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000962:	ea94 0f0c 	teq	r4, ip
 8000966:	bf08      	it	eq
 8000968:	ea95 0f0c 	teqeq	r5, ip
 800096c:	f43f af3b 	beq.w	80007e6 <__aeabi_dmul+0x24a>
 8000970:	ea94 0f0c 	teq	r4, ip
 8000974:	d10a      	bne.n	800098c <__aeabi_ddiv+0x19c>
 8000976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097a:	f47f af34 	bne.w	80007e6 <__aeabi_dmul+0x24a>
 800097e:	ea95 0f0c 	teq	r5, ip
 8000982:	f47f af25 	bne.w	80007d0 <__aeabi_dmul+0x234>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e72c      	b.n	80007e6 <__aeabi_dmul+0x24a>
 800098c:	ea95 0f0c 	teq	r5, ip
 8000990:	d106      	bne.n	80009a0 <__aeabi_ddiv+0x1b0>
 8000992:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000996:	f43f aefd 	beq.w	8000794 <__aeabi_dmul+0x1f8>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e722      	b.n	80007e6 <__aeabi_dmul+0x24a>
 80009a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009aa:	f47f aec5 	bne.w	8000738 <__aeabi_dmul+0x19c>
 80009ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b2:	f47f af0d 	bne.w	80007d0 <__aeabi_dmul+0x234>
 80009b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ba:	f47f aeeb 	bne.w	8000794 <__aeabi_dmul+0x1f8>
 80009be:	e712      	b.n	80007e6 <__aeabi_dmul+0x24a>

080009c0 <__aeabi_d2uiz>:
 80009c0:	004a      	lsls	r2, r1, #1
 80009c2:	d211      	bcs.n	80009e8 <__aeabi_d2uiz+0x28>
 80009c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c8:	d211      	bcs.n	80009ee <__aeabi_d2uiz+0x2e>
 80009ca:	d50d      	bpl.n	80009e8 <__aeabi_d2uiz+0x28>
 80009cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d4:	d40e      	bmi.n	80009f4 <__aeabi_d2uiz+0x34>
 80009d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f2:	d102      	bne.n	80009fa <__aeabi_d2uiz+0x3a>
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	4770      	bx	lr
 80009fa:	f04f 0000 	mov.w	r0, #0
 80009fe:	4770      	bx	lr

08000a00 <__aeabi_d2f>:
 8000a00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a08:	bf24      	itt	cs
 8000a0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a12:	d90d      	bls.n	8000a30 <__aeabi_d2f+0x30>
 8000a14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a28:	bf08      	it	eq
 8000a2a:	f020 0001 	biceq.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a34:	d121      	bne.n	8000a7a <__aeabi_d2f+0x7a>
 8000a36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3a:	bfbc      	itt	lt
 8000a3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	4770      	bxlt	lr
 8000a42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4a:	f1c2 0218 	rsb	r2, r2, #24
 8000a4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a56:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	f040 0001 	orrne.w	r0, r0, #1
 8000a60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a6c:	ea40 000c 	orr.w	r0, r0, ip
 8000a70:	fa23 f302 	lsr.w	r3, r3, r2
 8000a74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a78:	e7cc      	b.n	8000a14 <__aeabi_d2f+0x14>
 8000a7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7e:	d107      	bne.n	8000a90 <__aeabi_d2f+0x90>
 8000a80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a84:	bf1e      	ittt	ne
 8000a86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8e:	4770      	bxne	lr
 8000a90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <HAL_UART_RxCpltCallback>:
	AD_RES[1] = HAL_ADC_GetValue(&hadc1);
	if(AD_RES[1]<100) flag_1=1;

}*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	chenge_Data = 1;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_UART_RxCpltCallback+0x18>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20000030 	.word	0x20000030

08000abc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ac2:	f000 fe6f 	bl	80017a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ac6:	f000 f907 	bl	8000cd8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//ADC_ChannelConfTypeDef sConfig = {0};
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000aca:	f000 f9ff 	bl	8000ecc <MX_GPIO_Init>
	MX_DMA_Init();
 8000ace:	f000 f9d7 	bl	8000e80 <MX_DMA_Init>
	MX_ADC1_Init();
 8000ad2:	f000 f95f 	bl	8000d94 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000ad6:	f000 f9a9 	bl	8000e2c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000ada:	486d      	ldr	r0, [pc, #436]	; (8000c90 <main+0x1d4>)
 8000adc:	f001 fc46 	bl	800236c <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, AD_RES, 2);
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	496c      	ldr	r1, [pc, #432]	; (8000c94 <main+0x1d8>)
 8000ae4:	486a      	ldr	r0, [pc, #424]	; (8000c90 <main+0x1d4>)
 8000ae6:	f001 f881 	bl	8001bec <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 8000aea:	4869      	ldr	r0, [pc, #420]	; (8000c90 <main+0x1d4>)
 8000aec:	f000 ffc8 	bl	8001a80 <HAL_ADC_Start_IT>


	HAL_UART_Receive_DMA(&huart1, setting, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	4969      	ldr	r1, [pc, #420]	; (8000c98 <main+0x1dc>)
 8000af4:	4869      	ldr	r0, [pc, #420]	; (8000c9c <main+0x1e0>)
 8000af6:	f003 fa08 	bl	8003f0a <HAL_UART_Receive_DMA>

	while(setting[0] == 0);
 8000afa:	bf00      	nop
 8000afc:	4b66      	ldr	r3, [pc, #408]	; (8000c98 <main+0x1dc>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0fb      	beq.n	8000afc <main+0x40>

	int numberofmotor = setting[0];
 8000b04:	4b64      	ldr	r3, [pc, #400]	; (8000c98 <main+0x1dc>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	607b      	str	r3, [r7, #4]

	numberofarray = 5*numberofmotor+2;
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	3302      	adds	r3, #2
 8000b14:	4a62      	ldr	r2, [pc, #392]	; (8000ca0 <main+0x1e4>)
 8000b16:	6013      	str	r3, [r2, #0]

	HAL_UART_DMAStop(&huart1);
 8000b18:	4860      	ldr	r0, [pc, #384]	; (8000c9c <main+0x1e0>)
 8000b1a:	f003 fa26 	bl	8003f6a <HAL_UART_DMAStop>

	chenge_Data = 0;
 8000b1e:	4b61      	ldr	r3, [pc, #388]	; (8000ca4 <main+0x1e8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart1, buffer, numberofarray);
 8000b24:	4b5e      	ldr	r3, [pc, #376]	; (8000ca0 <main+0x1e4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	495e      	ldr	r1, [pc, #376]	; (8000ca8 <main+0x1ec>)
 8000b2e:	485b      	ldr	r0, [pc, #364]	; (8000c9c <main+0x1e0>)
 8000b30:	f003 f9eb 	bl	8003f0a <HAL_UART_Receive_DMA>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_ADC_Start_IT(&hadc1);
 8000b34:	4856      	ldr	r0, [pc, #344]	; (8000c90 <main+0x1d4>)
 8000b36:	f000 ffa3 	bl	8001a80 <HAL_ADC_Start_IT>
		if(chenge_Data == 1 && buffer[0] ==0x03)
 8000b3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ca4 <main+0x1e8>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	f040 808d 	bne.w	8000c5e <main+0x1a2>
 8000b44:	4b58      	ldr	r3, [pc, #352]	; (8000ca8 <main+0x1ec>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	f040 8088 	bne.w	8000c5e <main+0x1a2>
		{
			//get Direction of Rotation
			uint8_t MSB_1 = buffer[5*n+2] & 0xF0;
 8000b4e:	4b56      	ldr	r3, [pc, #344]	; (8000ca8 <main+0x1ec>)
 8000b50:	789b      	ldrb	r3, [r3, #2]
 8000b52:	f023 030f 	bic.w	r3, r3, #15
 8000b56:	70fb      	strb	r3, [r7, #3]
			//4 bit shift to right
			Direction_1 = MSB_1>>4;
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b53      	ldr	r3, [pc, #332]	; (8000cac <main+0x1f0>)
 8000b60:	701a      	strb	r2, [r3, #0]

			//get Direction of Rotation
			uint8_t MSB_2 = buffer[5*n+4] & 0xF0;
 8000b62:	4b51      	ldr	r3, [pc, #324]	; (8000ca8 <main+0x1ec>)
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	f023 030f 	bic.w	r3, r3, #15
 8000b6a:	70bb      	strb	r3, [r7, #2]
			//4 bit shift to right
			Direction_2 = MSB_2>>4;
 8000b6c:	78bb      	ldrb	r3, [r7, #2]
 8000b6e:	091b      	lsrs	r3, r3, #4
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b4f      	ldr	r3, [pc, #316]	; (8000cb0 <main+0x1f4>)
 8000b74:	701a      	strb	r2, [r3, #0]

			//get 4bit of degree in binary
			uint8_t LSB_1 = buffer[5*n+2] & 0x0F;
 8000b76:	4b4c      	ldr	r3, [pc, #304]	; (8000ca8 <main+0x1ec>)
 8000b78:	789b      	ldrb	r3, [r3, #2]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	707b      	strb	r3, [r7, #1]
			//calculate degree in 2 byte
			degree_1 = LSB_1<<8 | buffer[5*n+3];
 8000b80:	787b      	ldrb	r3, [r7, #1]
 8000b82:	021b      	lsls	r3, r3, #8
 8000b84:	b21a      	sxth	r2, r3
 8000b86:	4b48      	ldr	r3, [pc, #288]	; (8000ca8 <main+0x1ec>)
 8000b88:	78db      	ldrb	r3, [r3, #3]
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	4b48      	ldr	r3, [pc, #288]	; (8000cb4 <main+0x1f8>)
 8000b94:	801a      	strh	r2, [r3, #0]
			//calculate steps
			step_1 = degree_1 /0.703125 ;
 8000b96:	4b47      	ldr	r3, [pc, #284]	; (8000cb4 <main+0x1f8>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fc94 	bl	80004c8 <__aeabi_i2d>
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	4b44      	ldr	r3, [pc, #272]	; (8000cb8 <main+0x1fc>)
 8000ba6:	f7ff fe23 	bl	80007f0 <__aeabi_ddiv>
 8000baa:	4603      	mov	r3, r0
 8000bac:	460c      	mov	r4, r1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	4621      	mov	r1, r4
 8000bb2:	f7ff ff25 	bl	8000a00 <__aeabi_d2f>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	4b40      	ldr	r3, [pc, #256]	; (8000cbc <main+0x200>)
 8000bba:	601a      	str	r2, [r3, #0]
			round_step_1 = round(step_1);
 8000bbc:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <main+0x200>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fc93 	bl	80004ec <__aeabi_f2d>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460c      	mov	r4, r1
 8000bca:	4618      	mov	r0, r3
 8000bcc:	4621      	mov	r1, r4
 8000bce:	f003 ff2d 	bl	8004a2c <round>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460c      	mov	r4, r1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	4621      	mov	r1, r4
 8000bda:	f7ff fef1 	bl	80009c0 <__aeabi_d2uiz>
 8000bde:	4602      	mov	r2, r0
 8000be0:	4b37      	ldr	r3, [pc, #220]	; (8000cc0 <main+0x204>)
 8000be2:	601a      	str	r2, [r3, #0]

			//get 4bit of degree in binary
			uint8_t LSB_2 = buffer[5*n+4] & 0x0F;
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <main+0x1ec>)
 8000be6:	791b      	ldrb	r3, [r3, #4]
 8000be8:	f003 030f 	and.w	r3, r3, #15
 8000bec:	703b      	strb	r3, [r7, #0]
			//calculate degree in 2 byte
			degree_2 = LSB_2<<8 | buffer[5*n+5];
 8000bee:	783b      	ldrb	r3, [r7, #0]
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <main+0x1ec>)
 8000bf6:	795b      	ldrb	r3, [r3, #5]
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <main+0x208>)
 8000c02:	801a      	strh	r2, [r3, #0]
			//calculate steps
			step_2 = degree_2 /0.703125 ;
 8000c04:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <main+0x208>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fc5d 	bl	80004c8 <__aeabi_i2d>
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <main+0x1fc>)
 8000c14:	f7ff fdec 	bl	80007f0 <__aeabi_ddiv>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	460c      	mov	r4, r1
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	4621      	mov	r1, r4
 8000c20:	f7ff feee 	bl	8000a00 <__aeabi_d2f>
 8000c24:	4602      	mov	r2, r0
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <main+0x20c>)
 8000c28:	601a      	str	r2, [r3, #0]
			round_step_2 = round(step_2);
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <main+0x20c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fc5c 	bl	80004ec <__aeabi_f2d>
 8000c34:	4603      	mov	r3, r0
 8000c36:	460c      	mov	r4, r1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	4621      	mov	r1, r4
 8000c3c:	f003 fef6 	bl	8004a2c <round>
 8000c40:	4603      	mov	r3, r0
 8000c42:	460c      	mov	r4, r1
 8000c44:	4618      	mov	r0, r3
 8000c46:	4621      	mov	r1, r4
 8000c48:	f7ff feba 	bl	80009c0 <__aeabi_d2uiz>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <main+0x210>)
 8000c50:	601a      	str	r2, [r3, #0]

			end = 0;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <main+0x214>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
			chenge_Data = 0;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <main+0x1e8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]



		//		job

		switch(buffer[0])
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <main+0x1ec>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d007      	beq.n	8000c76 <main+0x1ba>
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d007      	beq.n	8000c7a <main+0x1be>
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d10f      	bne.n	8000c8e <main+0x1d2>
		{
			case 0x01 :
				id = buffer[5*n+1];
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <main+0x1ec>)
 8000c70:	785a      	ldrb	r2, [r3, #1]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <main+0x218>)
 8000c74:	701a      	strb	r2, [r3, #0]
			case 0x02 :
				start_stepper();
 8000c76:	f000 f98f 	bl	8000f98 <start_stepper>
			case 0x03 :
				motors(Direction_1,round_step_1,Direction_2	,round_step_2);
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <main+0x1f0>)
 8000c7c:	7818      	ldrb	r0, [r3, #0]
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <main+0x204>)
 8000c80:	6819      	ldr	r1, [r3, #0]
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <main+0x1f4>)
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <main+0x210>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f000 f9e1 	bl	8001050 <motors>
		HAL_ADC_Start_IT(&hadc1);
 8000c8e:	e751      	b.n	8000b34 <main+0x78>
 8000c90:	2000007c 	.word	0x2000007c
 8000c94:	20000060 	.word	0x20000060
 8000c98:	20000034 	.word	0x20000034
 8000c9c:	200000f0 	.word	0x200000f0
 8000ca0:	20000058 	.word	0x20000058
 8000ca4:	20000030 	.word	0x20000030
 8000ca8:	20000038 	.word	0x20000038
 8000cac:	2000017c 	.word	0x2000017c
 8000cb0:	20000078 	.word	0x20000078
 8000cb4:	20000068 	.word	0x20000068
 8000cb8:	3fe68000 	.word	0x3fe68000
 8000cbc:	2000006c 	.word	0x2000006c
 8000cc0:	20000188 	.word	0x20000188
 8000cc4:	20000184 	.word	0x20000184
 8000cc8:	20000074 	.word	0x20000074
 8000ccc:	20000180 	.word	0x20000180
 8000cd0:	20000031 	.word	0x20000031
 8000cd4:	20000056 	.word	0x20000056

08000cd8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b096      	sub	sp, #88	; 0x58
 8000cdc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ce2:	2228      	movs	r2, #40	; 0x28
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 fe98 	bl	8004a1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d26:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d28:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d2c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 fae2 	bl	80032fc <HAL_RCC_OscConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 8000d3e:	f000 f927 	bl	8000f90 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d42:	230f      	movs	r3, #15
 8000d44:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d46:	2302      	movs	r3, #2
 8000d48:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fd4c 	bl	80037fc <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000d6a:	f000 f911 	bl	8000f90 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d76:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 feda 	bl	8003b34 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8000d86:	f000 f903 	bl	8000f90 <Error_Handler>
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	3758      	adds	r7, #88	; 0x58
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_ADC1_Init+0x90>)
 8000da6:	4a20      	ldr	r2, [pc, #128]	; (8000e28 <MX_ADC1_Init+0x94>)
 8000da8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_ADC1_Init+0x90>)
 8000dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <MX_ADC1_Init+0x90>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_ADC1_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <MX_ADC1_Init+0x90>)
 8000dc0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dc4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_ADC1_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_ADC1_Init+0x90>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <MX_ADC1_Init+0x90>)
 8000dd4:	f000 fd6a 	bl	80018ac <HAL_ADC_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 8000dde:	f000 f8d7 	bl	8000f90 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000dea:	2305      	movs	r3, #5
 8000dec:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <MX_ADC1_Init+0x90>)
 8000df4:	f001 f8c0 	bl	8001f78 <HAL_ADC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8000dfe:	f000 f8c7 	bl	8000f90 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <MX_ADC1_Init+0x90>)
 8000e0c:	f001 f8b4 	bl	8001f78 <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC1_Init+0x86>
	{
		Error_Handler();
 8000e16:	f000 f8bb 	bl	8000f90 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000007c 	.word	0x2000007c
 8000e28:	40012400 	.word	0x40012400

08000e2c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e34:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e64:	f003 f804 	bl	8003e70 <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000e6e:	f000 f88f 	bl	8000f90 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200000f0 	.word	0x200000f0
 8000e7c:	40013800 	.word	0x40013800

08000e80 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_DMA_Init+0x48>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <MX_DMA_Init+0x48>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_DMA_Init+0x48>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	200b      	movs	r0, #11
 8000ea4:	f001 fbef 	bl	8002686 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ea8:	200b      	movs	r0, #11
 8000eaa:	f001 fc08 	bl	80026be <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f001 fbe7 	bl	8002686 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000eb8:	200f      	movs	r0, #15
 8000eba:	f001 fc00 	bl	80026be <HAL_NVIC_EnableIRQ>

}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <MX_GPIO_Init+0xb8>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a27      	ldr	r2, [pc, #156]	; (8000f84 <MX_GPIO_Init+0xb8>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <MX_GPIO_Init+0xb8>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <MX_GPIO_Init+0xb8>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <MX_GPIO_Init+0xb8>)
 8000efe:	f043 0308 	orr.w	r3, r3, #8
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <MX_GPIO_Init+0xb8>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0308 	and.w	r3, r3, #8
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <MX_GPIO_Init+0xb8>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <MX_GPIO_Init+0xb8>)
 8000f16:	f043 0320 	orr.w	r3, r3, #32
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_GPIO_Init+0xb8>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0320 	and.w	r3, r3, #32
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f2e:	4816      	ldr	r0, [pc, #88]	; (8000f88 <MX_GPIO_Init+0xbc>)
 8000f30:	f002 f9cc 	bl	80032cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f3a:	4814      	ldr	r0, [pc, #80]	; (8000f8c <MX_GPIO_Init+0xc0>)
 8000f3c:	f002 f9c6 	bl	80032cc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f40:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f44:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <MX_GPIO_Init+0xbc>)
 8000f5a:	f002 f84d 	bl	8002ff8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f5e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_GPIO_Init+0xc0>)
 8000f78:	f002 f83e 	bl	8002ff8 <HAL_GPIO_Init>

}
 8000f7c:	bf00      	nop
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010c00 	.word	0x40010c00
 8000f8c:	40011400 	.word	0x40011400

08000f90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f96:	e7fe      	b.n	8000f96 <Error_Handler+0x6>

08000f98 <start_stepper>:
uint32_t i=0;
extern uint8_t chenge_Data;
extern uint8_t end;

void start_stepper(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	if(AD_RES[0] <100)
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <start_stepper+0xa4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b63      	cmp	r3, #99	; 0x63
 8000fa2:	d802      	bhi.n	8000faa <start_stepper+0x12>
	{
		flag = 1;
 8000fa4:	4b26      	ldr	r3, [pc, #152]	; (8001040 <start_stepper+0xa8>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
	}
	if(AD_RES[1] <100)
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <start_stepper+0xa4>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b63      	cmp	r3, #99	; 0x63
 8000fb0:	d802      	bhi.n	8000fb8 <start_stepper+0x20>
	{
		flag_1 = 1;
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <start_stepper+0xac>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
	}

	if(flag == 0)
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <start_stepper+0xa8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d11b      	bne.n	8000ff8 <start_stepper+0x60>
	{
		GPIOD->ODR = 0xC000;
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <start_stepper+0xb0>)
 8000fc2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000fc6:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f000 fc4d 	bl	8001868 <HAL_Delay>
		GPIOD->ODR = 0x6000;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <start_stepper+0xb0>)
 8000fd0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000fd4:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f000 fc46 	bl	8001868 <HAL_Delay>
		GPIOD->ODR = 0x3000;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <start_stepper+0xb0>)
 8000fde:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000fe2:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 fc3f 	bl	8001868 <HAL_Delay>
		GPIOD->ODR = 0x9000;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <start_stepper+0xb0>)
 8000fec:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8000ff0:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f000 fc38 	bl	8001868 <HAL_Delay>
	}
	if(flag_1 == 0)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <start_stepper+0xac>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d11b      	bne.n	8001038 <start_stepper+0xa0>
	{
		GPIOB->ODR = 0xC000;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <start_stepper+0xb4>)
 8001002:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001006:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f000 fc2d 	bl	8001868 <HAL_Delay>
		GPIOB->ODR = 0x6000;
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <start_stepper+0xb4>)
 8001010:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001014:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8001016:	2001      	movs	r0, #1
 8001018:	f000 fc26 	bl	8001868 <HAL_Delay>
		GPIOB->ODR = 0x3000;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <start_stepper+0xb4>)
 800101e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001022:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f000 fc1f 	bl	8001868 <HAL_Delay>
		GPIOB->ODR = 0x9000;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <start_stepper+0xb4>)
 800102c:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001030:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f000 fc18 	bl	8001868 <HAL_Delay>
	}
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000060 	.word	0x20000060
 8001040:	20000028 	.word	0x20000028
 8001044:	2000002c 	.word	0x2000002c
 8001048:	40011400 	.word	0x40011400
 800104c:	40010c00 	.word	0x40010c00

08001050 <motors>:

}


void motors(uint8_t Direction_1, uint32_t step_1 ,uint8_t Direction_2, uint32_t step_2)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	4613      	mov	r3, r2
 8001060:	73bb      	strb	r3, [r7, #14]
	for(i=0;i<512;i++)
 8001062:	4bae      	ldr	r3, [pc, #696]	; (800131c <motors+0x2cc>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	e1e9      	b.n	800143e <motors+0x3ee>
	{
		if(chenge_Data == 1)
 800106a:	4bad      	ldr	r3, [pc, #692]	; (8001320 <motors+0x2d0>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	f000 81ec 	beq.w	800144c <motors+0x3fc>
		{
			break;
		}
		if(end == 1)
 8001074:	4bab      	ldr	r3, [pc, #684]	; (8001324 <motors+0x2d4>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	f000 81e9 	beq.w	8001450 <motors+0x400>
		{
			break;
		}
		if(Direction_1==0 && i<step_1 && Direction_2==0 && i<step_2)
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d145      	bne.n	8001110 <motors+0xc0>
 8001084:	4ba5      	ldr	r3, [pc, #660]	; (800131c <motors+0x2cc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	429a      	cmp	r2, r3
 800108c:	d940      	bls.n	8001110 <motors+0xc0>
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d13d      	bne.n	8001110 <motors+0xc0>
 8001094:	4ba1      	ldr	r3, [pc, #644]	; (800131c <motors+0x2cc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	d938      	bls.n	8001110 <motors+0xc0>
		{
			GPIOD->ODR = 0xC000;
 800109e:	4ba2      	ldr	r3, [pc, #648]	; (8001328 <motors+0x2d8>)
 80010a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80010a4:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f000 fbde 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0xC000;
 80010ac:	4b9f      	ldr	r3, [pc, #636]	; (800132c <motors+0x2dc>)
 80010ae:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80010b2:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f000 fbd7 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x6000;
 80010ba:	4b9b      	ldr	r3, [pc, #620]	; (8001328 <motors+0x2d8>)
 80010bc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80010c0:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 fbd0 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x6000;
 80010c8:	4b98      	ldr	r3, [pc, #608]	; (800132c <motors+0x2dc>)
 80010ca:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80010ce:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f000 fbc9 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x3000;
 80010d6:	4b94      	ldr	r3, [pc, #592]	; (8001328 <motors+0x2d8>)
 80010d8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80010dc:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f000 fbc2 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x3000;
 80010e4:	4b91      	ldr	r3, [pc, #580]	; (800132c <motors+0x2dc>)
 80010e6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80010ea:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f000 fbbb 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x9000;
 80010f2:	4b8d      	ldr	r3, [pc, #564]	; (8001328 <motors+0x2d8>)
 80010f4:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80010f8:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f000 fbb4 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x9000;
 8001100:	4b8a      	ldr	r3, [pc, #552]	; (800132c <motors+0x2dc>)
 8001102:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001106:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001108:	2001      	movs	r0, #1
 800110a:	f000 fbad 	bl	8001868 <HAL_Delay>
 800110e:	e191      	b.n	8001434 <motors+0x3e4>
		}
		else if(Direction_1==0 && i<step_1 && Direction_2==1 && i<step_2)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d145      	bne.n	80011a2 <motors+0x152>
 8001116:	4b81      	ldr	r3, [pc, #516]	; (800131c <motors+0x2cc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	429a      	cmp	r2, r3
 800111e:	d940      	bls.n	80011a2 <motors+0x152>
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d13d      	bne.n	80011a2 <motors+0x152>
 8001126:	4b7d      	ldr	r3, [pc, #500]	; (800131c <motors+0x2cc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d938      	bls.n	80011a2 <motors+0x152>
		{
			GPIOD->ODR = 0xC000;
 8001130:	4b7d      	ldr	r3, [pc, #500]	; (8001328 <motors+0x2d8>)
 8001132:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001136:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f000 fb95 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x9000;
 800113e:	4b7b      	ldr	r3, [pc, #492]	; (800132c <motors+0x2dc>)
 8001140:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001144:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f000 fb8e 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x6000;
 800114c:	4b76      	ldr	r3, [pc, #472]	; (8001328 <motors+0x2d8>)
 800114e:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001152:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001154:	2001      	movs	r0, #1
 8001156:	f000 fb87 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x3000;
 800115a:	4b74      	ldr	r3, [pc, #464]	; (800132c <motors+0x2dc>)
 800115c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001160:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001162:	2001      	movs	r0, #1
 8001164:	f000 fb80 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x3000;
 8001168:	4b6f      	ldr	r3, [pc, #444]	; (8001328 <motors+0x2d8>)
 800116a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800116e:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f000 fb79 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x6000;
 8001176:	4b6d      	ldr	r3, [pc, #436]	; (800132c <motors+0x2dc>)
 8001178:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800117c:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fb72 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x9000;
 8001184:	4b68      	ldr	r3, [pc, #416]	; (8001328 <motors+0x2d8>)
 8001186:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800118a:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f000 fb6b 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0xC000;
 8001192:	4b66      	ldr	r3, [pc, #408]	; (800132c <motors+0x2dc>)
 8001194:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001198:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 fb64 	bl	8001868 <HAL_Delay>
 80011a0:	e148      	b.n	8001434 <motors+0x3e4>
		}
		else if(Direction_1==0 && i<step_1 && i>=step_2)
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d126      	bne.n	80011f6 <motors+0x1a6>
 80011a8:	4b5c      	ldr	r3, [pc, #368]	; (800131c <motors+0x2cc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d921      	bls.n	80011f6 <motors+0x1a6>
 80011b2:	4b5a      	ldr	r3, [pc, #360]	; (800131c <motors+0x2cc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d81c      	bhi.n	80011f6 <motors+0x1a6>
		{
			GPIOD->ODR = 0xC000;
 80011bc:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <motors+0x2d8>)
 80011be:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80011c2:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80011c4:	2002      	movs	r0, #2
 80011c6:	f000 fb4f 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x6000;
 80011ca:	4b57      	ldr	r3, [pc, #348]	; (8001328 <motors+0x2d8>)
 80011cc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80011d0:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80011d2:	2002      	movs	r0, #2
 80011d4:	f000 fb48 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x3000;
 80011d8:	4b53      	ldr	r3, [pc, #332]	; (8001328 <motors+0x2d8>)
 80011da:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80011de:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80011e0:	2002      	movs	r0, #2
 80011e2:	f000 fb41 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x9000;
 80011e6:	4b50      	ldr	r3, [pc, #320]	; (8001328 <motors+0x2d8>)
 80011e8:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80011ec:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80011ee:	2002      	movs	r0, #2
 80011f0:	f000 fb3a 	bl	8001868 <HAL_Delay>
 80011f4:	e11e      	b.n	8001434 <motors+0x3e4>

		}
		else if(Direction_1==1 && i<step_1 && Direction_2==0 && i<step_2)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d145      	bne.n	8001288 <motors+0x238>
 80011fc:	4b47      	ldr	r3, [pc, #284]	; (800131c <motors+0x2cc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	429a      	cmp	r2, r3
 8001204:	d940      	bls.n	8001288 <motors+0x238>
 8001206:	7bbb      	ldrb	r3, [r7, #14]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d13d      	bne.n	8001288 <motors+0x238>
 800120c:	4b43      	ldr	r3, [pc, #268]	; (800131c <motors+0x2cc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	429a      	cmp	r2, r3
 8001214:	d938      	bls.n	8001288 <motors+0x238>
		{
			GPIOD->ODR = 0x9000;
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <motors+0x2d8>)
 8001218:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800121c:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800121e:	2001      	movs	r0, #1
 8001220:	f000 fb22 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0xC000;
 8001224:	4b41      	ldr	r3, [pc, #260]	; (800132c <motors+0x2dc>)
 8001226:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800122a:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f000 fb1b 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x3000;
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <motors+0x2d8>)
 8001234:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001238:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800123a:	2001      	movs	r0, #1
 800123c:	f000 fb14 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x6000;
 8001240:	4b3a      	ldr	r3, [pc, #232]	; (800132c <motors+0x2dc>)
 8001242:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001246:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f000 fb0d 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x6000;
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <motors+0x2d8>)
 8001250:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001254:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 fb06 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x3000;
 800125c:	4b33      	ldr	r3, [pc, #204]	; (800132c <motors+0x2dc>)
 800125e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001262:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f000 faff 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0xC000;
 800126a:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <motors+0x2d8>)
 800126c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001270:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001272:	2001      	movs	r0, #1
 8001274:	f000 faf8 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x9000;
 8001278:	4b2c      	ldr	r3, [pc, #176]	; (800132c <motors+0x2dc>)
 800127a:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800127e:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f000 faf1 	bl	8001868 <HAL_Delay>
 8001286:	e0d5      	b.n	8001434 <motors+0x3e4>

		}
		else if(Direction_1==1 && i<step_1 && Direction_2==1 && i<step_2)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d150      	bne.n	8001330 <motors+0x2e0>
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <motors+0x2cc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	d94b      	bls.n	8001330 <motors+0x2e0>
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d148      	bne.n	8001330 <motors+0x2e0>
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <motors+0x2cc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d943      	bls.n	8001330 <motors+0x2e0>
		{
			GPIOD->ODR = 0x9000;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <motors+0x2d8>)
 80012aa:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80012ae:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f000 fad9 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x9000;
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <motors+0x2dc>)
 80012b8:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80012bc:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012be:	2001      	movs	r0, #1
 80012c0:	f000 fad2 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x3000;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <motors+0x2d8>)
 80012c6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80012ca:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f000 facb 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x3000;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <motors+0x2dc>)
 80012d4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80012d8:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012da:	2001      	movs	r0, #1
 80012dc:	f000 fac4 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x6000;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <motors+0x2d8>)
 80012e2:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80012e6:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f000 fabd 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x6000;
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <motors+0x2dc>)
 80012f0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80012f4:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 fab6 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0xC000;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <motors+0x2d8>)
 80012fe:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001302:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f000 faaf 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0xC000;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <motors+0x2dc>)
 800130c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001310:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001312:	2001      	movs	r0, #1
 8001314:	f000 faa8 	bl	8001868 <HAL_Delay>
 8001318:	e08c      	b.n	8001434 <motors+0x3e4>
 800131a:	bf00      	nop
 800131c:	2000005c 	.word	0x2000005c
 8001320:	20000030 	.word	0x20000030
 8001324:	20000031 	.word	0x20000031
 8001328:	40011400 	.word	0x40011400
 800132c:	40010c00 	.word	0x40010c00

		}
		else if(Direction_1==1 && i<step_1 && i>=step_2)
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d126      	bne.n	8001384 <motors+0x334>
 8001336:	4b49      	ldr	r3, [pc, #292]	; (800145c <motors+0x40c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	429a      	cmp	r2, r3
 800133e:	d921      	bls.n	8001384 <motors+0x334>
 8001340:	4b46      	ldr	r3, [pc, #280]	; (800145c <motors+0x40c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	d81c      	bhi.n	8001384 <motors+0x334>
		{
			GPIOD->ODR = 0x9000;
 800134a:	4b45      	ldr	r3, [pc, #276]	; (8001460 <motors+0x410>)
 800134c:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001350:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 8001352:	2002      	movs	r0, #2
 8001354:	f000 fa88 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x3000;
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <motors+0x410>)
 800135a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800135e:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 8001360:	2002      	movs	r0, #2
 8001362:	f000 fa81 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0x6000;
 8001366:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <motors+0x410>)
 8001368:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800136c:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 800136e:	2002      	movs	r0, #2
 8001370:	f000 fa7a 	bl	8001868 <HAL_Delay>
			GPIOD->ODR = 0xC000;
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <motors+0x410>)
 8001376:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800137a:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 800137c:	2002      	movs	r0, #2
 800137e:	f000 fa73 	bl	8001868 <HAL_Delay>
 8001382:	e057      	b.n	8001434 <motors+0x3e4>

		}
		else if(i>=step_1 && Direction_2==0 && i<step_2)
 8001384:	4b35      	ldr	r3, [pc, #212]	; (800145c <motors+0x40c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	429a      	cmp	r2, r3
 800138c:	d824      	bhi.n	80013d8 <motors+0x388>
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d121      	bne.n	80013d8 <motors+0x388>
 8001394:	4b31      	ldr	r3, [pc, #196]	; (800145c <motors+0x40c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	d91c      	bls.n	80013d8 <motors+0x388>
		{
			GPIOB->ODR = 0xC000;
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <motors+0x414>)
 80013a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80013a4:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80013a6:	2002      	movs	r0, #2
 80013a8:	f000 fa5e 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x6000;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <motors+0x414>)
 80013ae:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80013b2:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80013b4:	2002      	movs	r0, #2
 80013b6:	f000 fa57 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x3000;
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <motors+0x414>)
 80013bc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80013c0:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80013c2:	2002      	movs	r0, #2
 80013c4:	f000 fa50 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x9000;
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <motors+0x414>)
 80013ca:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80013ce:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80013d0:	2002      	movs	r0, #2
 80013d2:	f000 fa49 	bl	8001868 <HAL_Delay>
 80013d6:	e02d      	b.n	8001434 <motors+0x3e4>

		}
		else if(i>=step_1 && Direction_2==1 && i<step_2)
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <motors+0x40c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d824      	bhi.n	800142c <motors+0x3dc>
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d121      	bne.n	800142c <motors+0x3dc>
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <motors+0x40c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d91c      	bls.n	800142c <motors+0x3dc>
		{
			GPIOB->ODR = 0x9000;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <motors+0x414>)
 80013f4:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80013f8:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80013fa:	2002      	movs	r0, #2
 80013fc:	f000 fa34 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x3000;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <motors+0x414>)
 8001402:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001406:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 8001408:	2002      	movs	r0, #2
 800140a:	f000 fa2d 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0x6000;
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <motors+0x414>)
 8001410:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001414:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 8001416:	2002      	movs	r0, #2
 8001418:	f000 fa26 	bl	8001868 <HAL_Delay>
			GPIOB->ODR = 0xC000;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <motors+0x414>)
 800141e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001422:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 8001424:	2002      	movs	r0, #2
 8001426:	f000 fa1f 	bl	8001868 <HAL_Delay>
 800142a:	e003      	b.n	8001434 <motors+0x3e4>

		}
		else
		{
			end =1;
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <motors+0x418>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
			break;
 8001432:	e00e      	b.n	8001452 <motors+0x402>
	for(i=0;i<512;i++)
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <motors+0x40c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <motors+0x40c>)
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <motors+0x40c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001446:	f4ff ae10 	bcc.w	800106a <motors+0x1a>
		}
	}

}
 800144a:	e002      	b.n	8001452 <motors+0x402>
			break;
 800144c:	bf00      	nop
 800144e:	e000      	b.n	8001452 <motors+0x402>
			break;
 8001450:	bf00      	nop
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000005c 	.word	0x2000005c
 8001460:	40011400 	.word	0x40011400
 8001464:	40010c00 	.word	0x40010c00
 8001468:	20000031 	.word	0x20000031

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_MspInit+0x5c>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <HAL_MspInit+0x5c>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6193      	str	r3, [r2, #24]
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_MspInit+0x5c>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_MspInit+0x5c>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_MspInit+0x5c>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_MspInit+0x5c>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_MspInit+0x60>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_MspInit+0x60>)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010000 	.word	0x40010000

080014d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a2c      	ldr	r2, [pc, #176]	; (800159c <HAL_ADC_MspInit+0xcc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d151      	bne.n	8001594 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_ADC_MspInit+0xd0>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <HAL_ADC_MspInit+0xd0>)
 80014f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <HAL_ADC_MspInit+0xd0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <HAL_ADC_MspInit+0xd0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a24      	ldr	r2, [pc, #144]	; (80015a0 <HAL_ADC_MspInit+0xd0>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_ADC_MspInit+0xd0>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001520:	2306      	movs	r3, #6
 8001522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	4619      	mov	r1, r3
 800152e:	481d      	ldr	r0, [pc, #116]	; (80015a4 <HAL_ADC_MspInit+0xd4>)
 8001530:	f001 fd62 	bl	8002ff8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_ADC_MspInit+0xd8>)
 8001536:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_ADC_MspInit+0xdc>)
 8001538:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_ADC_MspInit+0xd8>)
 800153c:	2200      	movs	r2, #0
 800153e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_ADC_MspInit+0xd8>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_ADC_MspInit+0xd8>)
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_ADC_MspInit+0xd8>)
 800154e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001552:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_ADC_MspInit+0xd8>)
 8001556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800155a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_ADC_MspInit+0xd8>)
 800155e:	2220      	movs	r2, #32
 8001560:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_ADC_MspInit+0xd8>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001568:	480f      	ldr	r0, [pc, #60]	; (80015a8 <HAL_ADC_MspInit+0xd8>)
 800156a:	f001 f8c3 	bl	80026f4 <HAL_DMA_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001574:	f7ff fd0c 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_ADC_MspInit+0xd8>)
 800157c:	621a      	str	r2, [r3, #32]
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_ADC_MspInit+0xd8>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	2012      	movs	r0, #18
 800158a:	f001 f87c 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800158e:	2012      	movs	r0, #18
 8001590:	f001 f895 	bl	80026be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40012400 	.word	0x40012400
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010800 	.word	0x40010800
 80015a8:	20000138 	.word	0x20000138
 80015ac:	40020008 	.word	0x40020008

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a33      	ldr	r2, [pc, #204]	; (8001698 <HAL_UART_MspInit+0xe8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d15f      	bne.n	8001690 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d0:	4b32      	ldr	r3, [pc, #200]	; (800169c <HAL_UART_MspInit+0xec>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a31      	ldr	r2, [pc, #196]	; (800169c <HAL_UART_MspInit+0xec>)
 80015d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b2f      	ldr	r3, [pc, #188]	; (800169c <HAL_UART_MspInit+0xec>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b2c      	ldr	r3, [pc, #176]	; (800169c <HAL_UART_MspInit+0xec>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a2b      	ldr	r2, [pc, #172]	; (800169c <HAL_UART_MspInit+0xec>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_UART_MspInit+0xec>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	4619      	mov	r1, r3
 8001614:	4822      	ldr	r0, [pc, #136]	; (80016a0 <HAL_UART_MspInit+0xf0>)
 8001616:	f001 fcef 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800161a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	4619      	mov	r1, r3
 800162e:	481c      	ldr	r0, [pc, #112]	; (80016a0 <HAL_UART_MspInit+0xf0>)
 8001630:	f001 fce2 	bl	8002ff8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_UART_MspInit+0xf4>)
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <HAL_UART_MspInit+0xf8>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_UART_MspInit+0xf4>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_UART_MspInit+0xf4>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_UART_MspInit+0xf4>)
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_UART_MspInit+0xf4>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_UART_MspInit+0xf4>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_UART_MspInit+0xf4>)
 800165a:	2220      	movs	r2, #32
 800165c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_UART_MspInit+0xf4>)
 8001660:	2200      	movs	r2, #0
 8001662:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001664:	480f      	ldr	r0, [pc, #60]	; (80016a4 <HAL_UART_MspInit+0xf4>)
 8001666:	f001 f845 	bl	80026f4 <HAL_DMA_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001670:	f7ff fc8e 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_UART_MspInit+0xf4>)
 8001678:	639a      	str	r2, [r3, #56]	; 0x38
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_UART_MspInit+0xf4>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	2025      	movs	r0, #37	; 0x25
 8001686:	f000 fffe 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800168a:	2025      	movs	r0, #37	; 0x25
 800168c:	f001 f817 	bl	80026be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40013800 	.word	0x40013800
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010800 	.word	0x40010800
 80016a4:	200000ac 	.word	0x200000ac
 80016a8:	40020058 	.word	0x40020058

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f2:	f000 f89d 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <DMA1_Channel1_IRQHandler+0x10>)
 8001702:	f001 fa0f 	bl	8002b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000138 	.word	0x20000138

08001710 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA1_Channel5_IRQHandler+0x10>)
 8001716:	f001 fa05 	bl	8002b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000ac 	.word	0x200000ac

08001724 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <ADC1_2_IRQHandler+0x10>)
 800172a:	f000 fb3d 	bl	8001da8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000007c 	.word	0x2000007c

08001738 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <USART1_IRQHandler+0x10>)
 800173e:	f002 fc6f 	bl	8004020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200000f0 	.word	0x200000f0

0800174c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <Reset_Handler>:
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <LoopFillZerobss+0x12>)
 800175a:	490d      	ldr	r1, [pc, #52]	; (8001790 <LoopFillZerobss+0x16>)
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <LoopFillZerobss+0x1a>)
 800175e:	2300      	movs	r3, #0
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:
 8001762:	58d4      	ldr	r4, [r2, r3]
 8001764:	50c4      	str	r4, [r0, r3]
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:
 8001768:	18c4      	adds	r4, r0, r3
 800176a:	428c      	cmp	r4, r1
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <LoopFillZerobss+0x1e>)
 8001770:	4c0a      	ldr	r4, [pc, #40]	; (800179c <LoopFillZerobss+0x22>)
 8001772:	2300      	movs	r3, #0
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:
 800177a:	42a2      	cmp	r2, r4
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>
 800177e:	f7ff ffe5 	bl	800174c <SystemInit>
 8001782:	f003 f927 	bl	80049d4 <__libc_init_array>
 8001786:	f7ff f999 	bl	8000abc <main>
 800178a:	4770      	bx	lr
 800178c:	20000000 	.word	0x20000000
 8001790:	2000000c 	.word	0x2000000c
 8001794:	08004b18 	.word	0x08004b18
 8001798:	2000000c 	.word	0x2000000c
 800179c:	20000190 	.word	0x20000190

080017a0 <ADC3_IRQHandler>:
 80017a0:	e7fe      	b.n	80017a0 <ADC3_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_Init+0x28>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_Init+0x28>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 ff5b 	bl	8002670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 f808 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c0:	f7ff fe54 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40022000 	.word	0x40022000

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x54>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x58>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 ff73 	bl	80026da <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00e      	b.n	800181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d80a      	bhi.n	800181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 ff3b 	bl	8002686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <HAL_InitTick+0x5c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000000 	.word	0x20000000
 8001828:	20000008 	.word	0x20000008
 800182c:	20000004 	.word	0x20000004

08001830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x1c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x20>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a03      	ldr	r2, [pc, #12]	; (8001850 <HAL_IncTick+0x20>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	20000008 	.word	0x20000008
 8001850:	2000018c 	.word	0x2000018c

08001854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <HAL_GetTick+0x10>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	2000018c 	.word	0x2000018c

08001868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff fff0 	bl	8001854 <HAL_GetTick>
 8001874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001880:	d005      	beq.n	800188e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_Delay+0x40>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800188e:	bf00      	nop
 8001890:	f7ff ffe0 	bl	8001854 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	429a      	cmp	r2, r3
 800189e:	d8f7      	bhi.n	8001890 <HAL_Delay+0x28>
  {
  }
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000008 	.word	0x20000008

080018ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0ce      	b.n	8001a6c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fdf0 	bl	80014d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fc93 	bl	800221c <ADC_ConversionStop_Disable>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 80a9 	bne.w	8001a5a <HAL_ADC_Init+0x1ae>
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 80a5 	bne.w	8001a5a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001918:	f023 0302 	bic.w	r3, r3, #2
 800191c:	f043 0202 	orr.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4951      	ldr	r1, [pc, #324]	; (8001a74 <HAL_ADC_Init+0x1c8>)
 800192e:	428b      	cmp	r3, r1
 8001930:	d10a      	bne.n	8001948 <HAL_ADC_Init+0x9c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800193a:	d002      	beq.n	8001942 <HAL_ADC_Init+0x96>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	e004      	b.n	800194c <HAL_ADC_Init+0xa0>
 8001942:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001946:	e001      	b.n	800194c <HAL_ADC_Init+0xa0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800194c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7b1b      	ldrb	r3, [r3, #12]
 8001952:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001954:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	4313      	orrs	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001964:	d003      	beq.n	800196e <HAL_ADC_Init+0xc2>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d102      	bne.n	8001974 <HAL_ADC_Init+0xc8>
 800196e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001972:	e000      	b.n	8001976 <HAL_ADC_Init+0xca>
 8001974:	2300      	movs	r3, #0
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7d1b      	ldrb	r3, [r3, #20]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d119      	bne.n	80019b8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7b1b      	ldrb	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d109      	bne.n	80019a0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	3b01      	subs	r3, #1
 8001992:	035a      	lsls	r2, r3, #13
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	e00b      	b.n	80019b8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <HAL_ADC_Init+0x1cc>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	430b      	orrs	r3, r1
 80019de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e8:	d003      	beq.n	80019f2 <HAL_ADC_Init+0x146>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d104      	bne.n	80019fc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	051b      	lsls	r3, r3, #20
 80019fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_ADC_Init+0x1d0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d10b      	bne.n	8001a38 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	f023 0303 	bic.w	r3, r3, #3
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a36:	e018      	b.n	8001a6a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	f023 0312 	bic.w	r3, r3, #18
 8001a40:	f043 0210 	orr.w	r2, r3, #16
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	f043 0201 	orr.w	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a58:	e007      	b.n	8001a6a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	f043 0210 	orr.w	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40013c00 	.word	0x40013c00
 8001a78:	ffe1f7fd 	.word	0xffe1f7fd
 8001a7c:	ff1f0efe 	.word	0xff1f0efe

08001a80 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_Start_IT+0x1a>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e0a0      	b.n	8001bdc <HAL_ADC_Start_IT+0x15c>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fb60 	bl	8002168 <ADC_Enable>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 808f 	bne.w	8001bd2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a45      	ldr	r2, [pc, #276]	; (8001be4 <HAL_ADC_Start_IT+0x164>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d105      	bne.n	8001ade <HAL_ADC_Start_IT+0x5e>
 8001ad2:	4b45      	ldr	r3, [pc, #276]	; (8001be8 <HAL_ADC_Start_IT+0x168>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d115      	bne.n	8001b0a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d026      	beq.n	8001b46 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b08:	e01d      	b.n	8001b46 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a33      	ldr	r2, [pc, #204]	; (8001be8 <HAL_ADC_Start_IT+0x168>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d004      	beq.n	8001b2a <HAL_ADC_Start_IT+0xaa>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2f      	ldr	r2, [pc, #188]	; (8001be4 <HAL_ADC_Start_IT+0x164>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10d      	bne.n	8001b46 <HAL_ADC_Start_IT+0xc6>
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_ADC_Start_IT+0x168>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	f023 0206 	bic.w	r2, r3, #6
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b5e:	e002      	b.n	8001b66 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f06f 0202 	mvn.w	r2, #2
 8001b76:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b96:	d113      	bne.n	8001bc0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b9c:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <HAL_ADC_Start_IT+0x164>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d105      	bne.n	8001bae <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_ADC_Start_IT+0x168>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d108      	bne.n	8001bc0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	e00c      	b.n	8001bda <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	e003      	b.n	8001bda <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40012800 	.word	0x40012800
 8001be8:	40012400 	.word	0x40012400

08001bec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a64      	ldr	r2, [pc, #400]	; (8001d94 <HAL_ADC_Start_DMA+0x1a8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d004      	beq.n	8001c10 <HAL_ADC_Start_DMA+0x24>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a63      	ldr	r2, [pc, #396]	; (8001d98 <HAL_ADC_Start_DMA+0x1ac>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d106      	bne.n	8001c1e <HAL_ADC_Start_DMA+0x32>
 8001c10:	4b60      	ldr	r3, [pc, #384]	; (8001d94 <HAL_ADC_Start_DMA+0x1a8>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f040 80b3 	bne.w	8001d84 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_Start_DMA+0x40>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e0ae      	b.n	8001d8a <HAL_ADC_Start_DMA+0x19e>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fa97 	bl	8002168 <ADC_Enable>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 809a 	bne.w	8001d7a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a4e      	ldr	r2, [pc, #312]	; (8001d98 <HAL_ADC_Start_DMA+0x1ac>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d105      	bne.n	8001c70 <HAL_ADC_Start_DMA+0x84>
 8001c64:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_ADC_Start_DMA+0x1a8>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d115      	bne.n	8001c9c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d026      	beq.n	8001cd8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c9a:	e01d      	b.n	8001cd8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a39      	ldr	r2, [pc, #228]	; (8001d94 <HAL_ADC_Start_DMA+0x1a8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_ADC_Start_DMA+0xd0>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a38      	ldr	r2, [pc, #224]	; (8001d98 <HAL_ADC_Start_DMA+0x1ac>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d10d      	bne.n	8001cd8 <HAL_ADC_Start_DMA+0xec>
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_ADC_Start_DMA+0x1a8>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	f023 0206 	bic.w	r2, r3, #6
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cf0:	e002      	b.n	8001cf8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4a25      	ldr	r2, [pc, #148]	; (8001d9c <HAL_ADC_Start_DMA+0x1b0>)
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <HAL_ADC_Start_DMA+0x1b4>)
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <HAL_ADC_Start_DMA+0x1b8>)
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0202 	mvn.w	r2, #2
 8001d20:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d30:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a18      	ldr	r0, [r3, #32]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	334c      	adds	r3, #76	; 0x4c
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f000 fd4d 	bl	80027e0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d50:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d54:	d108      	bne.n	8001d68 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d64:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d66:	e00f      	b.n	8001d88 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d76:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d78:	e006      	b.n	8001d88 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001d82:	e001      	b.n	8001d88 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40012400 	.word	0x40012400
 8001d98:	40012800 	.word	0x40012800
 8001d9c:	0800229f 	.word	0x0800229f
 8001da0:	0800231b 	.word	0x0800231b
 8001da4:	08002337 	.word	0x08002337

08001da8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d140      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d139      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001df2:	d11d      	bne.n	8001e30 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d119      	bne.n	8001e30 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0220 	bic.w	r2, r2, #32
 8001e0a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f87c 	bl	8001f2e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f06f 0212 	mvn.w	r2, #18
 8001e3e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	2b80      	cmp	r3, #128	; 0x80
 8001e4c:	d14f      	bne.n	8001eee <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d148      	bne.n	8001eee <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001e7e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001e82:	d012      	beq.n	8001eaa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d125      	bne.n	8001ede <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e9c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ea0:	d11d      	bne.n	8001ede <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d119      	bne.n	8001ede <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 faf0 	bl	80024c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 020c 	mvn.w	r2, #12
 8001eec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d114      	bne.n	8001f26 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10d      	bne.n	8001f26 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f81b 	bl	8001f52 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0201 	mvn.w	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x20>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e0dc      	b.n	8002152 <HAL_ADC_ConfigChannel+0x1da>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	d81c      	bhi.n	8001fe2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b05      	subs	r3, #5
 8001fba:	221f      	movs	r2, #31
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4019      	ands	r1, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3b05      	subs	r3, #5
 8001fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34
 8001fe0:	e03c      	b.n	800205c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	d81c      	bhi.n	8002024 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3b23      	subs	r3, #35	; 0x23
 8001ffc:	221f      	movs	r2, #31
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	4019      	ands	r1, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	3b23      	subs	r3, #35	; 0x23
 8002016:	fa00 f203 	lsl.w	r2, r0, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
 8002022:	e01b      	b.n	800205c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	3b41      	subs	r3, #65	; 0x41
 8002036:	221f      	movs	r2, #31
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	4019      	ands	r1, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	3b41      	subs	r3, #65	; 0x41
 8002050:	fa00 f203 	lsl.w	r2, r0, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b09      	cmp	r3, #9
 8002062:	d91c      	bls.n	800209e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68d9      	ldr	r1, [r3, #12]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	3b1e      	subs	r3, #30
 8002076:	2207      	movs	r2, #7
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	4019      	ands	r1, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6898      	ldr	r0, [r3, #8]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	3b1e      	subs	r3, #30
 8002090:	fa00 f203 	lsl.w	r2, r0, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	e019      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6919      	ldr	r1, [r3, #16]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	2207      	movs	r2, #7
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4019      	ands	r1, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6898      	ldr	r0, [r3, #8]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d003      	beq.n	80020e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020de:	2b11      	cmp	r3, #17
 80020e0:	d132      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_ADC_ConfigChannel+0x1e4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d125      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d126      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002108:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b10      	cmp	r3, #16
 8002110:	d11a      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_ADC_ConfigChannel+0x1e8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <HAL_ADC_ConfigChannel+0x1ec>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	0c9a      	lsrs	r2, r3, #18
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002128:	e002      	b.n	8002130 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3b01      	subs	r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f9      	bne.n	800212a <HAL_ADC_ConfigChannel+0x1b2>
 8002136:	e007      	b.n	8002148 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	f043 0220 	orr.w	r2, r3, #32
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40012400 	.word	0x40012400
 8002160:	20000000 	.word	0x20000000
 8002164:	431bde83 	.word	0x431bde83

08002168 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d040      	beq.n	8002208 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <ADC_Enable+0xac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1f      	ldr	r2, [pc, #124]	; (8002218 <ADC_Enable+0xb0>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	0c9b      	lsrs	r3, r3, #18
 80021a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021a4:	e002      	b.n	80021ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f9      	bne.n	80021a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021b2:	f7ff fb4f 	bl	8001854 <HAL_GetTick>
 80021b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021b8:	e01f      	b.n	80021fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ba:	f7ff fb4b 	bl	8001854 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d918      	bls.n	80021fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d011      	beq.n	80021fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f043 0210 	orr.w	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e007      	b.n	800220a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d1d8      	bne.n	80021ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000000 	.word	0x20000000
 8002218:	431bde83 	.word	0x431bde83

0800221c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d12e      	bne.n	8002294 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0201 	bic.w	r2, r2, #1
 8002244:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002246:	f7ff fb05 	bl	8001854 <HAL_GetTick>
 800224a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800224c:	e01b      	b.n	8002286 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800224e:	f7ff fb01 	bl	8001854 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d914      	bls.n	8002286 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10d      	bne.n	8002286 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	f043 0210 	orr.w	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e007      	b.n	8002296 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d0dc      	beq.n	800224e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d127      	bne.n	8002308 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022d2:	d115      	bne.n	8002300 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d111      	bne.n	8002300 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7ff fe14 	bl	8001f2e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002306:	e004      	b.n	8002312 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff fe09 	bl	8001f40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	f043 0204 	orr.w	r2, r3, #4
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f7ff fe01 	bl	8001f64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_ADCEx_Calibration_Start+0x1e>
 8002386:	2302      	movs	r3, #2
 8002388:	e095      	b.n	80024b6 <HAL_ADCEx_Calibration_Start+0x14a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ff42 	bl	800221c <ADC_ConversionStop_Disable>
 8002398:	4603      	mov	r3, r0
 800239a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 8084 	bne.w	80024ac <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ac:	f023 0302 	bic.w	r3, r3, #2
 80023b0:	f043 0202 	orr.w	r2, r3, #2
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80023b8:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_ADCEx_Calibration_Start+0x154>)
 80023ba:	681c      	ldr	r4, [r3, #0]
 80023bc:	2002      	movs	r0, #2
 80023be:	f001 fc6f 	bl	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq>
 80023c2:	4603      	mov	r3, r0
 80023c4:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80023c8:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80023ca:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80023cc:	e002      	b.n	80023d4 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f9      	bne.n	80023ce <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fec4 	bl	8002168 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0208 	orr.w	r2, r2, #8
 80023ee:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80023f0:	f7ff fa30 	bl	8001854 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80023f6:	e01b      	b.n	8002430 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023f8:	f7ff fa2c 	bl	8001854 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b0a      	cmp	r3, #10
 8002404:	d914      	bls.n	8002430 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00d      	beq.n	8002430 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f023 0312 	bic.w	r3, r3, #18
 800241c:	f043 0210 	orr.w	r2, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e042      	b.n	80024b6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1dc      	bne.n	80023f8 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0204 	orr.w	r2, r2, #4
 800244c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800244e:	f7ff fa01 	bl	8001854 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002454:	e01b      	b.n	800248e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002456:	f7ff f9fd 	bl	8001854 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b0a      	cmp	r3, #10
 8002462:	d914      	bls.n	800248e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	f023 0312 	bic.w	r3, r3, #18
 800247a:	f043 0210 	orr.w	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e013      	b.n	80024b6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1dc      	bne.n	8002456 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	f023 0303 	bic.w	r3, r3, #3
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000000 	.word	0x20000000

080024c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
	...

080024d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f4:	4013      	ands	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250a:	4a04      	ldr	r2, [pc, #16]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60d3      	str	r3, [r2, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <__NVIC_GetPriorityGrouping+0x18>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0307 	and.w	r3, r3, #7
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db0b      	blt.n	8002566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	4906      	ldr	r1, [pc, #24]	; (8002570 <__NVIC_EnableIRQ+0x34>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2001      	movs	r0, #1
 800255e:	fa00 f202 	lsl.w	r2, r0, r2
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	; (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f1c3 0307 	rsb	r3, r3, #7
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	bf28      	it	cs
 80025e6:	2304      	movcs	r3, #4
 80025e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d902      	bls.n	80025f8 <NVIC_EncodePriority+0x30>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	e000      	b.n	80025fa <NVIC_EncodePriority+0x32>
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43d9      	mvns	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4313      	orrs	r3, r2
         );
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800263c:	d301      	bcc.n	8002642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <SysTick_Config+0x40>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264a:	210f      	movs	r1, #15
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f7ff ff90 	bl	8002574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <SysTick_Config+0x40>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <SysTick_Config+0x40>)
 800265c:	2207      	movs	r2, #7
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000e010 	.word	0xe000e010

08002670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff2d 	bl	80024d8 <__NVIC_SetPriorityGrouping>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002698:	f7ff ff42 	bl	8002520 <__NVIC_GetPriorityGrouping>
 800269c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff ff90 	bl	80025c8 <NVIC_EncodePriority>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff5f 	bl	8002574 <__NVIC_SetPriority>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff35 	bl	800253c <__NVIC_EnableIRQ>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ffa2 	bl	800262c <SysTick_Config>
 80026e8:	4603      	mov	r3, r0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e059      	b.n	80027be <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_DMA_Init+0xd4>)
 8002712:	429a      	cmp	r2, r3
 8002714:	d80f      	bhi.n	8002736 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_DMA_Init+0xd8>)
 800271e:	4413      	add	r3, r2
 8002720:	4a2b      	ldr	r2, [pc, #172]	; (80027d0 <HAL_DMA_Init+0xdc>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	009a      	lsls	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a28      	ldr	r2, [pc, #160]	; (80027d4 <HAL_DMA_Init+0xe0>)
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
 8002734:	e00e      	b.n	8002754 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_DMA_Init+0xe4>)
 800273e:	4413      	add	r3, r2
 8002740:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <HAL_DMA_Init+0xdc>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	009a      	lsls	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a22      	ldr	r2, [pc, #136]	; (80027dc <HAL_DMA_Init+0xe8>)
 8002752:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800276a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800276e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40020407 	.word	0x40020407
 80027cc:	bffdfff8 	.word	0xbffdfff8
 80027d0:	cccccccd 	.word	0xcccccccd
 80027d4:	40020000 	.word	0x40020000
 80027d8:	bffdfbf8 	.word	0xbffdfbf8
 80027dc:	40020400 	.word	0x40020400

080027e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_DMA_Start_IT+0x20>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e04a      	b.n	8002896 <HAL_DMA_Start_IT+0xb6>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800280e:	2b01      	cmp	r3, #1
 8002810:	d13a      	bne.n	8002888 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2202      	movs	r2, #2
 8002816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fbb0 	bl	8002f9c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 020e 	orr.w	r2, r2, #14
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e00f      	b.n	8002876 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0204 	bic.w	r2, r2, #4
 8002864:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 020a 	orr.w	r2, r2, #10
 8002874:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e005      	b.n	8002894 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002890:	2302      	movs	r3, #2
 8002892:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002894:	7dfb      	ldrb	r3, [r7, #23]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d008      	beq.n	80028c6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2204      	movs	r2, #4
 80028b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e020      	b.n	8002908 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 020e 	bic.w	r2, r2, #14
 80028d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0201 	bic.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2101      	movs	r1, #1
 80028f0:	fa01 f202 	lsl.w	r2, r1, r2
 80028f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002906:	7bfb      	ldrb	r3, [r7, #15]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
	...

08002914 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002926:	2b02      	cmp	r3, #2
 8002928:	d005      	beq.n	8002936 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2204      	movs	r2, #4
 800292e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e0d6      	b.n	8002ae4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 020e 	bic.w	r2, r2, #14
 8002944:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <HAL_DMA_Abort_IT+0x1dc>)
 800295e:	429a      	cmp	r2, r3
 8002960:	d958      	bls.n	8002a14 <HAL_DMA_Abort_IT+0x100>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a63      	ldr	r2, [pc, #396]	; (8002af4 <HAL_DMA_Abort_IT+0x1e0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d04f      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xf8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a61      	ldr	r2, [pc, #388]	; (8002af8 <HAL_DMA_Abort_IT+0x1e4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d048      	beq.n	8002a08 <HAL_DMA_Abort_IT+0xf4>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a60      	ldr	r2, [pc, #384]	; (8002afc <HAL_DMA_Abort_IT+0x1e8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d040      	beq.n	8002a02 <HAL_DMA_Abort_IT+0xee>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a5e      	ldr	r2, [pc, #376]	; (8002b00 <HAL_DMA_Abort_IT+0x1ec>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d038      	beq.n	80029fc <HAL_DMA_Abort_IT+0xe8>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a5d      	ldr	r2, [pc, #372]	; (8002b04 <HAL_DMA_Abort_IT+0x1f0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d030      	beq.n	80029f6 <HAL_DMA_Abort_IT+0xe2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5b      	ldr	r2, [pc, #364]	; (8002b08 <HAL_DMA_Abort_IT+0x1f4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d028      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xdc>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a53      	ldr	r2, [pc, #332]	; (8002af0 <HAL_DMA_Abort_IT+0x1dc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d020      	beq.n	80029ea <HAL_DMA_Abort_IT+0xd6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a57      	ldr	r2, [pc, #348]	; (8002b0c <HAL_DMA_Abort_IT+0x1f8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d019      	beq.n	80029e6 <HAL_DMA_Abort_IT+0xd2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a56      	ldr	r2, [pc, #344]	; (8002b10 <HAL_DMA_Abort_IT+0x1fc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d012      	beq.n	80029e2 <HAL_DMA_Abort_IT+0xce>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a54      	ldr	r2, [pc, #336]	; (8002b14 <HAL_DMA_Abort_IT+0x200>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00a      	beq.n	80029dc <HAL_DMA_Abort_IT+0xc8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a53      	ldr	r2, [pc, #332]	; (8002b18 <HAL_DMA_Abort_IT+0x204>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d102      	bne.n	80029d6 <HAL_DMA_Abort_IT+0xc2>
 80029d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d4:	e01b      	b.n	8002a0e <HAL_DMA_Abort_IT+0xfa>
 80029d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029da:	e018      	b.n	8002a0e <HAL_DMA_Abort_IT+0xfa>
 80029dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e0:	e015      	b.n	8002a0e <HAL_DMA_Abort_IT+0xfa>
 80029e2:	2310      	movs	r3, #16
 80029e4:	e013      	b.n	8002a0e <HAL_DMA_Abort_IT+0xfa>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e011      	b.n	8002a0e <HAL_DMA_Abort_IT+0xfa>
 80029ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ee:	e00e      	b.n	8002a0e <HAL_DMA_Abort_IT+0xfa>
 80029f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029f4:	e00b      	b.n	8002a0e <HAL_DMA_Abort_IT+0xfa>
 80029f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029fa:	e008      	b.n	8002a0e <HAL_DMA_Abort_IT+0xfa>
 80029fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a00:	e005      	b.n	8002a0e <HAL_DMA_Abort_IT+0xfa>
 8002a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a06:	e002      	b.n	8002a0e <HAL_DMA_Abort_IT+0xfa>
 8002a08:	2310      	movs	r3, #16
 8002a0a:	e000      	b.n	8002a0e <HAL_DMA_Abort_IT+0xfa>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	4a43      	ldr	r2, [pc, #268]	; (8002b1c <HAL_DMA_Abort_IT+0x208>)
 8002a10:	6053      	str	r3, [r2, #4]
 8002a12:	e057      	b.n	8002ac4 <HAL_DMA_Abort_IT+0x1b0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a36      	ldr	r2, [pc, #216]	; (8002af4 <HAL_DMA_Abort_IT+0x1e0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d04f      	beq.n	8002abe <HAL_DMA_Abort_IT+0x1aa>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a35      	ldr	r2, [pc, #212]	; (8002af8 <HAL_DMA_Abort_IT+0x1e4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d048      	beq.n	8002aba <HAL_DMA_Abort_IT+0x1a6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a33      	ldr	r2, [pc, #204]	; (8002afc <HAL_DMA_Abort_IT+0x1e8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d040      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x1a0>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <HAL_DMA_Abort_IT+0x1ec>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d038      	beq.n	8002aae <HAL_DMA_Abort_IT+0x19a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a30      	ldr	r2, [pc, #192]	; (8002b04 <HAL_DMA_Abort_IT+0x1f0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d030      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0x194>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <HAL_DMA_Abort_IT+0x1f4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d028      	beq.n	8002aa2 <HAL_DMA_Abort_IT+0x18e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <HAL_DMA_Abort_IT+0x1dc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d020      	beq.n	8002a9c <HAL_DMA_Abort_IT+0x188>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a2b      	ldr	r2, [pc, #172]	; (8002b0c <HAL_DMA_Abort_IT+0x1f8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d019      	beq.n	8002a98 <HAL_DMA_Abort_IT+0x184>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a29      	ldr	r2, [pc, #164]	; (8002b10 <HAL_DMA_Abort_IT+0x1fc>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d012      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x180>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <HAL_DMA_Abort_IT+0x200>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00a      	beq.n	8002a8e <HAL_DMA_Abort_IT+0x17a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <HAL_DMA_Abort_IT+0x204>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d102      	bne.n	8002a88 <HAL_DMA_Abort_IT+0x174>
 8002a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a86:	e01b      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x1ac>
 8002a88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a8c:	e018      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x1ac>
 8002a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a92:	e015      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x1ac>
 8002a94:	2310      	movs	r3, #16
 8002a96:	e013      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x1ac>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e011      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x1ac>
 8002a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa0:	e00e      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x1ac>
 8002aa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aa6:	e00b      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x1ac>
 8002aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aac:	e008      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x1ac>
 8002aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab2:	e005      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x1ac>
 8002ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab8:	e002      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x1ac>
 8002aba:	2310      	movs	r3, #16
 8002abc:	e000      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x1ac>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HAL_DMA_Abort_IT+0x20c>)
 8002ac2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
    } 
  }
  return status;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40020080 	.word	0x40020080
 8002af4:	40020008 	.word	0x40020008
 8002af8:	4002001c 	.word	0x4002001c
 8002afc:	40020030 	.word	0x40020030
 8002b00:	40020044 	.word	0x40020044
 8002b04:	40020058 	.word	0x40020058
 8002b08:	4002006c 	.word	0x4002006c
 8002b0c:	40020408 	.word	0x40020408
 8002b10:	4002041c 	.word	0x4002041c
 8002b14:	40020430 	.word	0x40020430
 8002b18:	40020444 	.word	0x40020444
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40020000 	.word	0x40020000

08002b24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2204      	movs	r2, #4
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80d6 	beq.w	8002cfa <HAL_DMA_IRQHandler+0x1d6>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80d0 	beq.w	8002cfa <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0204 	bic.w	r2, r2, #4
 8002b76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b9b      	ldr	r3, [pc, #620]	; (8002dec <HAL_DMA_IRQHandler+0x2c8>)
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d958      	bls.n	8002c36 <HAL_DMA_IRQHandler+0x112>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a99      	ldr	r2, [pc, #612]	; (8002df0 <HAL_DMA_IRQHandler+0x2cc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d04f      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x10a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a98      	ldr	r2, [pc, #608]	; (8002df4 <HAL_DMA_IRQHandler+0x2d0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d048      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x106>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a96      	ldr	r2, [pc, #600]	; (8002df8 <HAL_DMA_IRQHandler+0x2d4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d040      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x100>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a95      	ldr	r2, [pc, #596]	; (8002dfc <HAL_DMA_IRQHandler+0x2d8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d038      	beq.n	8002c1e <HAL_DMA_IRQHandler+0xfa>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a93      	ldr	r2, [pc, #588]	; (8002e00 <HAL_DMA_IRQHandler+0x2dc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d030      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xf4>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a92      	ldr	r2, [pc, #584]	; (8002e04 <HAL_DMA_IRQHandler+0x2e0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d028      	beq.n	8002c12 <HAL_DMA_IRQHandler+0xee>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a89      	ldr	r2, [pc, #548]	; (8002dec <HAL_DMA_IRQHandler+0x2c8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d020      	beq.n	8002c0c <HAL_DMA_IRQHandler+0xe8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a8e      	ldr	r2, [pc, #568]	; (8002e08 <HAL_DMA_IRQHandler+0x2e4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d019      	beq.n	8002c08 <HAL_DMA_IRQHandler+0xe4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a8c      	ldr	r2, [pc, #560]	; (8002e0c <HAL_DMA_IRQHandler+0x2e8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d012      	beq.n	8002c04 <HAL_DMA_IRQHandler+0xe0>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a8b      	ldr	r2, [pc, #556]	; (8002e10 <HAL_DMA_IRQHandler+0x2ec>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00a      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xda>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a89      	ldr	r2, [pc, #548]	; (8002e14 <HAL_DMA_IRQHandler+0x2f0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d102      	bne.n	8002bf8 <HAL_DMA_IRQHandler+0xd4>
 8002bf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bf6:	e01b      	b.n	8002c30 <HAL_DMA_IRQHandler+0x10c>
 8002bf8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bfc:	e018      	b.n	8002c30 <HAL_DMA_IRQHandler+0x10c>
 8002bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c02:	e015      	b.n	8002c30 <HAL_DMA_IRQHandler+0x10c>
 8002c04:	2340      	movs	r3, #64	; 0x40
 8002c06:	e013      	b.n	8002c30 <HAL_DMA_IRQHandler+0x10c>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	e011      	b.n	8002c30 <HAL_DMA_IRQHandler+0x10c>
 8002c0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c10:	e00e      	b.n	8002c30 <HAL_DMA_IRQHandler+0x10c>
 8002c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c16:	e00b      	b.n	8002c30 <HAL_DMA_IRQHandler+0x10c>
 8002c18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c1c:	e008      	b.n	8002c30 <HAL_DMA_IRQHandler+0x10c>
 8002c1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c22:	e005      	b.n	8002c30 <HAL_DMA_IRQHandler+0x10c>
 8002c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c28:	e002      	b.n	8002c30 <HAL_DMA_IRQHandler+0x10c>
 8002c2a:	2340      	movs	r3, #64	; 0x40
 8002c2c:	e000      	b.n	8002c30 <HAL_DMA_IRQHandler+0x10c>
 8002c2e:	2304      	movs	r3, #4
 8002c30:	4a79      	ldr	r2, [pc, #484]	; (8002e18 <HAL_DMA_IRQHandler+0x2f4>)
 8002c32:	6053      	str	r3, [r2, #4]
 8002c34:	e057      	b.n	8002ce6 <HAL_DMA_IRQHandler+0x1c2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a6d      	ldr	r2, [pc, #436]	; (8002df0 <HAL_DMA_IRQHandler+0x2cc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d04f      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x1bc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6b      	ldr	r2, [pc, #428]	; (8002df4 <HAL_DMA_IRQHandler+0x2d0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d048      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x1b8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a6a      	ldr	r2, [pc, #424]	; (8002df8 <HAL_DMA_IRQHandler+0x2d4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d040      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x1b2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a68      	ldr	r2, [pc, #416]	; (8002dfc <HAL_DMA_IRQHandler+0x2d8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d038      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x1ac>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a67      	ldr	r2, [pc, #412]	; (8002e00 <HAL_DMA_IRQHandler+0x2dc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d030      	beq.n	8002cca <HAL_DMA_IRQHandler+0x1a6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_DMA_IRQHandler+0x2e0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d028      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x1a0>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a5d      	ldr	r2, [pc, #372]	; (8002dec <HAL_DMA_IRQHandler+0x2c8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d020      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x19a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a61      	ldr	r2, [pc, #388]	; (8002e08 <HAL_DMA_IRQHandler+0x2e4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_DMA_IRQHandler+0x196>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a60      	ldr	r2, [pc, #384]	; (8002e0c <HAL_DMA_IRQHandler+0x2e8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d012      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x192>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a5e      	ldr	r2, [pc, #376]	; (8002e10 <HAL_DMA_IRQHandler+0x2ec>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00a      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x18c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5d      	ldr	r2, [pc, #372]	; (8002e14 <HAL_DMA_IRQHandler+0x2f0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d102      	bne.n	8002caa <HAL_DMA_IRQHandler+0x186>
 8002ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ca8:	e01b      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1be>
 8002caa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cae:	e018      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1be>
 8002cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb4:	e015      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1be>
 8002cb6:	2340      	movs	r3, #64	; 0x40
 8002cb8:	e013      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1be>
 8002cba:	2304      	movs	r3, #4
 8002cbc:	e011      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1be>
 8002cbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002cc2:	e00e      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1be>
 8002cc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cc8:	e00b      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1be>
 8002cca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cce:	e008      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1be>
 8002cd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cd4:	e005      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1be>
 8002cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cda:	e002      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1be>
 8002cdc:	2340      	movs	r3, #64	; 0x40
 8002cde:	e000      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1be>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	4a4e      	ldr	r2, [pc, #312]	; (8002e1c <HAL_DMA_IRQHandler+0x2f8>)
 8002ce4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8136 	beq.w	8002f5c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cf8:	e130      	b.n	8002f5c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	2202      	movs	r2, #2
 8002d00:	409a      	lsls	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80f8 	beq.w	8002efc <HAL_DMA_IRQHandler+0x3d8>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80f2 	beq.w	8002efc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 020a 	bic.w	r2, r2, #10
 8002d34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_DMA_IRQHandler+0x2c8>)
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d973      	bls.n	8002e32 <HAL_DMA_IRQHandler+0x30e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a28      	ldr	r2, [pc, #160]	; (8002df0 <HAL_DMA_IRQHandler+0x2cc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d06a      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x306>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <HAL_DMA_IRQHandler+0x2d0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d063      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x302>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_DMA_IRQHandler+0x2d4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d05b      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x2fc>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a23      	ldr	r2, [pc, #140]	; (8002dfc <HAL_DMA_IRQHandler+0x2d8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d038      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x2c0>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <HAL_DMA_IRQHandler+0x2dc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d030      	beq.n	8002dde <HAL_DMA_IRQHandler+0x2ba>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a20      	ldr	r2, [pc, #128]	; (8002e04 <HAL_DMA_IRQHandler+0x2e0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d028      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x2b4>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_DMA_IRQHandler+0x2c8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d020      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x2ae>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <HAL_DMA_IRQHandler+0x2e4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d019      	beq.n	8002dce <HAL_DMA_IRQHandler+0x2aa>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a1b      	ldr	r2, [pc, #108]	; (8002e0c <HAL_DMA_IRQHandler+0x2e8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d012      	beq.n	8002dca <HAL_DMA_IRQHandler+0x2a6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <HAL_DMA_IRQHandler+0x2ec>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00a      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a18      	ldr	r2, [pc, #96]	; (8002e14 <HAL_DMA_IRQHandler+0x2f0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d102      	bne.n	8002dbe <HAL_DMA_IRQHandler+0x29a>
 8002db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dbc:	e036      	b.n	8002e2c <HAL_DMA_IRQHandler+0x308>
 8002dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc2:	e033      	b.n	8002e2c <HAL_DMA_IRQHandler+0x308>
 8002dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc8:	e030      	b.n	8002e2c <HAL_DMA_IRQHandler+0x308>
 8002dca:	2320      	movs	r3, #32
 8002dcc:	e02e      	b.n	8002e2c <HAL_DMA_IRQHandler+0x308>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e02c      	b.n	8002e2c <HAL_DMA_IRQHandler+0x308>
 8002dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd6:	e029      	b.n	8002e2c <HAL_DMA_IRQHandler+0x308>
 8002dd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ddc:	e026      	b.n	8002e2c <HAL_DMA_IRQHandler+0x308>
 8002dde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de2:	e023      	b.n	8002e2c <HAL_DMA_IRQHandler+0x308>
 8002de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de8:	e020      	b.n	8002e2c <HAL_DMA_IRQHandler+0x308>
 8002dea:	bf00      	nop
 8002dec:	40020080 	.word	0x40020080
 8002df0:	40020008 	.word	0x40020008
 8002df4:	4002001c 	.word	0x4002001c
 8002df8:	40020030 	.word	0x40020030
 8002dfc:	40020044 	.word	0x40020044
 8002e00:	40020058 	.word	0x40020058
 8002e04:	4002006c 	.word	0x4002006c
 8002e08:	40020408 	.word	0x40020408
 8002e0c:	4002041c 	.word	0x4002041c
 8002e10:	40020430 	.word	0x40020430
 8002e14:	40020444 	.word	0x40020444
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	40020000 	.word	0x40020000
 8002e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e24:	e002      	b.n	8002e2c <HAL_DMA_IRQHandler+0x308>
 8002e26:	2320      	movs	r3, #32
 8002e28:	e000      	b.n	8002e2c <HAL_DMA_IRQHandler+0x308>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	4a4e      	ldr	r2, [pc, #312]	; (8002f68 <HAL_DMA_IRQHandler+0x444>)
 8002e2e:	6053      	str	r3, [r2, #4]
 8002e30:	e057      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x3be>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a4d      	ldr	r2, [pc, #308]	; (8002f6c <HAL_DMA_IRQHandler+0x448>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d04f      	beq.n	8002edc <HAL_DMA_IRQHandler+0x3b8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a4b      	ldr	r2, [pc, #300]	; (8002f70 <HAL_DMA_IRQHandler+0x44c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d048      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x3b4>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a4a      	ldr	r2, [pc, #296]	; (8002f74 <HAL_DMA_IRQHandler+0x450>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d040      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x3ae>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a48      	ldr	r2, [pc, #288]	; (8002f78 <HAL_DMA_IRQHandler+0x454>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d038      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x3a8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a47      	ldr	r2, [pc, #284]	; (8002f7c <HAL_DMA_IRQHandler+0x458>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d030      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x3a2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a45      	ldr	r2, [pc, #276]	; (8002f80 <HAL_DMA_IRQHandler+0x45c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d028      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x39c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a44      	ldr	r2, [pc, #272]	; (8002f84 <HAL_DMA_IRQHandler+0x460>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d020      	beq.n	8002eba <HAL_DMA_IRQHandler+0x396>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a42      	ldr	r2, [pc, #264]	; (8002f88 <HAL_DMA_IRQHandler+0x464>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d019      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x392>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a41      	ldr	r2, [pc, #260]	; (8002f8c <HAL_DMA_IRQHandler+0x468>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d012      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x38e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a3f      	ldr	r2, [pc, #252]	; (8002f90 <HAL_DMA_IRQHandler+0x46c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00a      	beq.n	8002eac <HAL_DMA_IRQHandler+0x388>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a3e      	ldr	r2, [pc, #248]	; (8002f94 <HAL_DMA_IRQHandler+0x470>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d102      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0x382>
 8002ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ea4:	e01b      	b.n	8002ede <HAL_DMA_IRQHandler+0x3ba>
 8002ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eaa:	e018      	b.n	8002ede <HAL_DMA_IRQHandler+0x3ba>
 8002eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb0:	e015      	b.n	8002ede <HAL_DMA_IRQHandler+0x3ba>
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	e013      	b.n	8002ede <HAL_DMA_IRQHandler+0x3ba>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e011      	b.n	8002ede <HAL_DMA_IRQHandler+0x3ba>
 8002eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ebe:	e00e      	b.n	8002ede <HAL_DMA_IRQHandler+0x3ba>
 8002ec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ec4:	e00b      	b.n	8002ede <HAL_DMA_IRQHandler+0x3ba>
 8002ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eca:	e008      	b.n	8002ede <HAL_DMA_IRQHandler+0x3ba>
 8002ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ed0:	e005      	b.n	8002ede <HAL_DMA_IRQHandler+0x3ba>
 8002ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed6:	e002      	b.n	8002ede <HAL_DMA_IRQHandler+0x3ba>
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e000      	b.n	8002ede <HAL_DMA_IRQHandler+0x3ba>
 8002edc:	2302      	movs	r3, #2
 8002ede:	4a2e      	ldr	r2, [pc, #184]	; (8002f98 <HAL_DMA_IRQHandler+0x474>)
 8002ee0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d034      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002efa:	e02f      	b.n	8002f5c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	2208      	movs	r2, #8
 8002f02:	409a      	lsls	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d028      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x43a>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d023      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 020e 	bic.w	r2, r2, #14
 8002f24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	2101      	movs	r1, #1
 8002f30:	fa01 f202 	lsl.w	r2, r1, r2
 8002f34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
    }
  }
  return;
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
}
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020008 	.word	0x40020008
 8002f70:	4002001c 	.word	0x4002001c
 8002f74:	40020030 	.word	0x40020030
 8002f78:	40020044 	.word	0x40020044
 8002f7c:	40020058 	.word	0x40020058
 8002f80:	4002006c 	.word	0x4002006c
 8002f84:	40020080 	.word	0x40020080
 8002f88:	40020408 	.word	0x40020408
 8002f8c:	4002041c 	.word	0x4002041c
 8002f90:	40020430 	.word	0x40020430
 8002f94:	40020444 	.word	0x40020444
 8002f98:	40020000 	.word	0x40020000

08002f9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d108      	bne.n	8002fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fda:	e007      	b.n	8002fec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	60da      	str	r2, [r3, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
	...

08002ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b08b      	sub	sp, #44	; 0x2c
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300a:	e133      	b.n	8003274 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800300c:	2201      	movs	r2, #1
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	429a      	cmp	r2, r3
 8003026:	f040 8122 	bne.w	800326e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b12      	cmp	r3, #18
 8003030:	d034      	beq.n	800309c <HAL_GPIO_Init+0xa4>
 8003032:	2b12      	cmp	r3, #18
 8003034:	d80d      	bhi.n	8003052 <HAL_GPIO_Init+0x5a>
 8003036:	2b02      	cmp	r3, #2
 8003038:	d02b      	beq.n	8003092 <HAL_GPIO_Init+0x9a>
 800303a:	2b02      	cmp	r3, #2
 800303c:	d804      	bhi.n	8003048 <HAL_GPIO_Init+0x50>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d031      	beq.n	80030a6 <HAL_GPIO_Init+0xae>
 8003042:	2b01      	cmp	r3, #1
 8003044:	d01c      	beq.n	8003080 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003046:	e048      	b.n	80030da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003048:	2b03      	cmp	r3, #3
 800304a:	d043      	beq.n	80030d4 <HAL_GPIO_Init+0xdc>
 800304c:	2b11      	cmp	r3, #17
 800304e:	d01b      	beq.n	8003088 <HAL_GPIO_Init+0x90>
          break;
 8003050:	e043      	b.n	80030da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003052:	4a8f      	ldr	r2, [pc, #572]	; (8003290 <HAL_GPIO_Init+0x298>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d026      	beq.n	80030a6 <HAL_GPIO_Init+0xae>
 8003058:	4a8d      	ldr	r2, [pc, #564]	; (8003290 <HAL_GPIO_Init+0x298>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d806      	bhi.n	800306c <HAL_GPIO_Init+0x74>
 800305e:	4a8d      	ldr	r2, [pc, #564]	; (8003294 <HAL_GPIO_Init+0x29c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d020      	beq.n	80030a6 <HAL_GPIO_Init+0xae>
 8003064:	4a8c      	ldr	r2, [pc, #560]	; (8003298 <HAL_GPIO_Init+0x2a0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01d      	beq.n	80030a6 <HAL_GPIO_Init+0xae>
          break;
 800306a:	e036      	b.n	80030da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800306c:	4a8b      	ldr	r2, [pc, #556]	; (800329c <HAL_GPIO_Init+0x2a4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d019      	beq.n	80030a6 <HAL_GPIO_Init+0xae>
 8003072:	4a8b      	ldr	r2, [pc, #556]	; (80032a0 <HAL_GPIO_Init+0x2a8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d016      	beq.n	80030a6 <HAL_GPIO_Init+0xae>
 8003078:	4a8a      	ldr	r2, [pc, #552]	; (80032a4 <HAL_GPIO_Init+0x2ac>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_GPIO_Init+0xae>
          break;
 800307e:	e02c      	b.n	80030da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	623b      	str	r3, [r7, #32]
          break;
 8003086:	e028      	b.n	80030da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	3304      	adds	r3, #4
 800308e:	623b      	str	r3, [r7, #32]
          break;
 8003090:	e023      	b.n	80030da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	3308      	adds	r3, #8
 8003098:	623b      	str	r3, [r7, #32]
          break;
 800309a:	e01e      	b.n	80030da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	330c      	adds	r3, #12
 80030a2:	623b      	str	r3, [r7, #32]
          break;
 80030a4:	e019      	b.n	80030da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ae:	2304      	movs	r3, #4
 80030b0:	623b      	str	r3, [r7, #32]
          break;
 80030b2:	e012      	b.n	80030da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030bc:	2308      	movs	r3, #8
 80030be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	611a      	str	r2, [r3, #16]
          break;
 80030c6:	e008      	b.n	80030da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c8:	2308      	movs	r3, #8
 80030ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	615a      	str	r2, [r3, #20]
          break;
 80030d2:	e002      	b.n	80030da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030d4:	2300      	movs	r3, #0
 80030d6:	623b      	str	r3, [r7, #32]
          break;
 80030d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	2bff      	cmp	r3, #255	; 0xff
 80030de:	d801      	bhi.n	80030e4 <HAL_GPIO_Init+0xec>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	e001      	b.n	80030e8 <HAL_GPIO_Init+0xf0>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2bff      	cmp	r3, #255	; 0xff
 80030ee:	d802      	bhi.n	80030f6 <HAL_GPIO_Init+0xfe>
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	e002      	b.n	80030fc <HAL_GPIO_Init+0x104>
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	3b08      	subs	r3, #8
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	210f      	movs	r1, #15
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	401a      	ands	r2, r3
 800310e:	6a39      	ldr	r1, [r7, #32]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	431a      	orrs	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80a2 	beq.w	800326e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800312a:	4b5f      	ldr	r3, [pc, #380]	; (80032a8 <HAL_GPIO_Init+0x2b0>)
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	4a5e      	ldr	r2, [pc, #376]	; (80032a8 <HAL_GPIO_Init+0x2b0>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6193      	str	r3, [r2, #24]
 8003136:	4b5c      	ldr	r3, [pc, #368]	; (80032a8 <HAL_GPIO_Init+0x2b0>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003142:	4a5a      	ldr	r2, [pc, #360]	; (80032ac <HAL_GPIO_Init+0x2b4>)
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	3302      	adds	r3, #2
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	220f      	movs	r2, #15
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4013      	ands	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a51      	ldr	r2, [pc, #324]	; (80032b0 <HAL_GPIO_Init+0x2b8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01f      	beq.n	80031ae <HAL_GPIO_Init+0x1b6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a50      	ldr	r2, [pc, #320]	; (80032b4 <HAL_GPIO_Init+0x2bc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d019      	beq.n	80031aa <HAL_GPIO_Init+0x1b2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a4f      	ldr	r2, [pc, #316]	; (80032b8 <HAL_GPIO_Init+0x2c0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_GPIO_Init+0x1ae>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4e      	ldr	r2, [pc, #312]	; (80032bc <HAL_GPIO_Init+0x2c4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00d      	beq.n	80031a2 <HAL_GPIO_Init+0x1aa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4d      	ldr	r2, [pc, #308]	; (80032c0 <HAL_GPIO_Init+0x2c8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <HAL_GPIO_Init+0x1a6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4c      	ldr	r2, [pc, #304]	; (80032c4 <HAL_GPIO_Init+0x2cc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_GPIO_Init+0x1a2>
 8003196:	2305      	movs	r3, #5
 8003198:	e00a      	b.n	80031b0 <HAL_GPIO_Init+0x1b8>
 800319a:	2306      	movs	r3, #6
 800319c:	e008      	b.n	80031b0 <HAL_GPIO_Init+0x1b8>
 800319e:	2304      	movs	r3, #4
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x1b8>
 80031a2:	2303      	movs	r3, #3
 80031a4:	e004      	b.n	80031b0 <HAL_GPIO_Init+0x1b8>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x1b8>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x1b8>
 80031ae:	2300      	movs	r3, #0
 80031b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b2:	f002 0203 	and.w	r2, r2, #3
 80031b6:	0092      	lsls	r2, r2, #2
 80031b8:	4093      	lsls	r3, r2
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031c0:	493a      	ldr	r1, [pc, #232]	; (80032ac <HAL_GPIO_Init+0x2b4>)
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	493a      	ldr	r1, [pc, #232]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
 80031e6:	e006      	b.n	80031f6 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031e8:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	4935      	ldr	r1, [pc, #212]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d006      	beq.n	8003210 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003202:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	4930      	ldr	r1, [pc, #192]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
 800320e:	e006      	b.n	800321e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003210:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	43db      	mvns	r3, r3
 8003218:	492b      	ldr	r1, [pc, #172]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 800321a:	4013      	ands	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d006      	beq.n	8003238 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800322a:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	4926      	ldr	r1, [pc, #152]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
 8003236:	e006      	b.n	8003246 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003238:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	43db      	mvns	r3, r3
 8003240:	4921      	ldr	r1, [pc, #132]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 8003242:	4013      	ands	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003252:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	491c      	ldr	r1, [pc, #112]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	60cb      	str	r3, [r1, #12]
 800325e:	e006      	b.n	800326e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	43db      	mvns	r3, r3
 8003268:	4917      	ldr	r1, [pc, #92]	; (80032c8 <HAL_GPIO_Init+0x2d0>)
 800326a:	4013      	ands	r3, r2
 800326c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	3301      	adds	r3, #1
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	f47f aec4 	bne.w	800300c <HAL_GPIO_Init+0x14>
  }
}
 8003284:	bf00      	nop
 8003286:	372c      	adds	r7, #44	; 0x2c
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	10210000 	.word	0x10210000
 8003294:	10110000 	.word	0x10110000
 8003298:	10120000 	.word	0x10120000
 800329c:	10310000 	.word	0x10310000
 80032a0:	10320000 	.word	0x10320000
 80032a4:	10220000 	.word	0x10220000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40010800 	.word	0x40010800
 80032b4:	40010c00 	.word	0x40010c00
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40011400 	.word	0x40011400
 80032c0:	40011800 	.word	0x40011800
 80032c4:	40011c00 	.word	0x40011c00
 80032c8:	40010400 	.word	0x40010400

080032cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
 80032d8:	4613      	mov	r3, r2
 80032da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032dc:	787b      	ldrb	r3, [r7, #1]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032e8:	e003      	b.n	80032f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032ea:	887b      	ldrh	r3, [r7, #2]
 80032ec:	041a      	lsls	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	611a      	str	r2, [r3, #16]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e26c      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8087 	beq.w	800342a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800331c:	4b92      	ldr	r3, [pc, #584]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b04      	cmp	r3, #4
 8003326:	d00c      	beq.n	8003342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003328:	4b8f      	ldr	r3, [pc, #572]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d112      	bne.n	800335a <HAL_RCC_OscConfig+0x5e>
 8003334:	4b8c      	ldr	r3, [pc, #560]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d10b      	bne.n	800335a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003342:	4b89      	ldr	r3, [pc, #548]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d06c      	beq.n	8003428 <HAL_RCC_OscConfig+0x12c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d168      	bne.n	8003428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e246      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x76>
 8003364:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a7f      	ldr	r2, [pc, #508]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e02e      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x98>
 800337a:	4b7b      	ldr	r3, [pc, #492]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a7a      	ldr	r2, [pc, #488]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b78      	ldr	r3, [pc, #480]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a77      	ldr	r2, [pc, #476]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800338c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e01d      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0xbc>
 800339e:	4b72      	ldr	r3, [pc, #456]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a71      	ldr	r2, [pc, #452]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6e      	ldr	r2, [pc, #440]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 80033b8:	4b6b      	ldr	r3, [pc, #428]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a6a      	ldr	r2, [pc, #424]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b68      	ldr	r3, [pc, #416]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a67      	ldr	r2, [pc, #412]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fe fa3c 	bl	8001854 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe fa38 	bl	8001854 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1fa      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	4b5d      	ldr	r3, [pc, #372]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0xe4>
 80033fe:	e014      	b.n	800342a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe fa28 	bl	8001854 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fa24 	bl	8001854 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1e6      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x10c>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d063      	beq.n	80034fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003436:	4b4c      	ldr	r3, [pc, #304]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003442:	4b49      	ldr	r3, [pc, #292]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b08      	cmp	r3, #8
 800344c:	d11c      	bne.n	8003488 <HAL_RCC_OscConfig+0x18c>
 800344e:	4b46      	ldr	r3, [pc, #280]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d116      	bne.n	8003488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	4b43      	ldr	r3, [pc, #268]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_RCC_OscConfig+0x176>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e1ba      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4939      	ldr	r1, [pc, #228]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	e03a      	b.n	80034fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fe f9dd 	bl	8001854 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349e:	f7fe f9d9 	bl	8001854 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e19b      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4927      	ldr	r1, [pc, #156]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]
 80034d0:	e015      	b.n	80034fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d2:	4b26      	ldr	r3, [pc, #152]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fe f9bc 	bl	8001854 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e0:	f7fe f9b8 	bl	8001854 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e17a      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d03a      	beq.n	8003580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d019      	beq.n	8003546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_RCC_OscConfig+0x274>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7fe f99c 	bl	8001854 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003520:	f7fe f998 	bl	8001854 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e15a      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800353e:	2001      	movs	r0, #1
 8003540:	f000 fada 	bl	8003af8 <RCC_Delay>
 8003544:	e01c      	b.n	8003580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_RCC_OscConfig+0x274>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354c:	f7fe f982 	bl	8001854 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003552:	e00f      	b.n	8003574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7fe f97e 	bl	8001854 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d908      	bls.n	8003574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e140      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	42420000 	.word	0x42420000
 8003570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b9e      	ldr	r3, [pc, #632]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e9      	bne.n	8003554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a6 	beq.w	80036da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003592:	4b97      	ldr	r3, [pc, #604]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	4b94      	ldr	r3, [pc, #592]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4a93      	ldr	r2, [pc, #588]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	61d3      	str	r3, [r2, #28]
 80035aa:	4b91      	ldr	r3, [pc, #580]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b8e      	ldr	r3, [pc, #568]	; (80037f4 <HAL_RCC_OscConfig+0x4f8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d118      	bne.n	80035f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c6:	4b8b      	ldr	r3, [pc, #556]	; (80037f4 <HAL_RCC_OscConfig+0x4f8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a8a      	ldr	r2, [pc, #552]	; (80037f4 <HAL_RCC_OscConfig+0x4f8>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d2:	f7fe f93f 	bl	8001854 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035da:	f7fe f93b 	bl	8001854 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0fd      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	4b81      	ldr	r3, [pc, #516]	; (80037f4 <HAL_RCC_OscConfig+0x4f8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x312>
 8003600:	4b7b      	ldr	r3, [pc, #492]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4a7a      	ldr	r2, [pc, #488]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6213      	str	r3, [r2, #32]
 800360c:	e02d      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x334>
 8003616:	4b76      	ldr	r3, [pc, #472]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4a75      	ldr	r2, [pc, #468]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6213      	str	r3, [r2, #32]
 8003622:	4b73      	ldr	r3, [pc, #460]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4a72      	ldr	r2, [pc, #456]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	6213      	str	r3, [r2, #32]
 800362e:	e01c      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b05      	cmp	r3, #5
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_OscConfig+0x356>
 8003638:	4b6d      	ldr	r3, [pc, #436]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4a6c      	ldr	r2, [pc, #432]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800363e:	f043 0304 	orr.w	r3, r3, #4
 8003642:	6213      	str	r3, [r2, #32]
 8003644:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a69      	ldr	r2, [pc, #420]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6213      	str	r3, [r2, #32]
 8003650:	e00b      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 8003652:	4b67      	ldr	r3, [pc, #412]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4a66      	ldr	r2, [pc, #408]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6213      	str	r3, [r2, #32]
 800365e:	4b64      	ldr	r3, [pc, #400]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a63      	ldr	r2, [pc, #396]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003664:	f023 0304 	bic.w	r3, r3, #4
 8003668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d015      	beq.n	800369e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7fe f8ef 	bl	8001854 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe f8eb 	bl	8001854 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0ab      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003690:	4b57      	ldr	r3, [pc, #348]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ee      	beq.n	800367a <HAL_RCC_OscConfig+0x37e>
 800369c:	e014      	b.n	80036c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fe f8d9 	bl	8001854 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	e00a      	b.n	80036bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fe f8d5 	bl	8001854 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e095      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036bc:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ee      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ce:	4b48      	ldr	r3, [pc, #288]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	4a47      	ldr	r2, [pc, #284]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8081 	beq.w	80037e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e4:	4b42      	ldr	r3, [pc, #264]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d061      	beq.n	80037b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d146      	bne.n	8003786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f8:	4b3f      	ldr	r3, [pc, #252]	; (80037f8 <HAL_RCC_OscConfig+0x4fc>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fe:	f7fe f8a9 	bl	8001854 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fe f8a5 	bl	8001854 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e067      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003718:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f0      	bne.n	8003706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d108      	bne.n	8003740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800372e:	4b30      	ldr	r3, [pc, #192]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	492d      	ldr	r1, [pc, #180]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003740:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a19      	ldr	r1, [r3, #32]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	430b      	orrs	r3, r1
 8003752:	4927      	ldr	r1, [pc, #156]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <HAL_RCC_OscConfig+0x4fc>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe f879 	bl	8001854 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe f875 	bl	8001854 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e037      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x46a>
 8003784:	e02f      	b.n	80037e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <HAL_RCC_OscConfig+0x4fc>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe f862 	bl	8001854 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe f85e 	bl	8001854 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e020      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x498>
 80037b2:	e018      	b.n	80037e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e013      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40007000 	.word	0x40007000
 80037f8:	42420060 	.word	0x42420060

080037fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0d0      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d910      	bls.n	8003840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b67      	ldr	r3, [pc, #412]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 0207 	bic.w	r2, r3, #7
 8003826:	4965      	ldr	r1, [pc, #404]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b63      	ldr	r3, [pc, #396]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0b8      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003858:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a58      	ldr	r2, [pc, #352]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003862:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003870:	4b53      	ldr	r3, [pc, #332]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4a52      	ldr	r2, [pc, #328]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800387a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387c:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	494d      	ldr	r1, [pc, #308]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d040      	beq.n	800391c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d115      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e07f      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e073      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	4b3d      	ldr	r3, [pc, #244]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06b      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038da:	4b39      	ldr	r3, [pc, #228]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f023 0203 	bic.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4936      	ldr	r1, [pc, #216]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ec:	f7fd ffb2 	bl	8001854 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	e00a      	b.n	800390a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f4:	f7fd ffae 	bl	8001854 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e053      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 020c 	and.w	r2, r3, #12
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d1eb      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800391c:	4b27      	ldr	r3, [pc, #156]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d210      	bcs.n	800394c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b24      	ldr	r3, [pc, #144]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 0207 	bic.w	r2, r3, #7
 8003932:	4922      	ldr	r1, [pc, #136]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e032      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003958:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4916      	ldr	r1, [pc, #88]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	490e      	ldr	r1, [pc, #56]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800398a:	f000 f821 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 800398e:	4601      	mov	r1, r0
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	fa21 f303 	lsr.w	r3, r1, r3
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <HAL_RCC_ClockConfig+0x1cc>)
 80039a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x1d0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd ff10 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40022000 	.word	0x40022000
 80039c0:	40021000 	.word	0x40021000
 80039c4:	08004af8 	.word	0x08004af8
 80039c8:	20000000 	.word	0x20000000
 80039cc:	20000004 	.word	0x20000004

080039d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d0:	b490      	push	{r4, r7}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039d6:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039d8:	1d3c      	adds	r4, r7, #4
 80039da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039e0:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039fa:	4b23      	ldr	r3, [pc, #140]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d002      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x40>
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCC_GetSysClockFreq+0x46>
 8003a0e:	e02d      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a12:	623b      	str	r3, [r7, #32]
      break;
 8003a14:	e02d      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	0c9b      	lsrs	r3, r3, #18
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a22:	4413      	add	r3, r2
 8003a24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d013      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0c5b      	lsrs	r3, r3, #17
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a42:	4413      	add	r3, r2
 8003a44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4a0f      	ldr	r2, [pc, #60]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a4e:	fb02 f203 	mul.w	r2, r2, r3
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	e004      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4a0c      	ldr	r2, [pc, #48]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a60:	fb02 f303 	mul.w	r3, r2, r3
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	623b      	str	r3, [r7, #32]
      break;
 8003a6a:	e002      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a6e:	623b      	str	r3, [r7, #32]
      break;
 8003a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a72:	6a3b      	ldr	r3, [r7, #32]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3728      	adds	r7, #40	; 0x28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc90      	pop	{r4, r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	08004ad0 	.word	0x08004ad0
 8003a84:	08004ae0 	.word	0x08004ae0
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	007a1200 	.word	0x007a1200
 8003a90:	003d0900 	.word	0x003d0900

08003a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a98:	4b02      	ldr	r3, [pc, #8]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	20000000 	.word	0x20000000

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aac:	f7ff fff2 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4a03      	ldr	r2, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	08004b08 	.word	0x08004b08

08003ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ad4:	f7ff ffde 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4601      	mov	r1, r0
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	0adb      	lsrs	r3, r3, #11
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40021000 	.word	0x40021000
 8003af4:	08004b08 	.word	0x08004b08

08003af8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <RCC_Delay+0x34>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <RCC_Delay+0x38>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0a5b      	lsrs	r3, r3, #9
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b14:	bf00      	nop
  }
  while (Delay --);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1e5a      	subs	r2, r3, #1
 8003b1a:	60fa      	str	r2, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f9      	bne.n	8003b14 <RCC_Delay+0x1c>
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000000 	.word	0x20000000
 8003b30:	10624dd3 	.word	0x10624dd3

08003b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d07d      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b50:	2300      	movs	r3, #0
 8003b52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b54:	4b4f      	ldr	r3, [pc, #316]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10d      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b60:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	4a4b      	ldr	r2, [pc, #300]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	61d3      	str	r3, [r2, #28]
 8003b6c:	4b49      	ldr	r3, [pc, #292]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b46      	ldr	r3, [pc, #280]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d118      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b88:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a42      	ldr	r2, [pc, #264]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b94:	f7fd fe5e 	bl	8001854 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9a:	e008      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9c:	f7fd fe5a 	bl	8001854 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e06d      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bae:	4b3a      	ldr	r3, [pc, #232]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bba:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d02e      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d027      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd8:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003be2:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003be8:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bee:	4a29      	ldr	r2, [pc, #164]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d014      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fe29 	bl	8001854 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fd fe25 	bl	8001854 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e036      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ee      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c28:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4917      	ldr	r1, [pc, #92]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c40:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4a13      	ldr	r2, [pc, #76]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c58:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	490b      	ldr	r1, [pc, #44]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	4904      	ldr	r1, [pc, #16]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	42420440 	.word	0x42420440

08003ca0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b08d      	sub	sp, #52	; 0x34
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ca8:	4b6b      	ldr	r3, [pc, #428]	; (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003caa:	f107 040c 	add.w	r4, r7, #12
 8003cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cb4:	4b69      	ldr	r3, [pc, #420]	; (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	2b0f      	cmp	r3, #15
 8003cd4:	f200 80b6 	bhi.w	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003dc3 	.word	0x08003dc3
 8003ce4:	08003e29 	.word	0x08003e29
 8003ce8:	08003e45 	.word	0x08003e45
 8003cec:	08003db3 	.word	0x08003db3
 8003cf0:	08003e45 	.word	0x08003e45
 8003cf4:	08003e45 	.word	0x08003e45
 8003cf8:	08003e45 	.word	0x08003e45
 8003cfc:	08003dbb 	.word	0x08003dbb
 8003d00:	08003e45 	.word	0x08003e45
 8003d04:	08003e45 	.word	0x08003e45
 8003d08:	08003e45 	.word	0x08003e45
 8003d0c:	08003e45 	.word	0x08003e45
 8003d10:	08003e45 	.word	0x08003e45
 8003d14:	08003e45 	.word	0x08003e45
 8003d18:	08003e45 	.word	0x08003e45
 8003d1c:	08003d21 	.word	0x08003d21
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003d20:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d26:	4b4e      	ldr	r3, [pc, #312]	; (8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 808a 	beq.w	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	0c9b      	lsrs	r3, r3, #18
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d40:	4413      	add	r3, r2
 8003d42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d46:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d018      	beq.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d52:	4b43      	ldr	r3, [pc, #268]	; (8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	0c5b      	lsrs	r3, r3, #17
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d60:	4413      	add	r3, r2
 8003d62:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00d      	beq.n	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d72:	4a3c      	ldr	r2, [pc, #240]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	fb02 f303 	mul.w	r3, r2, r3
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d82:	e004      	b.n	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d8e:	4b34      	ldr	r3, [pc, #208]	; (8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d9a:	d102      	bne.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003da0:	e052      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	4a31      	ldr	r2, [pc, #196]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003db0:	e04a      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003db2:	f7ff fe0d 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 8003db6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003db8:	e049      	b.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003dba:	f7ff fe09 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 8003dbe:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003dc0:	e045      	b.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003dc2:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd2:	d108      	bne.n	8003de6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8003dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de4:	e01f      	b.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df0:	d109      	bne.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003df2:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8003dfe:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e04:	e00f      	b.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e10:	d11c      	bne.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003e12:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d016      	beq.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8003e1e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003e24:	e012      	b.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003e26:	e011      	b.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e28:	f7ff fe52 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	0b9b      	lsrs	r3, r3, #14
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	3301      	adds	r3, #1
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e42:	e004      	b.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8003e44:	bf00      	nop
 8003e46:	e002      	b.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8003e4c:	bf00      	nop
    }
  }
  return (frequency);
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3734      	adds	r7, #52	; 0x34
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	08004ae4 	.word	0x08004ae4
 8003e5c:	08004af4 	.word	0x08004af4
 8003e60:	40021000 	.word	0x40021000
 8003e64:	007a1200 	.word	0x007a1200
 8003e68:	003d0900 	.word	0x003d0900
 8003e6c:	aaaaaaab 	.word	0xaaaaaaab

08003e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e03f      	b.n	8003f02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fd fb8a 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2224      	movs	r2, #36	; 0x24
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fcff 	bl	80048b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	4613      	mov	r3, r2
 8003f16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d11d      	bne.n	8003f60 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_UART_Receive_DMA+0x26>
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e016      	b.n	8003f62 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Receive_DMA+0x38>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e00f      	b.n	8003f62 <HAL_UART_Receive_DMA+0x58>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fae4 	bl	8004524 <UART_Start_Receive_DMA>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	e000      	b.n	8003f62 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b21      	cmp	r3, #33	; 0x21
 8003f96:	d116      	bne.n	8003fc6 <HAL_UART_DMAStop+0x5c>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d013      	beq.n	8003fc6 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fac:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fc6f 	bl	800289e <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fb13 	bl	80045ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b22      	cmp	r3, #34	; 0x22
 8003fe6:	d116      	bne.n	8004016 <HAL_UART_DMAStop+0xac>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d013      	beq.n	8004016 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe fc47 	bl	800289e <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fb00 	bl	8004616 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004040:	2300      	movs	r3, #0
 8004042:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10d      	bne.n	8004072 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_UART_IRQHandler+0x52>
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fb7a 	bl	8004764 <UART_Receive_IT>
      return;
 8004070:	e17c      	b.n	800436c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80b1 	beq.w	80041dc <HAL_UART_IRQHandler+0x1bc>
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d105      	bne.n	8004090 <HAL_UART_IRQHandler+0x70>
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80a6 	beq.w	80041dc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_UART_IRQHandler+0x90>
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	f043 0201 	orr.w	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_UART_IRQHandler+0xb0>
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	f043 0202 	orr.w	r2, r3, #2
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_UART_IRQHandler+0xd0>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f043 0204 	orr.w	r2, r3, #4
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00f      	beq.n	800411a <HAL_UART_IRQHandler+0xfa>
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <HAL_UART_IRQHandler+0xee>
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f043 0208 	orr.w	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 811f 	beq.w	8004362 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <HAL_UART_IRQHandler+0x11e>
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fb13 	bl	8004764 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf14      	ite	ne
 800414c:	2301      	movne	r3, #1
 800414e:	2300      	moveq	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d102      	bne.n	8004166 <HAL_UART_IRQHandler+0x146>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d031      	beq.n	80041ca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa55 	bl	8004616 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d023      	beq.n	80041c2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004188:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	2b00      	cmp	r3, #0
 8004190:	d013      	beq.n	80041ba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	4a77      	ldr	r2, [pc, #476]	; (8004374 <HAL_UART_IRQHandler+0x354>)
 8004198:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fbb8 	bl	8002914 <HAL_DMA_Abort_IT>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041b4:	4610      	mov	r0, r2
 80041b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	e00e      	b.n	80041d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8ee 	bl	800439c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	e00a      	b.n	80041d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f8ea 	bl	800439c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	e006      	b.n	80041d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f8e6 	bl	800439c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041d6:	e0c4      	b.n	8004362 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	bf00      	nop
    return;
 80041da:	e0c2      	b.n	8004362 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	f040 80a1 	bne.w	8004328 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 809b 	beq.w	8004328 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8095 	beq.w	8004328 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d04e      	beq.n	80042c0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800422c:	8a3b      	ldrh	r3, [r7, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8099 	beq.w	8004366 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004238:	8a3a      	ldrh	r2, [r7, #16]
 800423a:	429a      	cmp	r2, r3
 800423c:	f080 8093 	bcs.w	8004366 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8a3a      	ldrh	r2, [r7, #16]
 8004244:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b20      	cmp	r3, #32
 800424e:	d02b      	beq.n	80042a8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800425e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800427e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0210 	bic.w	r2, r2, #16
 800429c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe fafb 	bl	800289e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4619      	mov	r1, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f878 	bl	80043ae <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042be:	e052      	b.n	8004366 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d048      	beq.n	800436a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80042d8:	8a7b      	ldrh	r3, [r7, #18]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d045      	beq.n	800436a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042ec:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0210 	bic.w	r2, r2, #16
 800431a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800431c:	8a7b      	ldrh	r3, [r7, #18]
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f844 	bl	80043ae <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004326:	e020      	b.n	800436a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <HAL_UART_IRQHandler+0x324>
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f9aa 	bl	8004696 <UART_Transmit_IT>
    return;
 8004342:	e013      	b.n	800436c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00e      	beq.n	800436c <HAL_UART_IRQHandler+0x34c>
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d009      	beq.n	800436c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f9eb 	bl	8004734 <UART_EndTransmit_IT>
    return;
 800435e:	bf00      	nop
 8004360:	e004      	b.n	800436c <HAL_UART_IRQHandler+0x34c>
    return;
 8004362:	bf00      	nop
 8004364:	e002      	b.n	800436c <HAL_UART_IRQHandler+0x34c>
      return;
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <HAL_UART_IRQHandler+0x34c>
      return;
 800436a:	bf00      	nop
  }
}
 800436c:	3728      	adds	r7, #40	; 0x28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	0800466f 	.word	0x0800466f

08004378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	460b      	mov	r3, r1
 80043b8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d12a      	bne.n	8004436 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043f4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004414:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	2b01      	cmp	r3, #1
 8004424:	d107      	bne.n	8004436 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0210 	bic.w	r2, r2, #16
 8004434:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	2b01      	cmp	r3, #1
 800443c:	d106      	bne.n	800444c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004442:	4619      	mov	r1, r3
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7ff ffb2 	bl	80043ae <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800444a:	e002      	b.n	8004452 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7fc fb27 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	2b01      	cmp	r3, #1
 800446e:	d108      	bne.n	8004482 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	b29b      	uxth	r3, r3
 8004478:	4619      	mov	r1, r3
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f7ff ff97 	bl	80043ae <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004480:	e002      	b.n	8004488 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff ff81 	bl	800438a <HAL_UART_RxHalfCpltCallback>
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b21      	cmp	r3, #33	; 0x21
 80044c2:	d108      	bne.n	80044d6 <UART_DMAError+0x46>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2200      	movs	r2, #0
 80044ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80044d0:	68b8      	ldr	r0, [r7, #8]
 80044d2:	f000 f88b 	bl	80045ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b22      	cmp	r3, #34	; 0x22
 80044f6:	d108      	bne.n	800450a <UART_DMAError+0x7a>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2200      	movs	r2, #0
 8004502:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004504:	68b8      	ldr	r0, [r7, #8]
 8004506:	f000 f886 	bl	8004616 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f043 0210 	orr.w	r2, r3, #16
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004516:	68b8      	ldr	r0, [r7, #8]
 8004518:	f7ff ff40 	bl	800439c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2222      	movs	r2, #34	; 0x22
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <UART_Start_Receive_DMA+0xbc>)
 8004552:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	4a22      	ldr	r2, [pc, #136]	; (80045e4 <UART_Start_Receive_DMA+0xc0>)
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	4a21      	ldr	r2, [pc, #132]	; (80045e8 <UART_Start_Receive_DMA+0xc4>)
 8004562:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	2200      	movs	r2, #0
 800456a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800456c:	f107 0308 	add.w	r3, r7, #8
 8004570:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	f7fe f92c 	bl	80027e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	080043c5 	.word	0x080043c5
 80045e4:	0800445b 	.word	0x0800445b
 80045e8:	08004491 	.word	0x08004491

080045ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004602:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800462c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695a      	ldr	r2, [r3, #20]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	2b01      	cmp	r3, #1
 8004644:	d107      	bne.n	8004656 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0210 	bic.w	r2, r2, #16
 8004654:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff fe87 	bl	800439c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b21      	cmp	r3, #33	; 0x21
 80046a8:	d13e      	bne.n	8004728 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b2:	d114      	bne.n	80046de <UART_Transmit_IT+0x48>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d110      	bne.n	80046de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	1c9a      	adds	r2, r3, #2
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	621a      	str	r2, [r3, #32]
 80046dc:	e008      	b.n	80046f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	1c59      	adds	r1, r3, #1
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6211      	str	r1, [r2, #32]
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4619      	mov	r1, r3
 80046fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10f      	bne.n	8004724 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004712:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004722:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr

08004734 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fe0f 	bl	8004378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b22      	cmp	r3, #34	; 0x22
 8004776:	f040 8099 	bne.w	80048ac <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004782:	d117      	bne.n	80047b4 <UART_Receive_IT+0x50>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d113      	bne.n	80047b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	1c9a      	adds	r2, r3, #2
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	629a      	str	r2, [r3, #40]	; 0x28
 80047b2:	e026      	b.n	8004802 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c6:	d007      	beq.n	80047d8 <UART_Receive_IT+0x74>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <UART_Receive_IT+0x82>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	e008      	b.n	80047f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4619      	mov	r1, r3
 8004810:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004812:	2b00      	cmp	r3, #0
 8004814:	d148      	bne.n	80048a8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0220 	bic.w	r2, r2, #32
 8004824:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004834:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	2b01      	cmp	r3, #1
 8004854:	d123      	bne.n	800489e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0210 	bic.w	r2, r2, #16
 800486a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b10      	cmp	r3, #16
 8004878:	d10a      	bne.n	8004890 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fd89 	bl	80043ae <HAL_UARTEx_RxEventCallback>
 800489c:	e002      	b.n	80048a4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc f8fe 	bl	8000aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e002      	b.n	80048ae <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048f2:	f023 030c 	bic.w	r3, r3, #12
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	430b      	orrs	r3, r1
 80048fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2c      	ldr	r2, [pc, #176]	; (80049cc <UART_SetConfig+0x114>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d103      	bne.n	8004928 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004920:	f7ff f8d6 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	e002      	b.n	800492e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004928:	f7ff f8be 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 800492c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009a      	lsls	r2, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <UART_SetConfig+0x118>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	0119      	lsls	r1, r3, #4
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009a      	lsls	r2, r3, #2
 8004958:	441a      	add	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	fbb2 f2f3 	udiv	r2, r2, r3
 8004964:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <UART_SetConfig+0x118>)
 8004966:	fba3 0302 	umull	r0, r3, r3, r2
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	2064      	movs	r0, #100	; 0x64
 800496e:	fb00 f303 	mul.w	r3, r0, r3
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	3332      	adds	r3, #50	; 0x32
 8004978:	4a15      	ldr	r2, [pc, #84]	; (80049d0 <UART_SetConfig+0x118>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004984:	4419      	add	r1, r3
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009a      	lsls	r2, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	fbb2 f2f3 	udiv	r2, r2, r3
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <UART_SetConfig+0x118>)
 800499e:	fba3 0302 	umull	r0, r3, r3, r2
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2064      	movs	r0, #100	; 0x64
 80049a6:	fb00 f303 	mul.w	r3, r0, r3
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	3332      	adds	r3, #50	; 0x32
 80049b0:	4a07      	ldr	r2, [pc, #28]	; (80049d0 <UART_SetConfig+0x118>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	f003 020f 	and.w	r2, r3, #15
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	440a      	add	r2, r1
 80049c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40013800 	.word	0x40013800
 80049d0:	51eb851f 	.word	0x51eb851f

080049d4 <__libc_init_array>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	2500      	movs	r5, #0
 80049d8:	4e0c      	ldr	r6, [pc, #48]	; (8004a0c <__libc_init_array+0x38>)
 80049da:	4c0d      	ldr	r4, [pc, #52]	; (8004a10 <__libc_init_array+0x3c>)
 80049dc:	1ba4      	subs	r4, r4, r6
 80049de:	10a4      	asrs	r4, r4, #2
 80049e0:	42a5      	cmp	r5, r4
 80049e2:	d109      	bne.n	80049f8 <__libc_init_array+0x24>
 80049e4:	f000 f868 	bl	8004ab8 <_init>
 80049e8:	2500      	movs	r5, #0
 80049ea:	4e0a      	ldr	r6, [pc, #40]	; (8004a14 <__libc_init_array+0x40>)
 80049ec:	4c0a      	ldr	r4, [pc, #40]	; (8004a18 <__libc_init_array+0x44>)
 80049ee:	1ba4      	subs	r4, r4, r6
 80049f0:	10a4      	asrs	r4, r4, #2
 80049f2:	42a5      	cmp	r5, r4
 80049f4:	d105      	bne.n	8004a02 <__libc_init_array+0x2e>
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049fc:	4798      	blx	r3
 80049fe:	3501      	adds	r5, #1
 8004a00:	e7ee      	b.n	80049e0 <__libc_init_array+0xc>
 8004a02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a06:	4798      	blx	r3
 8004a08:	3501      	adds	r5, #1
 8004a0a:	e7f2      	b.n	80049f2 <__libc_init_array+0x1e>
 8004a0c:	08004b10 	.word	0x08004b10
 8004a10:	08004b10 	.word	0x08004b10
 8004a14:	08004b10 	.word	0x08004b10
 8004a18:	08004b14 	.word	0x08004b14

08004a1c <memset>:
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4402      	add	r2, r0
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d100      	bne.n	8004a26 <memset+0xa>
 8004a24:	4770      	bx	lr
 8004a26:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2a:	e7f9      	b.n	8004a20 <memset+0x4>

08004a2c <round>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004a32:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8004a36:	2c13      	cmp	r4, #19
 8004a38:	4606      	mov	r6, r0
 8004a3a:	460d      	mov	r5, r1
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	468c      	mov	ip, r1
 8004a40:	4602      	mov	r2, r0
 8004a42:	dc17      	bgt.n	8004a74 <round+0x48>
 8004a44:	2c00      	cmp	r4, #0
 8004a46:	da09      	bge.n	8004a5c <round+0x30>
 8004a48:	3401      	adds	r4, #1
 8004a4a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004a4e:	d103      	bne.n	8004a58 <round+0x2c>
 8004a50:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004a54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004a58:	2200      	movs	r2, #0
 8004a5a:	e028      	b.n	8004aae <round+0x82>
 8004a5c:	4915      	ldr	r1, [pc, #84]	; (8004ab4 <round+0x88>)
 8004a5e:	4121      	asrs	r1, r4
 8004a60:	420d      	tst	r5, r1
 8004a62:	d100      	bne.n	8004a66 <round+0x3a>
 8004a64:	b178      	cbz	r0, 8004a86 <round+0x5a>
 8004a66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a6a:	4123      	asrs	r3, r4
 8004a6c:	4463      	add	r3, ip
 8004a6e:	ea23 0301 	bic.w	r3, r3, r1
 8004a72:	e7f1      	b.n	8004a58 <round+0x2c>
 8004a74:	2c33      	cmp	r4, #51	; 0x33
 8004a76:	dd09      	ble.n	8004a8c <round+0x60>
 8004a78:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004a7c:	d103      	bne.n	8004a86 <round+0x5a>
 8004a7e:	f7fb fbd7 	bl	8000230 <__adddf3>
 8004a82:	4606      	mov	r6, r0
 8004a84:	460d      	mov	r5, r1
 8004a86:	4630      	mov	r0, r6
 8004a88:	4629      	mov	r1, r5
 8004a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004a94:	40f8      	lsrs	r0, r7
 8004a96:	4206      	tst	r6, r0
 8004a98:	d0f5      	beq.n	8004a86 <round+0x5a>
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004aa0:	fa01 f404 	lsl.w	r4, r1, r4
 8004aa4:	1932      	adds	r2, r6, r4
 8004aa6:	bf28      	it	cs
 8004aa8:	185b      	addcs	r3, r3, r1
 8004aaa:	ea22 0200 	bic.w	r2, r2, r0
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	e7e6      	b.n	8004a82 <round+0x56>
 8004ab4:	000fffff 	.word	0x000fffff

08004ab8 <_init>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr

08004ac4 <_fini>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	bf00      	nop
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr
