
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005038  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800525c  0800525c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800525c  0800525c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800525c  0800525c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800525c  0800525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005260  08005260  00015260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  08005270  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08005270  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7f9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020e2  00000000  00000000  0002d82e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e08  00000000  00000000  0002f910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  00030718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a4d8  00000000  00000000  00031438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4e1  00000000  00000000  0004b910  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009db45  00000000  00000000  00057df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b60  00000000  00000000  000f59b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08005204 	.word	0x08005204

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08005204 	.word	0x08005204

08000224 <__aeabi_drsub>:
 8000224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__adddf3>
 800022a:	bf00      	nop

0800022c <__aeabi_dsub>:
 800022c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000230 <__adddf3>:
 8000230:	b530      	push	{r4, r5, lr}
 8000232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023a:	ea94 0f05 	teq	r4, r5
 800023e:	bf08      	it	eq
 8000240:	ea90 0f02 	teqeq	r0, r2
 8000244:	bf1f      	itttt	ne
 8000246:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000256:	f000 80e2 	beq.w	800041e <__adddf3+0x1ee>
 800025a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000262:	bfb8      	it	lt
 8000264:	426d      	neglt	r5, r5
 8000266:	dd0c      	ble.n	8000282 <__adddf3+0x52>
 8000268:	442c      	add	r4, r5
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	ea82 0000 	eor.w	r0, r2, r0
 8000276:	ea83 0101 	eor.w	r1, r3, r1
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	2d36      	cmp	r5, #54	; 0x36
 8000284:	bf88      	it	hi
 8000286:	bd30      	pophi	{r4, r5, pc}
 8000288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800028c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x70>
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x84>
 80002ae:	4252      	negs	r2, r2
 80002b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b4:	ea94 0f05 	teq	r4, r5
 80002b8:	f000 80a7 	beq.w	800040a <__adddf3+0x1da>
 80002bc:	f1a4 0401 	sub.w	r4, r4, #1
 80002c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c4:	db0d      	blt.n	80002e2 <__adddf3+0xb2>
 80002c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ca:	fa22 f205 	lsr.w	r2, r2, r5
 80002ce:	1880      	adds	r0, r0, r2
 80002d0:	f141 0100 	adc.w	r1, r1, #0
 80002d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d8:	1880      	adds	r0, r0, r2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	4159      	adcs	r1, r3
 80002e0:	e00e      	b.n	8000300 <__adddf3+0xd0>
 80002e2:	f1a5 0520 	sub.w	r5, r5, #32
 80002e6:	f10e 0e20 	add.w	lr, lr, #32
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f0:	bf28      	it	cs
 80002f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	18c0      	adds	r0, r0, r3
 80002fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	d507      	bpl.n	8000316 <__adddf3+0xe6>
 8000306:	f04f 0e00 	mov.w	lr, #0
 800030a:	f1dc 0c00 	rsbs	ip, ip, #0
 800030e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000312:	eb6e 0101 	sbc.w	r1, lr, r1
 8000316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031a:	d31b      	bcc.n	8000354 <__adddf3+0x124>
 800031c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000320:	d30c      	bcc.n	800033c <__adddf3+0x10c>
 8000322:	0849      	lsrs	r1, r1, #1
 8000324:	ea5f 0030 	movs.w	r0, r0, rrx
 8000328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800032c:	f104 0401 	add.w	r4, r4, #1
 8000330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000338:	f080 809a 	bcs.w	8000470 <__adddf3+0x240>
 800033c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000340:	bf08      	it	eq
 8000342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000346:	f150 0000 	adcs.w	r0, r0, #0
 800034a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034e:	ea41 0105 	orr.w	r1, r1, r5
 8000352:	bd30      	pop	{r4, r5, pc}
 8000354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000358:	4140      	adcs	r0, r0
 800035a:	eb41 0101 	adc.w	r1, r1, r1
 800035e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000362:	f1a4 0401 	sub.w	r4, r4, #1
 8000366:	d1e9      	bne.n	800033c <__adddf3+0x10c>
 8000368:	f091 0f00 	teq	r1, #0
 800036c:	bf04      	itt	eq
 800036e:	4601      	moveq	r1, r0
 8000370:	2000      	moveq	r0, #0
 8000372:	fab1 f381 	clz	r3, r1
 8000376:	bf08      	it	eq
 8000378:	3320      	addeq	r3, #32
 800037a:	f1a3 030b 	sub.w	r3, r3, #11
 800037e:	f1b3 0220 	subs.w	r2, r3, #32
 8000382:	da0c      	bge.n	800039e <__adddf3+0x16e>
 8000384:	320c      	adds	r2, #12
 8000386:	dd08      	ble.n	800039a <__adddf3+0x16a>
 8000388:	f102 0c14 	add.w	ip, r2, #20
 800038c:	f1c2 020c 	rsb	r2, r2, #12
 8000390:	fa01 f00c 	lsl.w	r0, r1, ip
 8000394:	fa21 f102 	lsr.w	r1, r1, r2
 8000398:	e00c      	b.n	80003b4 <__adddf3+0x184>
 800039a:	f102 0214 	add.w	r2, r2, #20
 800039e:	bfd8      	it	le
 80003a0:	f1c2 0c20 	rsble	ip, r2, #32
 80003a4:	fa01 f102 	lsl.w	r1, r1, r2
 80003a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ac:	bfdc      	itt	le
 80003ae:	ea41 010c 	orrle.w	r1, r1, ip
 80003b2:	4090      	lslle	r0, r2
 80003b4:	1ae4      	subs	r4, r4, r3
 80003b6:	bfa2      	ittt	ge
 80003b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003bc:	4329      	orrge	r1, r5
 80003be:	bd30      	popge	{r4, r5, pc}
 80003c0:	ea6f 0404 	mvn.w	r4, r4
 80003c4:	3c1f      	subs	r4, #31
 80003c6:	da1c      	bge.n	8000402 <__adddf3+0x1d2>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc0e      	bgt.n	80003ea <__adddf3+0x1ba>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0220 	rsb	r2, r4, #32
 80003d4:	fa20 f004 	lsr.w	r0, r0, r4
 80003d8:	fa01 f302 	lsl.w	r3, r1, r2
 80003dc:	ea40 0003 	orr.w	r0, r0, r3
 80003e0:	fa21 f304 	lsr.w	r3, r1, r4
 80003e4:	ea45 0103 	orr.w	r1, r5, r3
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f1c4 040c 	rsb	r4, r4, #12
 80003ee:	f1c4 0220 	rsb	r2, r4, #32
 80003f2:	fa20 f002 	lsr.w	r0, r0, r2
 80003f6:	fa01 f304 	lsl.w	r3, r1, r4
 80003fa:	ea40 0003 	orr.w	r0, r0, r3
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	fa21 f004 	lsr.w	r0, r1, r4
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f094 0f00 	teq	r4, #0
 800040e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000412:	bf06      	itte	eq
 8000414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000418:	3401      	addeq	r4, #1
 800041a:	3d01      	subne	r5, #1
 800041c:	e74e      	b.n	80002bc <__adddf3+0x8c>
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf18      	it	ne
 8000424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000428:	d029      	beq.n	800047e <__adddf3+0x24e>
 800042a:	ea94 0f05 	teq	r4, r5
 800042e:	bf08      	it	eq
 8000430:	ea90 0f02 	teqeq	r0, r2
 8000434:	d005      	beq.n	8000442 <__adddf3+0x212>
 8000436:	ea54 0c00 	orrs.w	ip, r4, r0
 800043a:	bf04      	itt	eq
 800043c:	4619      	moveq	r1, r3
 800043e:	4610      	moveq	r0, r2
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea91 0f03 	teq	r1, r3
 8000446:	bf1e      	ittt	ne
 8000448:	2100      	movne	r1, #0
 800044a:	2000      	movne	r0, #0
 800044c:	bd30      	popne	{r4, r5, pc}
 800044e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000452:	d105      	bne.n	8000460 <__adddf3+0x230>
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	4149      	adcs	r1, r1
 8000458:	bf28      	it	cs
 800045a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000464:	bf3c      	itt	cc
 8000466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046a:	bd30      	popcc	{r4, r5, pc}
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf1a      	itte	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4610      	movne	r0, r2
 8000488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800048c:	bf1c      	itt	ne
 800048e:	460b      	movne	r3, r1
 8000490:	4602      	movne	r2, r0
 8000492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000496:	bf06      	itte	eq
 8000498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800049c:	ea91 0f03 	teqeq	r1, r3
 80004a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	bf00      	nop

080004a8 <__aeabi_ui2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f04f 0500 	mov.w	r5, #0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e750      	b.n	8000368 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e0:	bf48      	it	mi
 80004e2:	4240      	negmi	r0, r0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e73e      	b.n	8000368 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_f2d>:
 80004ec:	0042      	lsls	r2, r0, #1
 80004ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fa:	bf1f      	itttt	ne
 80004fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000508:	4770      	bxne	lr
 800050a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050e:	bf08      	it	eq
 8000510:	4770      	bxeq	lr
 8000512:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000516:	bf04      	itt	eq
 8000518:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e71c      	b.n	8000368 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aed8 	beq.w	8000316 <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6bd      	b.n	8000316 <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_dmul>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005aa:	bf1d      	ittte	ne
 80005ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b0:	ea94 0f0c 	teqne	r4, ip
 80005b4:	ea95 0f0c 	teqne	r5, ip
 80005b8:	f000 f8de 	bleq	8000778 <__aeabi_dmul+0x1dc>
 80005bc:	442c      	add	r4, r5
 80005be:	ea81 0603 	eor.w	r6, r1, r3
 80005c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ce:	bf18      	it	ne
 80005d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005dc:	d038      	beq.n	8000650 <__aeabi_dmul+0xb4>
 80005de:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e2:	f04f 0500 	mov.w	r5, #0
 80005e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f2:	f04f 0600 	mov.w	r6, #0
 80005f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fa:	f09c 0f00 	teq	ip, #0
 80005fe:	bf18      	it	ne
 8000600:	f04e 0e01 	orrne.w	lr, lr, #1
 8000604:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800060c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000610:	d204      	bcs.n	800061c <__aeabi_dmul+0x80>
 8000612:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000616:	416d      	adcs	r5, r5
 8000618:	eb46 0606 	adc.w	r6, r6, r6
 800061c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000620:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000624:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000628:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800062c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000630:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000634:	bf88      	it	hi
 8000636:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063a:	d81e      	bhi.n	800067a <__aeabi_dmul+0xde>
 800063c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000654:	ea46 0101 	orr.w	r1, r6, r1
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	ea81 0103 	eor.w	r1, r1, r3
 8000660:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000664:	bfc2      	ittt	gt
 8000666:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066e:	bd70      	popgt	{r4, r5, r6, pc}
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f04f 0e00 	mov.w	lr, #0
 8000678:	3c01      	subs	r4, #1
 800067a:	f300 80ab 	bgt.w	80007d4 <__aeabi_dmul+0x238>
 800067e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000682:	bfde      	ittt	le
 8000684:	2000      	movle	r0, #0
 8000686:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd70      	pople	{r4, r5, r6, pc}
 800068c:	f1c4 0400 	rsb	r4, r4, #0
 8000690:	3c20      	subs	r4, #32
 8000692:	da35      	bge.n	8000700 <__aeabi_dmul+0x164>
 8000694:	340c      	adds	r4, #12
 8000696:	dc1b      	bgt.n	80006d0 <__aeabi_dmul+0x134>
 8000698:	f104 0414 	add.w	r4, r4, #20
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f305 	lsl.w	r3, r0, r5
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	fa21 f604 	lsr.w	r6, r1, r4
 80006c0:	eb42 0106 	adc.w	r1, r2, r6
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 040c 	rsb	r4, r4, #12
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f304 	lsl.w	r3, r0, r4
 80006dc:	fa20 f005 	lsr.w	r0, r0, r5
 80006e0:	fa01 f204 	lsl.w	r2, r1, r4
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f0:	f141 0100 	adc.w	r1, r1, #0
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f205 	lsl.w	r2, r0, r5
 8000708:	ea4e 0e02 	orr.w	lr, lr, r2
 800070c:	fa20 f304 	lsr.w	r3, r0, r4
 8000710:	fa01 f205 	lsl.w	r2, r1, r5
 8000714:	ea43 0302 	orr.w	r3, r3, r2
 8000718:	fa21 f004 	lsr.w	r0, r1, r4
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	fa21 f204 	lsr.w	r2, r1, r4
 8000724:	ea20 0002 	bic.w	r0, r0, r2
 8000728:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000730:	bf08      	it	eq
 8000732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f094 0f00 	teq	r4, #0
 800073c:	d10f      	bne.n	800075e <__aeabi_dmul+0x1c2>
 800073e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000742:	0040      	lsls	r0, r0, #1
 8000744:	eb41 0101 	adc.w	r1, r1, r1
 8000748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3c01      	subeq	r4, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1a6>
 8000752:	ea41 0106 	orr.w	r1, r1, r6
 8000756:	f095 0f00 	teq	r5, #0
 800075a:	bf18      	it	ne
 800075c:	4770      	bxne	lr
 800075e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	eb43 0303 	adc.w	r3, r3, r3
 8000768:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3d01      	subeq	r5, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1c6>
 8000772:	ea43 0306 	orr.w	r3, r3, r6
 8000776:	4770      	bx	lr
 8000778:	ea94 0f0c 	teq	r4, ip
 800077c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000780:	bf18      	it	ne
 8000782:	ea95 0f0c 	teqne	r5, ip
 8000786:	d00c      	beq.n	80007a2 <__aeabi_dmul+0x206>
 8000788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078c:	bf18      	it	ne
 800078e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000792:	d1d1      	bne.n	8000738 <__aeabi_dmul+0x19c>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a6:	bf06      	itte	eq
 80007a8:	4610      	moveq	r0, r2
 80007aa:	4619      	moveq	r1, r3
 80007ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b0:	d019      	beq.n	80007e6 <__aeabi_dmul+0x24a>
 80007b2:	ea94 0f0c 	teq	r4, ip
 80007b6:	d102      	bne.n	80007be <__aeabi_dmul+0x222>
 80007b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007bc:	d113      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007be:	ea95 0f0c 	teq	r5, ip
 80007c2:	d105      	bne.n	80007d0 <__aeabi_dmul+0x234>
 80007c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c8:	bf1c      	itt	ne
 80007ca:	4610      	movne	r0, r2
 80007cc:	4619      	movne	r1, r3
 80007ce:	d10a      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ee:	bd70      	pop	{r4, r5, r6, pc}

080007f0 <__aeabi_ddiv>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fe:	bf1d      	ittte	ne
 8000800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000804:	ea94 0f0c 	teqne	r4, ip
 8000808:	ea95 0f0c 	teqne	r5, ip
 800080c:	f000 f8a7 	bleq	800095e <__aeabi_ddiv+0x16e>
 8000810:	eba4 0405 	sub.w	r4, r4, r5
 8000814:	ea81 0e03 	eor.w	lr, r1, r3
 8000818:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800081c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000820:	f000 8088 	beq.w	8000934 <__aeabi_ddiv+0x144>
 8000824:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000828:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800082c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000834:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000838:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800083c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000840:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000844:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000848:	429d      	cmp	r5, r3
 800084a:	bf08      	it	eq
 800084c:	4296      	cmpeq	r6, r2
 800084e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000852:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000856:	d202      	bcs.n	800085e <__aeabi_ddiv+0x6e>
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	1ab6      	subs	r6, r6, r2
 8000860:	eb65 0503 	sbc.w	r5, r5, r3
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 000c 	orrcs.w	r0, r0, ip
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008cc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d0:	d018      	beq.n	8000904 <__aeabi_ddiv+0x114>
 80008d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008da:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ee:	d1c0      	bne.n	8000872 <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	d10b      	bne.n	800090e <__aeabi_ddiv+0x11e>
 80008f6:	ea41 0100 	orr.w	r1, r1, r0
 80008fa:	f04f 0000 	mov.w	r0, #0
 80008fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000902:	e7b6      	b.n	8000872 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	bf04      	itt	eq
 800090a:	4301      	orreq	r1, r0
 800090c:	2000      	moveq	r0, #0
 800090e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000912:	bf88      	it	hi
 8000914:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000918:	f63f aeaf 	bhi.w	800067a <__aeabi_dmul+0xde>
 800091c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000920:	bf04      	itt	eq
 8000922:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092a:	f150 0000 	adcs.w	r0, r0, #0
 800092e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000938:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800093c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000940:	bfc2      	ittt	gt
 8000942:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094a:	bd70      	popgt	{r4, r5, r6, pc}
 800094c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000950:	f04f 0e00 	mov.w	lr, #0
 8000954:	3c01      	subs	r4, #1
 8000956:	e690      	b.n	800067a <__aeabi_dmul+0xde>
 8000958:	ea45 0e06 	orr.w	lr, r5, r6
 800095c:	e68d      	b.n	800067a <__aeabi_dmul+0xde>
 800095e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000962:	ea94 0f0c 	teq	r4, ip
 8000966:	bf08      	it	eq
 8000968:	ea95 0f0c 	teqeq	r5, ip
 800096c:	f43f af3b 	beq.w	80007e6 <__aeabi_dmul+0x24a>
 8000970:	ea94 0f0c 	teq	r4, ip
 8000974:	d10a      	bne.n	800098c <__aeabi_ddiv+0x19c>
 8000976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097a:	f47f af34 	bne.w	80007e6 <__aeabi_dmul+0x24a>
 800097e:	ea95 0f0c 	teq	r5, ip
 8000982:	f47f af25 	bne.w	80007d0 <__aeabi_dmul+0x234>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e72c      	b.n	80007e6 <__aeabi_dmul+0x24a>
 800098c:	ea95 0f0c 	teq	r5, ip
 8000990:	d106      	bne.n	80009a0 <__aeabi_ddiv+0x1b0>
 8000992:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000996:	f43f aefd 	beq.w	8000794 <__aeabi_dmul+0x1f8>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e722      	b.n	80007e6 <__aeabi_dmul+0x24a>
 80009a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009aa:	f47f aec5 	bne.w	8000738 <__aeabi_dmul+0x19c>
 80009ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b2:	f47f af0d 	bne.w	80007d0 <__aeabi_dmul+0x234>
 80009b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ba:	f47f aeeb 	bne.w	8000794 <__aeabi_dmul+0x1f8>
 80009be:	e712      	b.n	80007e6 <__aeabi_dmul+0x24a>

080009c0 <__aeabi_d2uiz>:
 80009c0:	004a      	lsls	r2, r1, #1
 80009c2:	d211      	bcs.n	80009e8 <__aeabi_d2uiz+0x28>
 80009c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c8:	d211      	bcs.n	80009ee <__aeabi_d2uiz+0x2e>
 80009ca:	d50d      	bpl.n	80009e8 <__aeabi_d2uiz+0x28>
 80009cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d4:	d40e      	bmi.n	80009f4 <__aeabi_d2uiz+0x34>
 80009d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f2:	d102      	bne.n	80009fa <__aeabi_d2uiz+0x3a>
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	4770      	bx	lr
 80009fa:	f04f 0000 	mov.w	r0, #0
 80009fe:	4770      	bx	lr

08000a00 <__aeabi_d2f>:
 8000a00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a08:	bf24      	itt	cs
 8000a0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a12:	d90d      	bls.n	8000a30 <__aeabi_d2f+0x30>
 8000a14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a28:	bf08      	it	eq
 8000a2a:	f020 0001 	biceq.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a34:	d121      	bne.n	8000a7a <__aeabi_d2f+0x7a>
 8000a36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3a:	bfbc      	itt	lt
 8000a3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	4770      	bxlt	lr
 8000a42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4a:	f1c2 0218 	rsb	r2, r2, #24
 8000a4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a56:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	f040 0001 	orrne.w	r0, r0, #1
 8000a60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a6c:	ea40 000c 	orr.w	r0, r0, ip
 8000a70:	fa23 f302 	lsr.w	r3, r3, r2
 8000a74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a78:	e7cc      	b.n	8000a14 <__aeabi_d2f+0x14>
 8000a7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7e:	d107      	bne.n	8000a90 <__aeabi_d2f+0x90>
 8000a80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a84:	bf1e      	ittt	ne
 8000a86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8e:	4770      	bxne	lr
 8000a90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <HAL_UART_RxCpltCallback>:
	AD_RES[1] = HAL_ADC_GetValue(&hadc1);
	if(AD_RES[1]<100) flag_1=1;

}*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	chenge_Data = 1;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_UART_RxCpltCallback+0x18>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20000034 	.word	0x20000034

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f000 ff39 	bl	8001938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 f94f 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
	//ADC_ChannelConfTypeDef sConfig = {0};
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f000 fa99 	bl	8001000 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ace:	f000 fa71 	bl	8000fb4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ad2:	f000 f9a7 	bl	8000e24 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ad6:	f000 fa43 	bl	8000f60 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ada:	f000 f9f1 	bl	8000ec0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000ade:	488d      	ldr	r0, [pc, #564]	; (8000d14 <main+0x258>)
 8000ae0:	f001 fd0e 	bl	8002500 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, AD_RES, 2);
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	498c      	ldr	r1, [pc, #560]	; (8000d18 <main+0x25c>)
 8000ae8:	488a      	ldr	r0, [pc, #552]	; (8000d14 <main+0x258>)
 8000aea:	f001 f949 	bl	8001d80 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 8000aee:	4889      	ldr	r0, [pc, #548]	; (8000d14 <main+0x258>)
 8000af0:	f001 f890 	bl	8001c14 <HAL_ADC_Start_IT>


	HAL_UART_Receive_DMA(&huart1, setting, 1);
 8000af4:	2201      	movs	r2, #1
 8000af6:	4989      	ldr	r1, [pc, #548]	; (8000d1c <main+0x260>)
 8000af8:	4889      	ldr	r0, [pc, #548]	; (8000d20 <main+0x264>)
 8000afa:	f003 fdac 	bl	8004656 <HAL_UART_Receive_DMA>

	while(setting[0] == 0);
 8000afe:	bf00      	nop
 8000b00:	4b86      	ldr	r3, [pc, #536]	; (8000d1c <main+0x260>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0fb      	beq.n	8000b00 <main+0x44>

	int numberofclock = setting[0];
 8000b08:	4b84      	ldr	r3, [pc, #528]	; (8000d1c <main+0x260>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	607b      	str	r3, [r7, #4]

	numberofarray = 5*numberofclock+1;
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	4613      	mov	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	3301      	adds	r3, #1
 8000b18:	4a82      	ldr	r2, [pc, #520]	; (8000d24 <main+0x268>)
 8000b1a:	6013      	str	r3, [r2, #0]

	HAL_UART_DMAStop(&huart1);
 8000b1c:	4880      	ldr	r0, [pc, #512]	; (8000d20 <main+0x264>)
 8000b1e:	f003 fdca 	bl	80046b6 <HAL_UART_DMAStop>

	chenge_Data = 0;
 8000b22:	4b81      	ldr	r3, [pc, #516]	; (8000d28 <main+0x26c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart1, buffer, numberofarray);
 8000b28:	4b7e      	ldr	r3, [pc, #504]	; (8000d24 <main+0x268>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	497e      	ldr	r1, [pc, #504]	; (8000d2c <main+0x270>)
 8000b32:	487b      	ldr	r0, [pc, #492]	; (8000d20 <main+0x264>)
 8000b34:	f003 fd8f 	bl	8004656 <HAL_UART_Receive_DMA>

	HAL_TIM_Base_Start(&htim1);
 8000b38:	487d      	ldr	r0, [pc, #500]	; (8000d30 <main+0x274>)
 8000b3a:	f003 fab3 	bl	80040a4 <HAL_TIM_Base_Start>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_ADC_Start_IT(&hadc1);
 8000b3e:	4875      	ldr	r0, [pc, #468]	; (8000d14 <main+0x258>)
 8000b40:	f001 f868 	bl	8001c14 <HAL_ADC_Start_IT>
		if(chenge_Data == 1 && buffer[0] ==0x02)
 8000b44:	4b78      	ldr	r3, [pc, #480]	; (8000d28 <main+0x26c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d10c      	bne.n	8000b66 <main+0xaa>
 8000b4c:	4b77      	ldr	r3, [pc, #476]	; (8000d2c <main+0x270>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d108      	bne.n	8000b66 <main+0xaa>
		{
			chenge_Data=0;
 8000b54:	4b74      	ldr	r3, [pc, #464]	; (8000d28 <main+0x26c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
			flag = 0;
 8000b5a:	4b76      	ldr	r3, [pc, #472]	; (8000d34 <main+0x278>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
			flag_1 = 0;
 8000b60:	4b75      	ldr	r3, [pc, #468]	; (8000d38 <main+0x27c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
		}
		if(chenge_Data == 1 && buffer[0] ==0x03)
 8000b66:	4b70      	ldr	r3, [pc, #448]	; (8000d28 <main+0x26c>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	f040 80b6 	bne.w	8000cdc <main+0x220>
 8000b70:	4b6e      	ldr	r3, [pc, #440]	; (8000d2c <main+0x270>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	f040 80b1 	bne.w	8000cdc <main+0x220>
		{
			//get Direction of Rotation
			uint8_t MSB_1 = buffer[5*n+2] & 0xF0;
 8000b7a:	4b70      	ldr	r3, [pc, #448]	; (8000d3c <main+0x280>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4613      	mov	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4413      	add	r3, r2
 8000b86:	3302      	adds	r3, #2
 8000b88:	4a68      	ldr	r2, [pc, #416]	; (8000d2c <main+0x270>)
 8000b8a:	5cd3      	ldrb	r3, [r2, r3]
 8000b8c:	f023 030f 	bic.w	r3, r3, #15
 8000b90:	70fb      	strb	r3, [r7, #3]
			//4 bit shift to right
			Direction_1 = MSB_1>>4;
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b69      	ldr	r3, [pc, #420]	; (8000d40 <main+0x284>)
 8000b9a:	701a      	strb	r2, [r3, #0]

			//get Direction of Rotation
			uint8_t MSB_2 = buffer[5*n+4] & 0xF0;
 8000b9c:	4b67      	ldr	r3, [pc, #412]	; (8000d3c <main+0x280>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	3304      	adds	r3, #4
 8000baa:	4a60      	ldr	r2, [pc, #384]	; (8000d2c <main+0x270>)
 8000bac:	5cd3      	ldrb	r3, [r2, r3]
 8000bae:	f023 030f 	bic.w	r3, r3, #15
 8000bb2:	70bb      	strb	r3, [r7, #2]
			//4 bit shift to right
			Direction_2 = MSB_2>>4;
 8000bb4:	78bb      	ldrb	r3, [r7, #2]
 8000bb6:	091b      	lsrs	r3, r3, #4
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b62      	ldr	r3, [pc, #392]	; (8000d44 <main+0x288>)
 8000bbc:	701a      	strb	r2, [r3, #0]

			//get 4bit of degree in binary
			uint8_t LSB_1 = buffer[5*n+2] & 0x0F;
 8000bbe:	4b5f      	ldr	r3, [pc, #380]	; (8000d3c <main+0x280>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	3302      	adds	r3, #2
 8000bcc:	4a57      	ldr	r2, [pc, #348]	; (8000d2c <main+0x270>)
 8000bce:	5cd3      	ldrb	r3, [r2, r3]
 8000bd0:	f003 030f 	and.w	r3, r3, #15
 8000bd4:	707b      	strb	r3, [r7, #1]
			//calculate degree in 2 byte
			degree_1 = LSB_1<<8 | buffer[5*n+3];
 8000bd6:	787b      	ldrb	r3, [r7, #1]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	4b57      	ldr	r3, [pc, #348]	; (8000d3c <main+0x280>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	460b      	mov	r3, r1
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3303      	adds	r3, #3
 8000bea:	4950      	ldr	r1, [pc, #320]	; (8000d2c <main+0x270>)
 8000bec:	5ccb      	ldrb	r3, [r1, r3]
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <main+0x28c>)
 8000bf8:	801a      	strh	r2, [r3, #0]
			//calculate steps
			step_1 = degree_1 /0.703125 ;
 8000bfa:	4b53      	ldr	r3, [pc, #332]	; (8000d48 <main+0x28c>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fc62 	bl	80004c8 <__aeabi_i2d>
 8000c04:	f04f 0200 	mov.w	r2, #0
 8000c08:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <main+0x290>)
 8000c0a:	f7ff fdf1 	bl	80007f0 <__aeabi_ddiv>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	460c      	mov	r4, r1
 8000c12:	4618      	mov	r0, r3
 8000c14:	4621      	mov	r1, r4
 8000c16:	f7ff fef3 	bl	8000a00 <__aeabi_d2f>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <main+0x294>)
 8000c1e:	601a      	str	r2, [r3, #0]
			round_step_1 = round(step_1);
 8000c20:	4b4b      	ldr	r3, [pc, #300]	; (8000d50 <main+0x294>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fc61 	bl	80004ec <__aeabi_f2d>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460c      	mov	r4, r1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	4621      	mov	r1, r4
 8000c32:	f004 faa1 	bl	8005178 <round>
 8000c36:	4603      	mov	r3, r0
 8000c38:	460c      	mov	r4, r1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	f7ff febf 	bl	80009c0 <__aeabi_d2uiz>
 8000c42:	4602      	mov	r2, r0
 8000c44:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <main+0x298>)
 8000c46:	601a      	str	r2, [r3, #0]

			//get 4bit of degree in binary
			uint8_t LSB_2 = buffer[5*n+4] & 0x0F;
 8000c48:	4b3c      	ldr	r3, [pc, #240]	; (8000d3c <main+0x280>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	3304      	adds	r3, #4
 8000c56:	4a35      	ldr	r2, [pc, #212]	; (8000d2c <main+0x270>)
 8000c58:	5cd3      	ldrb	r3, [r2, r3]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	703b      	strb	r3, [r7, #0]
			//calculate degree in 2 byte
			degree_2 = LSB_2<<8 | buffer[5*n+5];
 8000c60:	783b      	ldrb	r3, [r7, #0]
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	b219      	sxth	r1, r3
 8000c66:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <main+0x280>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <main+0x270>)
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <main+0x29c>)
 8000c80:	801a      	strh	r2, [r3, #0]
			//calculate steps
			step_2 = degree_2 /0.703125 ;
 8000c82:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <main+0x29c>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc1e 	bl	80004c8 <__aeabi_i2d>
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <main+0x290>)
 8000c92:	f7ff fdad 	bl	80007f0 <__aeabi_ddiv>
 8000c96:	4603      	mov	r3, r0
 8000c98:	460c      	mov	r4, r1
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	f7ff feaf 	bl	8000a00 <__aeabi_d2f>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <main+0x2a0>)
 8000ca6:	601a      	str	r2, [r3, #0]
			round_step_2 = round(step_2);
 8000ca8:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <main+0x2a0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fc1d 	bl	80004ec <__aeabi_f2d>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460c      	mov	r4, r1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	4621      	mov	r1, r4
 8000cba:	f004 fa5d 	bl	8005178 <round>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	460c      	mov	r4, r1
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	4621      	mov	r1, r4
 8000cc6:	f7ff fe7b 	bl	80009c0 <__aeabi_d2uiz>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <main+0x2a4>)
 8000cce:	601a      	str	r2, [r3, #0]

			end = 0;
 8000cd0:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <main+0x2a8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
			chenge_Data = 0;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <main+0x26c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]



		//job

		switch(buffer[0])
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <main+0x270>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d008      	beq.n	8000cf6 <main+0x23a>
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d009      	beq.n	8000cfc <main+0x240>
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d112      	bne.n	8000d12 <main+0x256>
		{
		case 0x01 : //set ID : Number of clock
			n = buffer[1];
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <main+0x270>)
 8000cee:	785a      	ldrb	r2, [r3, #1]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <main+0x280>)
 8000cf2:	701a      	strb	r2, [r3, #0]
			break;
 8000cf4:	e00d      	b.n	8000d12 <main+0x256>
		case 0x02 : //go to position 0
			start_stepper_2();
 8000cf6:	f000 f9e9 	bl	80010cc <start_stepper_2>
			break;
 8000cfa:	e00a      	b.n	8000d12 <main+0x256>
		case 0x03 : //go to specific position
			motors(Direction_1,round_step_1,Direction_2	,round_step_2);
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <main+0x284>)
 8000cfe:	7818      	ldrb	r0, [r3, #0]
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <main+0x298>)
 8000d02:	6819      	ldr	r1, [r3, #0]
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <main+0x288>)
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <main+0x2a4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f000 fa4c 	bl	80011a8 <motors>
			break;
 8000d10:	bf00      	nop
		HAL_ADC_Start_IT(&hadc1);
 8000d12:	e714      	b.n	8000b3e <main+0x82>
 8000d14:	200000c8 	.word	0x200000c8
 8000d18:	200000ac 	.word	0x200000ac
 8000d1c:	20000038 	.word	0x20000038
 8000d20:	2000013c 	.word	0x2000013c
 8000d24:	2000005c 	.word	0x2000005c
 8000d28:	20000034 	.word	0x20000034
 8000d2c:	2000003c 	.word	0x2000003c
 8000d30:	20000064 	.word	0x20000064
 8000d34:	2000002c 	.word	0x2000002c
 8000d38:	20000030 	.word	0x20000030
 8000d3c:	20000028 	.word	0x20000028
 8000d40:	200001c8 	.word	0x200001c8
 8000d44:	200000c4 	.word	0x200000c4
 8000d48:	200000b4 	.word	0x200000b4
 8000d4c:	3fe68000 	.word	0x3fe68000
 8000d50:	200000b8 	.word	0x200000b8
 8000d54:	200001d4 	.word	0x200001d4
 8000d58:	200001d0 	.word	0x200001d0
 8000d5c:	200000c0 	.word	0x200000c0
 8000d60:	200001cc 	.word	0x200001cc
 8000d64:	20000035 	.word	0x20000035

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b096      	sub	sp, #88	; 0x58
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d72:	2228      	movs	r2, #40	; 0x28
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 f9f6 	bl	8005168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000daa:	2301      	movs	r3, #1
 8000dac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000db8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fb64 	bl	8003490 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000dce:	f000 f979 	bl	80010c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	2102      	movs	r1, #2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 fdce 	bl	8003990 <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfa:	f000 f963 	bl	80010c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e06:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 ff5c 	bl	8003cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e16:	f000 f955 	bl	80010c4 <Error_Handler>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3758      	adds	r7, #88	; 0x58
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <MX_ADC1_Init+0x94>)
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_ADC1_Init+0x94>)
 8000e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_ADC1_Init+0x94>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_ADC1_Init+0x94>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_ADC1_Init+0x94>)
 8000e50:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_ADC1_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_ADC1_Init+0x94>)
 8000e5e:	2202      	movs	r2, #2
 8000e60:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e62:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <MX_ADC1_Init+0x94>)
 8000e64:	f000 fdec 	bl	8001a40 <HAL_ADC_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000e6e:	f000 f929 	bl	80010c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_ADC1_Init+0x94>)
 8000e84:	f001 f942 	bl	800210c <HAL_ADC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e8e:	f000 f919 	bl	80010c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_ADC1_Init+0x94>)
 8000ea0:	f001 f934 	bl	800210c <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000eaa:	f000 f90b 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200000c8 	.word	0x200000c8
 8000ebc:	40012400 	.word	0x40012400

08000ec0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <MX_TIM1_Init+0x98>)
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <MX_TIM1_Init+0x9c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_TIM1_Init+0x98>)
 8000ee4:	2247      	movs	r2, #71	; 0x47
 8000ee6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_TIM1_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_TIM1_Init+0x98>)
 8000ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_TIM1_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <MX_TIM1_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_TIM1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f08:	4813      	ldr	r0, [pc, #76]	; (8000f58 <MX_TIM1_Init+0x98>)
 8000f0a:	f003 f87b 	bl	8004004 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f14:	f000 f8d6 	bl	80010c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4619      	mov	r1, r3
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <MX_TIM1_Init+0x98>)
 8000f26:	f003 f915 	bl	8004154 <HAL_TIM_ConfigClockSource>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f30:	f000 f8c8 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_TIM1_Init+0x98>)
 8000f42:	f003 facf 	bl	80044e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f4c:	f000 f8ba 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000064 	.word	0x20000064
 8000f5c:	40012c00 	.word	0x40012c00

08000f60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <MX_USART1_UART_Init+0x50>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f98:	f003 fb10 	bl	80045bc <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fa2:	f000 f88f 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000013c 	.word	0x2000013c
 8000fb0:	40013800 	.word	0x40013800

08000fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <MX_DMA_Init+0x48>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	; (8000ffc <MX_DMA_Init+0x48>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6153      	str	r3, [r2, #20]
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <MX_DMA_Init+0x48>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	200b      	movs	r0, #11
 8000fd8:	f001 fc1f 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fdc:	200b      	movs	r0, #11
 8000fde:	f001 fc38 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f001 fc17 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000fec:	200f      	movs	r0, #15
 8000fee:	f001 fc30 	bl	8002852 <HAL_NVIC_EnableIRQ>

}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800104a:	f043 0320 	orr.w	r3, r3, #32
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0320 	and.w	r3, r3, #32
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001062:	4816      	ldr	r0, [pc, #88]	; (80010bc <MX_GPIO_Init+0xbc>)
 8001064:	f002 f9fc 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800106e:	4814      	ldr	r0, [pc, #80]	; (80010c0 <MX_GPIO_Init+0xc0>)
 8001070:	f002 f9f6 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001074:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2302      	movs	r3, #2
 8001084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <MX_GPIO_Init+0xbc>)
 800108e:	f002 f87d 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001092:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_GPIO_Init+0xc0>)
 80010ac:	f002 f86e 	bl	800318c <HAL_GPIO_Init>

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010c00 	.word	0x40010c00
 80010c0:	40011400 	.word	0x40011400

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010ca:	e7fe      	b.n	80010ca <Error_Handler+0x6>

080010cc <start_stepper_2>:
	}

}

void start_stepper_2(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	while(1)
	{
		if(flag == 1 && flag_1 == 1)
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <start_stepper_2+0xc4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d103      	bne.n	80010e0 <start_stepper_2+0x14>
 80010d8:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <start_stepper_2+0xc8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d052      	beq.n	8001186 <start_stepper_2+0xba>
		{
			break;
		}
		if(chenge_Data==1)
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <start_stepper_2+0xcc>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d050      	beq.n	800118a <start_stepper_2+0xbe>
		{
			break;
		}

		if(AD_RES[0] <100)
 80010e8:	4b2c      	ldr	r3, [pc, #176]	; (800119c <start_stepper_2+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b63      	cmp	r3, #99	; 0x63
 80010ee:	d802      	bhi.n	80010f6 <start_stepper_2+0x2a>
		{
			flag = 1;
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <start_stepper_2+0xc4>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
		}
		if(AD_RES[1] <100)
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <start_stepper_2+0xd0>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b63      	cmp	r3, #99	; 0x63
 80010fc:	d802      	bhi.n	8001104 <start_stepper_2+0x38>
		{
			flag_1 = 1;
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <start_stepper_2+0xc8>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
		}

		if(flag == 0)
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <start_stepper_2+0xc4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d11b      	bne.n	8001144 <start_stepper_2+0x78>
		{
			GPIOD->ODR = 0xC000;
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <start_stepper_2+0xd4>)
 800110e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001112:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f000 fc71 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x6000;
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <start_stepper_2+0xd4>)
 800111c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001120:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001122:	2001      	movs	r0, #1
 8001124:	f000 fc6a 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x3000;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <start_stepper_2+0xd4>)
 800112a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800112e:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 fc63 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x9000;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <start_stepper_2+0xd4>)
 8001138:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800113c:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fc5c 	bl	80019fc <HAL_Delay>
		}
		if(flag_1 == 0)
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <start_stepper_2+0xc8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1c1      	bne.n	80010d0 <start_stepper_2+0x4>
		{
			GPIOB->ODR = 0xC000;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <start_stepper_2+0xd8>)
 800114e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001152:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001154:	2001      	movs	r0, #1
 8001156:	f000 fc51 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x6000;
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <start_stepper_2+0xd8>)
 800115c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001160:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001162:	2001      	movs	r0, #1
 8001164:	f000 fc4a 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x3000;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <start_stepper_2+0xd8>)
 800116a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800116e:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f000 fc43 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x9000;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <start_stepper_2+0xd8>)
 8001178:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800117c:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fc3c 	bl	80019fc <HAL_Delay>
		if(flag == 1 && flag_1 == 1)
 8001184:	e7a4      	b.n	80010d0 <start_stepper_2+0x4>
			break;
 8001186:	bf00      	nop
 8001188:	e000      	b.n	800118c <start_stepper_2+0xc0>
			break;
 800118a:	bf00      	nop
		}

	}
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000002c 	.word	0x2000002c
 8001194:	20000030 	.word	0x20000030
 8001198:	20000034 	.word	0x20000034
 800119c:	200000ac 	.word	0x200000ac
 80011a0:	40011400 	.word	0x40011400
 80011a4:	40010c00 	.word	0x40010c00

080011a8 <motors>:

}


void motors(uint8_t Direction_1, uint32_t step_1 ,uint8_t Direction_2, uint32_t step_2)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	4613      	mov	r3, r2
 80011b8:	73bb      	strb	r3, [r7, #14]
	for(i=0;i<512;i++)
 80011ba:	4bae      	ldr	r3, [pc, #696]	; (8001474 <motors+0x2cc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e1e9      	b.n	8001596 <motors+0x3ee>
	{
		if(chenge_Data == 1)
 80011c2:	4bad      	ldr	r3, [pc, #692]	; (8001478 <motors+0x2d0>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	f000 81ec 	beq.w	80015a4 <motors+0x3fc>
		{
			break;
		}
		if(end == 1)
 80011cc:	4bab      	ldr	r3, [pc, #684]	; (800147c <motors+0x2d4>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	f000 81e9 	beq.w	80015a8 <motors+0x400>
		{
			break;
		}
		if(Direction_1==0 && i<step_1 && Direction_2==0 && i<step_2)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d145      	bne.n	8001268 <motors+0xc0>
 80011dc:	4ba5      	ldr	r3, [pc, #660]	; (8001474 <motors+0x2cc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d940      	bls.n	8001268 <motors+0xc0>
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d13d      	bne.n	8001268 <motors+0xc0>
 80011ec:	4ba1      	ldr	r3, [pc, #644]	; (8001474 <motors+0x2cc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d938      	bls.n	8001268 <motors+0xc0>
		{
			GPIOD->ODR = 0xC000;
 80011f6:	4ba2      	ldr	r3, [pc, #648]	; (8001480 <motors+0x2d8>)
 80011f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80011fc:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f000 fbfc 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0xC000;
 8001204:	4b9f      	ldr	r3, [pc, #636]	; (8001484 <motors+0x2dc>)
 8001206:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800120a:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f000 fbf5 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x6000;
 8001212:	4b9b      	ldr	r3, [pc, #620]	; (8001480 <motors+0x2d8>)
 8001214:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001218:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f000 fbee 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x6000;
 8001220:	4b98      	ldr	r3, [pc, #608]	; (8001484 <motors+0x2dc>)
 8001222:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001226:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001228:	2001      	movs	r0, #1
 800122a:	f000 fbe7 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x3000;
 800122e:	4b94      	ldr	r3, [pc, #592]	; (8001480 <motors+0x2d8>)
 8001230:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001234:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f000 fbe0 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x3000;
 800123c:	4b91      	ldr	r3, [pc, #580]	; (8001484 <motors+0x2dc>)
 800123e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001242:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f000 fbd9 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x9000;
 800124a:	4b8d      	ldr	r3, [pc, #564]	; (8001480 <motors+0x2d8>)
 800124c:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001250:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f000 fbd2 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x9000;
 8001258:	4b8a      	ldr	r3, [pc, #552]	; (8001484 <motors+0x2dc>)
 800125a:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800125e:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001260:	2001      	movs	r0, #1
 8001262:	f000 fbcb 	bl	80019fc <HAL_Delay>
 8001266:	e191      	b.n	800158c <motors+0x3e4>
		}
		else if(Direction_1==0 && i<step_1 && Direction_2==1 && i<step_2)
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d145      	bne.n	80012fa <motors+0x152>
 800126e:	4b81      	ldr	r3, [pc, #516]	; (8001474 <motors+0x2cc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	429a      	cmp	r2, r3
 8001276:	d940      	bls.n	80012fa <motors+0x152>
 8001278:	7bbb      	ldrb	r3, [r7, #14]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d13d      	bne.n	80012fa <motors+0x152>
 800127e:	4b7d      	ldr	r3, [pc, #500]	; (8001474 <motors+0x2cc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	d938      	bls.n	80012fa <motors+0x152>
		{
			GPIOD->ODR = 0xC000;
 8001288:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <motors+0x2d8>)
 800128a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800128e:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f000 fbb3 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x9000;
 8001296:	4b7b      	ldr	r3, [pc, #492]	; (8001484 <motors+0x2dc>)
 8001298:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800129c:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 fbac 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x6000;
 80012a4:	4b76      	ldr	r3, [pc, #472]	; (8001480 <motors+0x2d8>)
 80012a6:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80012aa:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012ac:	2001      	movs	r0, #1
 80012ae:	f000 fba5 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x3000;
 80012b2:	4b74      	ldr	r3, [pc, #464]	; (8001484 <motors+0x2dc>)
 80012b4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80012b8:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f000 fb9e 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x3000;
 80012c0:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <motors+0x2d8>)
 80012c2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80012c6:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f000 fb97 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x6000;
 80012ce:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <motors+0x2dc>)
 80012d0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80012d4:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f000 fb90 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x9000;
 80012dc:	4b68      	ldr	r3, [pc, #416]	; (8001480 <motors+0x2d8>)
 80012de:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80012e2:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f000 fb89 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0xC000;
 80012ea:	4b66      	ldr	r3, [pc, #408]	; (8001484 <motors+0x2dc>)
 80012ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80012f0:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f000 fb82 	bl	80019fc <HAL_Delay>
 80012f8:	e148      	b.n	800158c <motors+0x3e4>
		}
		else if(Direction_1==0 && i<step_1 && i>=step_2)
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d126      	bne.n	800134e <motors+0x1a6>
 8001300:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <motors+0x2cc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	429a      	cmp	r2, r3
 8001308:	d921      	bls.n	800134e <motors+0x1a6>
 800130a:	4b5a      	ldr	r3, [pc, #360]	; (8001474 <motors+0x2cc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	d81c      	bhi.n	800134e <motors+0x1a6>
		{
			GPIOD->ODR = 0xC000;
 8001314:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <motors+0x2d8>)
 8001316:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800131a:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 800131c:	2002      	movs	r0, #2
 800131e:	f000 fb6d 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x6000;
 8001322:	4b57      	ldr	r3, [pc, #348]	; (8001480 <motors+0x2d8>)
 8001324:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001328:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 800132a:	2002      	movs	r0, #2
 800132c:	f000 fb66 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x3000;
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <motors+0x2d8>)
 8001332:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001336:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 8001338:	2002      	movs	r0, #2
 800133a:	f000 fb5f 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x9000;
 800133e:	4b50      	ldr	r3, [pc, #320]	; (8001480 <motors+0x2d8>)
 8001340:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001344:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 8001346:	2002      	movs	r0, #2
 8001348:	f000 fb58 	bl	80019fc <HAL_Delay>
 800134c:	e11e      	b.n	800158c <motors+0x3e4>

		}
		else if(Direction_1==1 && i<step_1 && Direction_2==0 && i<step_2)
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d145      	bne.n	80013e0 <motors+0x238>
 8001354:	4b47      	ldr	r3, [pc, #284]	; (8001474 <motors+0x2cc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	429a      	cmp	r2, r3
 800135c:	d940      	bls.n	80013e0 <motors+0x238>
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d13d      	bne.n	80013e0 <motors+0x238>
 8001364:	4b43      	ldr	r3, [pc, #268]	; (8001474 <motors+0x2cc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	d938      	bls.n	80013e0 <motors+0x238>
		{
			GPIOD->ODR = 0x9000;
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <motors+0x2d8>)
 8001370:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001374:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001376:	2001      	movs	r0, #1
 8001378:	f000 fb40 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0xC000;
 800137c:	4b41      	ldr	r3, [pc, #260]	; (8001484 <motors+0x2dc>)
 800137e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001382:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001384:	2001      	movs	r0, #1
 8001386:	f000 fb39 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x3000;
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <motors+0x2d8>)
 800138c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001390:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f000 fb32 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x6000;
 8001398:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <motors+0x2dc>)
 800139a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800139e:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f000 fb2b 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x6000;
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <motors+0x2d8>)
 80013a8:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80013ac:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f000 fb24 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x3000;
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <motors+0x2dc>)
 80013b6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80013ba:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f000 fb1d 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0xC000;
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <motors+0x2d8>)
 80013c4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80013c8:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f000 fb16 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x9000;
 80013d0:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <motors+0x2dc>)
 80013d2:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80013d6:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f000 fb0f 	bl	80019fc <HAL_Delay>
 80013de:	e0d5      	b.n	800158c <motors+0x3e4>

		}
		else if(Direction_1==1 && i<step_1 && Direction_2==1 && i<step_2)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d150      	bne.n	8001488 <motors+0x2e0>
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <motors+0x2cc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d94b      	bls.n	8001488 <motors+0x2e0>
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d148      	bne.n	8001488 <motors+0x2e0>
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <motors+0x2cc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d943      	bls.n	8001488 <motors+0x2e0>
		{
			GPIOD->ODR = 0x9000;
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <motors+0x2d8>)
 8001402:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001406:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f000 faf7 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x9000;
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <motors+0x2dc>)
 8001410:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001414:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f000 faf0 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x3000;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <motors+0x2d8>)
 800141e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001422:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001424:	2001      	movs	r0, #1
 8001426:	f000 fae9 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x3000;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <motors+0x2dc>)
 800142c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001430:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 fae2 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x6000;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <motors+0x2d8>)
 800143a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800143e:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f000 fadb 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x6000;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <motors+0x2dc>)
 8001448:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800144c:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f000 fad4 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0xC000;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <motors+0x2d8>)
 8001456:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800145a:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800145c:	2001      	movs	r0, #1
 800145e:	f000 facd 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0xC000;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <motors+0x2dc>)
 8001464:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001468:	60da      	str	r2, [r3, #12]
			HAL_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f000 fac6 	bl	80019fc <HAL_Delay>
 8001470:	e08c      	b.n	800158c <motors+0x3e4>
 8001472:	bf00      	nop
 8001474:	20000060 	.word	0x20000060
 8001478:	20000034 	.word	0x20000034
 800147c:	20000035 	.word	0x20000035
 8001480:	40011400 	.word	0x40011400
 8001484:	40010c00 	.word	0x40010c00

		}
		else if(Direction_1==1 && i<step_1 && i>=step_2)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d126      	bne.n	80014dc <motors+0x334>
 800148e:	4b49      	ldr	r3, [pc, #292]	; (80015b4 <motors+0x40c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	d921      	bls.n	80014dc <motors+0x334>
 8001498:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <motors+0x40c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d81c      	bhi.n	80014dc <motors+0x334>
		{
			GPIOD->ODR = 0x9000;
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <motors+0x410>)
 80014a4:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80014a8:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f000 faa6 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x3000;
 80014b0:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <motors+0x410>)
 80014b2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80014b6:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80014b8:	2002      	movs	r0, #2
 80014ba:	f000 fa9f 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0x6000;
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <motors+0x410>)
 80014c0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80014c4:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80014c6:	2002      	movs	r0, #2
 80014c8:	f000 fa98 	bl	80019fc <HAL_Delay>
			GPIOD->ODR = 0xC000;
 80014cc:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <motors+0x410>)
 80014ce:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80014d2:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80014d4:	2002      	movs	r0, #2
 80014d6:	f000 fa91 	bl	80019fc <HAL_Delay>
 80014da:	e057      	b.n	800158c <motors+0x3e4>

		}
		else if(i>=step_1 && Direction_2==0 && i<step_2)
 80014dc:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <motors+0x40c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d824      	bhi.n	8001530 <motors+0x388>
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d121      	bne.n	8001530 <motors+0x388>
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <motors+0x40c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d91c      	bls.n	8001530 <motors+0x388>
		{
			GPIOB->ODR = 0xC000;
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <motors+0x414>)
 80014f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80014fc:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 80014fe:	2002      	movs	r0, #2
 8001500:	f000 fa7c 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x6000;
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <motors+0x414>)
 8001506:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800150a:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 800150c:	2002      	movs	r0, #2
 800150e:	f000 fa75 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x3000;
 8001512:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <motors+0x414>)
 8001514:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001518:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 800151a:	2002      	movs	r0, #2
 800151c:	f000 fa6e 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x9000;
 8001520:	4b26      	ldr	r3, [pc, #152]	; (80015bc <motors+0x414>)
 8001522:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001526:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 8001528:	2002      	movs	r0, #2
 800152a:	f000 fa67 	bl	80019fc <HAL_Delay>
 800152e:	e02d      	b.n	800158c <motors+0x3e4>

		}
		else if(i>=step_1 && Direction_2==1 && i<step_2)
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <motors+0x40c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	429a      	cmp	r2, r3
 8001538:	d824      	bhi.n	8001584 <motors+0x3dc>
 800153a:	7bbb      	ldrb	r3, [r7, #14]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d121      	bne.n	8001584 <motors+0x3dc>
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <motors+0x40c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d91c      	bls.n	8001584 <motors+0x3dc>
		{
			GPIOB->ODR = 0x9000;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <motors+0x414>)
 800154c:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8001550:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 8001552:	2002      	movs	r0, #2
 8001554:	f000 fa52 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x3000;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <motors+0x414>)
 800155a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800155e:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 8001560:	2002      	movs	r0, #2
 8001562:	f000 fa4b 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0x6000;
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <motors+0x414>)
 8001568:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800156c:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 800156e:	2002      	movs	r0, #2
 8001570:	f000 fa44 	bl	80019fc <HAL_Delay>
			GPIOB->ODR = 0xC000;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <motors+0x414>)
 8001576:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800157a:	60da      	str	r2, [r3, #12]
			HAL_Delay(2);
 800157c:	2002      	movs	r0, #2
 800157e:	f000 fa3d 	bl	80019fc <HAL_Delay>
 8001582:	e003      	b.n	800158c <motors+0x3e4>

		}
		else
		{
			end =1;
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <motors+0x418>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
			break;
 800158a:	e00e      	b.n	80015aa <motors+0x402>
	for(i=0;i<512;i++)
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <motors+0x40c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <motors+0x40c>)
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <motors+0x40c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800159e:	f4ff ae10 	bcc.w	80011c2 <motors+0x1a>
		}
	}

}
 80015a2:	e002      	b.n	80015aa <motors+0x402>
			break;
 80015a4:	bf00      	nop
 80015a6:	e000      	b.n	80015aa <motors+0x402>
			break;
 80015a8:	bf00      	nop
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000060 	.word	0x20000060
 80015b8:	40011400 	.word	0x40011400
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	20000035 	.word	0x20000035

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_MspInit+0x5c>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_MspInit+0x5c>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6193      	str	r3, [r2, #24]
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_MspInit+0x5c>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_MspInit+0x5c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_MspInit+0x5c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_MspInit+0x5c>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_MspInit+0x60>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_MspInit+0x60>)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000

08001628 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2c      	ldr	r2, [pc, #176]	; (80016f4 <HAL_ADC_MspInit+0xcc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d151      	bne.n	80016ec <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a24      	ldr	r2, [pc, #144]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001678:	2306      	movs	r3, #6
 800167a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167c:	2303      	movs	r3, #3
 800167e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	4619      	mov	r1, r3
 8001686:	481d      	ldr	r0, [pc, #116]	; (80016fc <HAL_ADC_MspInit+0xd4>)
 8001688:	f001 fd80 	bl	800318c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_ADC_MspInit+0xdc>)
 8001690:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016b6:	2220      	movs	r2, #32
 80016b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016c0:	480f      	ldr	r0, [pc, #60]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016c2:	f001 f8e1 	bl	8002888 <HAL_DMA_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80016cc:	f7ff fcfa 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016d4:	621a      	str	r2, [r3, #32]
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	2012      	movs	r0, #18
 80016e2:	f001 f89a 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016e6:	2012      	movs	r0, #18
 80016e8:	f001 f8b3 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40012400 	.word	0x40012400
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010800 	.word	0x40010800
 8001700:	20000184 	.word	0x20000184
 8001704:	40020008 	.word	0x40020008

08001708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_TIM_Base_MspInit+0x34>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d10b      	bne.n	8001732 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_TIM_Base_MspInit+0x38>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_TIM_Base_MspInit+0x38>)
 8001720:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001724:	6193      	str	r3, [r2, #24]
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_TIM_Base_MspInit+0x38>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	40012c00 	.word	0x40012c00
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a33      	ldr	r2, [pc, #204]	; (800182c <HAL_UART_MspInit+0xe8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d15f      	bne.n	8001824 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001764:	4b32      	ldr	r3, [pc, #200]	; (8001830 <HAL_UART_MspInit+0xec>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a31      	ldr	r2, [pc, #196]	; (8001830 <HAL_UART_MspInit+0xec>)
 800176a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <HAL_UART_MspInit+0xec>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <HAL_UART_MspInit+0xec>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a2b      	ldr	r2, [pc, #172]	; (8001830 <HAL_UART_MspInit+0xec>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b29      	ldr	r3, [pc, #164]	; (8001830 <HAL_UART_MspInit+0xec>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4619      	mov	r1, r3
 80017a8:	4822      	ldr	r0, [pc, #136]	; (8001834 <HAL_UART_MspInit+0xf0>)
 80017aa:	f001 fcef 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	481c      	ldr	r0, [pc, #112]	; (8001834 <HAL_UART_MspInit+0xf0>)
 80017c4:	f001 fce2 	bl	800318c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_UART_MspInit+0xf4>)
 80017ca:	4a1c      	ldr	r2, [pc, #112]	; (800183c <HAL_UART_MspInit+0xf8>)
 80017cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_UART_MspInit+0xf4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_UART_MspInit+0xf4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_UART_MspInit+0xf4>)
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_UART_MspInit+0xf4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <HAL_UART_MspInit+0xf4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_UART_MspInit+0xf4>)
 80017ee:	2220      	movs	r2, #32
 80017f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_UART_MspInit+0xf4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017f8:	480f      	ldr	r0, [pc, #60]	; (8001838 <HAL_UART_MspInit+0xf4>)
 80017fa:	f001 f845 	bl	8002888 <HAL_DMA_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001804:	f7ff fc5e 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_UART_MspInit+0xf4>)
 800180c:	639a      	str	r2, [r3, #56]	; 0x38
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_UART_MspInit+0xf4>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	2025      	movs	r0, #37	; 0x25
 800181a:	f000 fffe 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800181e:	2025      	movs	r0, #37	; 0x25
 8001820:	f001 f817 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40013800 	.word	0x40013800
 8001830:	40021000 	.word	0x40021000
 8001834:	40010800 	.word	0x40010800
 8001838:	200000f8 	.word	0x200000f8
 800183c:	40020058 	.word	0x40020058

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001886:	f000 f89d 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <DMA1_Channel1_IRQHandler+0x10>)
 8001896:	f001 fa0f 	bl	8002cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000184 	.word	0x20000184

080018a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <DMA1_Channel5_IRQHandler+0x10>)
 80018aa:	f001 fa05 	bl	8002cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200000f8 	.word	0x200000f8

080018b8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <ADC1_2_IRQHandler+0x10>)
 80018be:	f000 fb3d 	bl	8001f3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200000c8 	.word	0x200000c8

080018cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <USART1_IRQHandler+0x10>)
 80018d2:	f002 ff4b 	bl	800476c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000013c 	.word	0x2000013c

080018e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <Reset_Handler>:
 80018ec:	480c      	ldr	r0, [pc, #48]	; (8001920 <LoopFillZerobss+0x12>)
 80018ee:	490d      	ldr	r1, [pc, #52]	; (8001924 <LoopFillZerobss+0x16>)
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <LoopFillZerobss+0x1a>)
 80018f2:	2300      	movs	r3, #0
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:
 80018f6:	58d4      	ldr	r4, [r2, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:
 80018fc:	18c4      	adds	r4, r0, r3
 80018fe:	428c      	cmp	r4, r1
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <LoopFillZerobss+0x1e>)
 8001904:	4c0a      	ldr	r4, [pc, #40]	; (8001930 <LoopFillZerobss+0x22>)
 8001906:	2300      	movs	r3, #0
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:
 800190e:	42a2      	cmp	r2, r4
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>
 8001912:	f7ff ffe5 	bl	80018e0 <SystemInit>
 8001916:	f003 fc03 	bl	8005120 <__libc_init_array>
 800191a:	f7ff f8cf 	bl	8000abc <main>
 800191e:	4770      	bx	lr
 8001920:	20000000 	.word	0x20000000
 8001924:	2000000c 	.word	0x2000000c
 8001928:	08005264 	.word	0x08005264
 800192c:	2000000c 	.word	0x2000000c
 8001930:	200001dc 	.word	0x200001dc

08001934 <ADC3_IRQHandler>:
 8001934:	e7fe      	b.n	8001934 <ADC3_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_Init+0x28>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_Init+0x28>)
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 ff5b 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194e:	2000      	movs	r0, #0
 8001950:	f000 f808 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff fe36 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40022000 	.word	0x40022000

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_InitTick+0x54>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x58>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f000 ff73 	bl	800286e <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00e      	b.n	80019b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d80a      	bhi.n	80019ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 ff3b 	bl	800281a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <HAL_InitTick+0x5c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000008 	.word	0x20000008
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_IncTick+0x1c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_IncTick+0x20>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <HAL_IncTick+0x20>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000008 	.word	0x20000008
 80019e4:	200001d8 	.word	0x200001d8

080019e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <HAL_GetTick+0x10>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	200001d8 	.word	0x200001d8

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff fff0 	bl	80019e8 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_Delay+0x40>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffe0 	bl	80019e8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000008 	.word	0x20000008

08001a40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0ce      	b.n	8001c00 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fdd2 	bl	8001628 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fc93 	bl	80023b0 <ADC_ConversionStop_Disable>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f040 80a9 	bne.w	8001bee <HAL_ADC_Init+0x1ae>
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f040 80a5 	bne.w	8001bee <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aac:	f023 0302 	bic.w	r3, r3, #2
 8001ab0:	f043 0202 	orr.w	r2, r3, #2
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4951      	ldr	r1, [pc, #324]	; (8001c08 <HAL_ADC_Init+0x1c8>)
 8001ac2:	428b      	cmp	r3, r1
 8001ac4:	d10a      	bne.n	8001adc <HAL_ADC_Init+0x9c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001ace:	d002      	beq.n	8001ad6 <HAL_ADC_Init+0x96>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	e004      	b.n	8001ae0 <HAL_ADC_Init+0xa0>
 8001ad6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ada:	e001      	b.n	8001ae0 <HAL_ADC_Init+0xa0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ae0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7b1b      	ldrb	r3, [r3, #12]
 8001ae6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ae8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af8:	d003      	beq.n	8001b02 <HAL_ADC_Init+0xc2>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d102      	bne.n	8001b08 <HAL_ADC_Init+0xc8>
 8001b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b06:	e000      	b.n	8001b0a <HAL_ADC_Init+0xca>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7d1b      	ldrb	r3, [r3, #20]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d119      	bne.n	8001b4c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7b1b      	ldrb	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	035a      	lsls	r2, r3, #13
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	e00b      	b.n	8001b4c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	f043 0220 	orr.w	r2, r3, #32
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <HAL_ADC_Init+0x1cc>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b7c:	d003      	beq.n	8001b86 <HAL_ADC_Init+0x146>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d104      	bne.n	8001b90 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	051b      	lsls	r3, r3, #20
 8001b8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_ADC_Init+0x1d0>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d10b      	bne.n	8001bcc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	f023 0303 	bic.w	r3, r3, #3
 8001bc2:	f043 0201 	orr.w	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bca:	e018      	b.n	8001bfe <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	f023 0312 	bic.w	r3, r3, #18
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bec:	e007      	b.n	8001bfe <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	f043 0210 	orr.w	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40013c00 	.word	0x40013c00
 8001c0c:	ffe1f7fd 	.word	0xffe1f7fd
 8001c10:	ff1f0efe 	.word	0xff1f0efe

08001c14 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_Start_IT+0x1a>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e0a0      	b.n	8001d70 <HAL_ADC_Start_IT+0x15c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fb60 	bl	80022fc <ADC_Enable>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 808f 	bne.w	8001d66 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a45      	ldr	r2, [pc, #276]	; (8001d78 <HAL_ADC_Start_IT+0x164>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d105      	bne.n	8001c72 <HAL_ADC_Start_IT+0x5e>
 8001c66:	4b45      	ldr	r3, [pc, #276]	; (8001d7c <HAL_ADC_Start_IT+0x168>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d115      	bne.n	8001c9e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d026      	beq.n	8001cda <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c9c:	e01d      	b.n	8001cda <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a33      	ldr	r2, [pc, #204]	; (8001d7c <HAL_ADC_Start_IT+0x168>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d004      	beq.n	8001cbe <HAL_ADC_Start_IT+0xaa>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2f      	ldr	r2, [pc, #188]	; (8001d78 <HAL_ADC_Start_IT+0x164>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d10d      	bne.n	8001cda <HAL_ADC_Start_IT+0xc6>
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_ADC_Start_IT+0x168>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d006      	beq.n	8001cf4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f023 0206 	bic.w	r2, r3, #6
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cf2:	e002      	b.n	8001cfa <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f06f 0202 	mvn.w	r2, #2
 8001d0a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d26:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d2a:	d113      	bne.n	8001d54 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d30:	4a11      	ldr	r2, [pc, #68]	; (8001d78 <HAL_ADC_Start_IT+0x164>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d105      	bne.n	8001d42 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_ADC_Start_IT+0x168>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d108      	bne.n	8001d54 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	e00c      	b.n	8001d6e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	e003      	b.n	8001d6e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40012800 	.word	0x40012800
 8001d7c:	40012400 	.word	0x40012400

08001d80 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a64      	ldr	r2, [pc, #400]	; (8001f28 <HAL_ADC_Start_DMA+0x1a8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d004      	beq.n	8001da4 <HAL_ADC_Start_DMA+0x24>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a63      	ldr	r2, [pc, #396]	; (8001f2c <HAL_ADC_Start_DMA+0x1ac>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d106      	bne.n	8001db2 <HAL_ADC_Start_DMA+0x32>
 8001da4:	4b60      	ldr	r3, [pc, #384]	; (8001f28 <HAL_ADC_Start_DMA+0x1a8>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f040 80b3 	bne.w	8001f18 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_Start_DMA+0x40>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e0ae      	b.n	8001f1e <HAL_ADC_Start_DMA+0x19e>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 fa97 	bl	80022fc <ADC_Enable>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f040 809a 	bne.w	8001f0e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a4e      	ldr	r2, [pc, #312]	; (8001f2c <HAL_ADC_Start_DMA+0x1ac>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d105      	bne.n	8001e04 <HAL_ADC_Start_DMA+0x84>
 8001df8:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_ADC_Start_DMA+0x1a8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d115      	bne.n	8001e30 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d026      	beq.n	8001e6c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e2e:	e01d      	b.n	8001e6c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a39      	ldr	r2, [pc, #228]	; (8001f28 <HAL_ADC_Start_DMA+0x1a8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d004      	beq.n	8001e50 <HAL_ADC_Start_DMA+0xd0>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a38      	ldr	r2, [pc, #224]	; (8001f2c <HAL_ADC_Start_DMA+0x1ac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d10d      	bne.n	8001e6c <HAL_ADC_Start_DMA+0xec>
 8001e50:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <HAL_ADC_Start_DMA+0x1a8>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	f023 0206 	bic.w	r2, r3, #6
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e84:	e002      	b.n	8001e8c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a25      	ldr	r2, [pc, #148]	; (8001f30 <HAL_ADC_Start_DMA+0x1b0>)
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a24      	ldr	r2, [pc, #144]	; (8001f34 <HAL_ADC_Start_DMA+0x1b4>)
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <HAL_ADC_Start_DMA+0x1b8>)
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0202 	mvn.w	r2, #2
 8001eb4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a18      	ldr	r0, [r3, #32]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	334c      	adds	r3, #76	; 0x4c
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f000 fd4d 	bl	8002974 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ee4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ee8:	d108      	bne.n	8001efc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ef8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001efa:	e00f      	b.n	8001f1c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f0a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f0c:	e006      	b.n	8001f1c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001f16:	e001      	b.n	8001f1c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40012400 	.word	0x40012400
 8001f2c:	40012800 	.word	0x40012800
 8001f30:	08002433 	.word	0x08002433
 8001f34:	080024af 	.word	0x080024af
 8001f38:	080024cb 	.word	0x080024cb

08001f3c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d140      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d139      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f86:	d11d      	bne.n	8001fc4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d119      	bne.n	8001fc4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0220 	bic.w	r2, r2, #32
 8001f9e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f87c 	bl	80020c2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f06f 0212 	mvn.w	r2, #18
 8001fd2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fde:	2b80      	cmp	r3, #128	; 0x80
 8001fe0:	d14f      	bne.n	8002082 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d148      	bne.n	8002082 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002012:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002016:	d012      	beq.n	800203e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002022:	2b00      	cmp	r3, #0
 8002024:	d125      	bne.n	8002072 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002030:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002034:	d11d      	bne.n	8002072 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800203a:	2b00      	cmp	r3, #0
 800203c:	d119      	bne.n	8002072 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800204c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 faf0 	bl	8002658 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 020c 	mvn.w	r2, #12
 8002080:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b40      	cmp	r3, #64	; 0x40
 800208e:	d114      	bne.n	80020ba <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d10d      	bne.n	80020ba <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f81b 	bl	80020e6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0201 	mvn.w	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
	...

0800210c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x20>
 8002128:	2302      	movs	r3, #2
 800212a:	e0dc      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x1da>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b06      	cmp	r3, #6
 800213a:	d81c      	bhi.n	8002176 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	3b05      	subs	r3, #5
 800214e:	221f      	movs	r2, #31
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	4019      	ands	r1, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	3b05      	subs	r3, #5
 8002168:	fa00 f203 	lsl.w	r2, r0, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	635a      	str	r2, [r3, #52]	; 0x34
 8002174:	e03c      	b.n	80021f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d81c      	bhi.n	80021b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3b23      	subs	r3, #35	; 0x23
 8002190:	221f      	movs	r2, #31
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	4019      	ands	r1, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3b23      	subs	r3, #35	; 0x23
 80021aa:	fa00 f203 	lsl.w	r2, r0, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
 80021b6:	e01b      	b.n	80021f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	3b41      	subs	r3, #65	; 0x41
 80021ca:	221f      	movs	r2, #31
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	4019      	ands	r1, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	3b41      	subs	r3, #65	; 0x41
 80021e4:	fa00 f203 	lsl.w	r2, r0, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b09      	cmp	r3, #9
 80021f6:	d91c      	bls.n	8002232 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68d9      	ldr	r1, [r3, #12]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	3b1e      	subs	r3, #30
 800220a:	2207      	movs	r2, #7
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	4019      	ands	r1, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6898      	ldr	r0, [r3, #8]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	3b1e      	subs	r3, #30
 8002224:	fa00 f203 	lsl.w	r2, r0, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	e019      	b.n	8002266 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6919      	ldr	r1, [r3, #16]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	2207      	movs	r2, #7
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	4019      	ands	r1, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6898      	ldr	r0, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	fa00 f203 	lsl.w	r2, r0, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b10      	cmp	r3, #16
 800226c:	d003      	beq.n	8002276 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002272:	2b11      	cmp	r3, #17
 8002274:	d132      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d125      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d126      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800229c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d11a      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	0c9a      	lsrs	r2, r3, #18
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022bc:	e002      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f9      	bne.n	80022be <HAL_ADC_ConfigChannel+0x1b2>
 80022ca:	e007      	b.n	80022dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	40012400 	.word	0x40012400
 80022f4:	20000000 	.word	0x20000000
 80022f8:	431bde83 	.word	0x431bde83

080022fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d040      	beq.n	800239c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800232a:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <ADC_Enable+0xac>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <ADC_Enable+0xb0>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	0c9b      	lsrs	r3, r3, #18
 8002336:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002338:	e002      	b.n	8002340 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3b01      	subs	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f9      	bne.n	800233a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002346:	f7ff fb4f 	bl	80019e8 <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800234c:	e01f      	b.n	800238e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800234e:	f7ff fb4b 	bl	80019e8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d918      	bls.n	800238e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b01      	cmp	r3, #1
 8002368:	d011      	beq.n	800238e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	f043 0210 	orr.w	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e007      	b.n	800239e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d1d8      	bne.n	800234e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000000 	.word	0x20000000
 80023ac:	431bde83 	.word	0x431bde83

080023b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d12e      	bne.n	8002428 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023da:	f7ff fb05 	bl	80019e8 <HAL_GetTick>
 80023de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023e0:	e01b      	b.n	800241a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023e2:	f7ff fb01 	bl	80019e8 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d914      	bls.n	800241a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10d      	bne.n	800241a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	f043 0210 	orr.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e007      	b.n	800242a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d0dc      	beq.n	80023e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002448:	2b00      	cmp	r3, #0
 800244a:	d127      	bne.n	800249c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002462:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002466:	d115      	bne.n	8002494 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800246c:	2b00      	cmp	r3, #0
 800246e:	d111      	bne.n	8002494 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f7ff fe14 	bl	80020c2 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800249a:	e004      	b.n	80024a6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	4798      	blx	r3
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff fe09 	bl	80020d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f043 0204 	orr.w	r2, r3, #4
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7ff fe01 	bl	80020f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_ADCEx_Calibration_Start+0x1e>
 800251a:	2302      	movs	r3, #2
 800251c:	e095      	b.n	800264a <HAL_ADCEx_Calibration_Start+0x14a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ff42 	bl	80023b0 <ADC_ConversionStop_Disable>
 800252c:	4603      	mov	r3, r0
 800252e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002530:	7dfb      	ldrb	r3, [r7, #23]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 8084 	bne.w	8002640 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002540:	f023 0302 	bic.w	r3, r3, #2
 8002544:	f043 0202 	orr.w	r2, r3, #2
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800254c:	4b41      	ldr	r3, [pc, #260]	; (8002654 <HAL_ADCEx_Calibration_Start+0x154>)
 800254e:	681c      	ldr	r4, [r3, #0]
 8002550:	2002      	movs	r0, #2
 8002552:	f001 fc6f 	bl	8003e34 <HAL_RCCEx_GetPeriphCLKFreq>
 8002556:	4603      	mov	r3, r0
 8002558:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800255c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800255e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002560:	e002      	b.n	8002568 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3b01      	subs	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f9      	bne.n	8002562 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fec4 	bl	80022fc <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0208 	orr.w	r2, r2, #8
 8002582:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002584:	f7ff fa30 	bl	80019e8 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800258a:	e01b      	b.n	80025c4 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800258c:	f7ff fa2c 	bl	80019e8 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b0a      	cmp	r3, #10
 8002598:	d914      	bls.n	80025c4 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	f023 0312 	bic.w	r3, r3, #18
 80025b0:	f043 0210 	orr.w	r2, r3, #16
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e042      	b.n	800264a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1dc      	bne.n	800258c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0204 	orr.w	r2, r2, #4
 80025e0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80025e2:	f7ff fa01 	bl	80019e8 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80025e8:	e01b      	b.n	8002622 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80025ea:	f7ff f9fd 	bl	80019e8 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b0a      	cmp	r3, #10
 80025f6:	d914      	bls.n	8002622 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00d      	beq.n	8002622 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	f023 0312 	bic.w	r3, r3, #18
 800260e:	f043 0210 	orr.w	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e013      	b.n	800264a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1dc      	bne.n	80025ea <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	f023 0303 	bic.w	r3, r3, #3
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002648:	7dfb      	ldrb	r3, [r7, #23]
}
 800264a:	4618      	mov	r0, r3
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}
 8002652:	bf00      	nop
 8002654:	20000000 	.word	0x20000000

08002658 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
	...

0800266c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269e:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	60d3      	str	r3, [r2, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db0b      	blt.n	80026fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4906      	ldr	r1, [pc, #24]	; (8002704 <__NVIC_EnableIRQ+0x34>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff90 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff2d 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff42 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff90 	bl	800275c <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5f 	bl	8002708 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff35 	bl	80026d0 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa2 	bl	80027c0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e059      	b.n	8002952 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_DMA_Init+0xd4>)
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d80f      	bhi.n	80028ca <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <HAL_DMA_Init+0xd8>)
 80028b2:	4413      	add	r3, r2
 80028b4:	4a2b      	ldr	r2, [pc, #172]	; (8002964 <HAL_DMA_Init+0xdc>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	009a      	lsls	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a28      	ldr	r2, [pc, #160]	; (8002968 <HAL_DMA_Init+0xe0>)
 80028c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028c8:	e00e      	b.n	80028e8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_DMA_Init+0xe4>)
 80028d2:	4413      	add	r3, r2
 80028d4:	4a23      	ldr	r2, [pc, #140]	; (8002964 <HAL_DMA_Init+0xdc>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	009a      	lsls	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a22      	ldr	r2, [pc, #136]	; (8002970 <HAL_DMA_Init+0xe8>)
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002902:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40020407 	.word	0x40020407
 8002960:	bffdfff8 	.word	0xbffdfff8
 8002964:	cccccccd 	.word	0xcccccccd
 8002968:	40020000 	.word	0x40020000
 800296c:	bffdfbf8 	.word	0xbffdfbf8
 8002970:	40020400 	.word	0x40020400

08002974 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_DMA_Start_IT+0x20>
 8002990:	2302      	movs	r3, #2
 8002992:	e04a      	b.n	8002a2a <HAL_DMA_Start_IT+0xb6>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d13a      	bne.n	8002a1c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fbb0 	bl	8003130 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 020e 	orr.w	r2, r2, #14
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e00f      	b.n	8002a0a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0204 	bic.w	r2, r2, #4
 80029f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 020a 	orr.w	r2, r2, #10
 8002a08:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e005      	b.n	8002a28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
 8002a26:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d008      	beq.n	8002a5a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e020      	b.n	8002a9c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 020e 	bic.w	r2, r2, #14
 8002a68:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d005      	beq.n	8002aca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	e0d6      	b.n	8002c78 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 020e 	bic.w	r2, r2, #14
 8002ad8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b64      	ldr	r3, [pc, #400]	; (8002c84 <HAL_DMA_Abort_IT+0x1dc>)
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d958      	bls.n	8002ba8 <HAL_DMA_Abort_IT+0x100>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a63      	ldr	r2, [pc, #396]	; (8002c88 <HAL_DMA_Abort_IT+0x1e0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d04f      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0xf8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a61      	ldr	r2, [pc, #388]	; (8002c8c <HAL_DMA_Abort_IT+0x1e4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d048      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xf4>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a60      	ldr	r2, [pc, #384]	; (8002c90 <HAL_DMA_Abort_IT+0x1e8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d040      	beq.n	8002b96 <HAL_DMA_Abort_IT+0xee>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a5e      	ldr	r2, [pc, #376]	; (8002c94 <HAL_DMA_Abort_IT+0x1ec>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d038      	beq.n	8002b90 <HAL_DMA_Abort_IT+0xe8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a5d      	ldr	r2, [pc, #372]	; (8002c98 <HAL_DMA_Abort_IT+0x1f0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d030      	beq.n	8002b8a <HAL_DMA_Abort_IT+0xe2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a5b      	ldr	r2, [pc, #364]	; (8002c9c <HAL_DMA_Abort_IT+0x1f4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d028      	beq.n	8002b84 <HAL_DMA_Abort_IT+0xdc>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a53      	ldr	r2, [pc, #332]	; (8002c84 <HAL_DMA_Abort_IT+0x1dc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d020      	beq.n	8002b7e <HAL_DMA_Abort_IT+0xd6>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a57      	ldr	r2, [pc, #348]	; (8002ca0 <HAL_DMA_Abort_IT+0x1f8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d019      	beq.n	8002b7a <HAL_DMA_Abort_IT+0xd2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a56      	ldr	r2, [pc, #344]	; (8002ca4 <HAL_DMA_Abort_IT+0x1fc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d012      	beq.n	8002b76 <HAL_DMA_Abort_IT+0xce>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a54      	ldr	r2, [pc, #336]	; (8002ca8 <HAL_DMA_Abort_IT+0x200>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00a      	beq.n	8002b70 <HAL_DMA_Abort_IT+0xc8>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a53      	ldr	r2, [pc, #332]	; (8002cac <HAL_DMA_Abort_IT+0x204>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d102      	bne.n	8002b6a <HAL_DMA_Abort_IT+0xc2>
 8002b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b68:	e01b      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xfa>
 8002b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b6e:	e018      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xfa>
 8002b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b74:	e015      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xfa>
 8002b76:	2310      	movs	r3, #16
 8002b78:	e013      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xfa>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e011      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xfa>
 8002b7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b82:	e00e      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xfa>
 8002b84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b88:	e00b      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xfa>
 8002b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b8e:	e008      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xfa>
 8002b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b94:	e005      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xfa>
 8002b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b9a:	e002      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xfa>
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	e000      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xfa>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	4a43      	ldr	r2, [pc, #268]	; (8002cb0 <HAL_DMA_Abort_IT+0x208>)
 8002ba4:	6053      	str	r3, [r2, #4]
 8002ba6:	e057      	b.n	8002c58 <HAL_DMA_Abort_IT+0x1b0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a36      	ldr	r2, [pc, #216]	; (8002c88 <HAL_DMA_Abort_IT+0x1e0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d04f      	beq.n	8002c52 <HAL_DMA_Abort_IT+0x1aa>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a35      	ldr	r2, [pc, #212]	; (8002c8c <HAL_DMA_Abort_IT+0x1e4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d048      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x1a6>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a33      	ldr	r2, [pc, #204]	; (8002c90 <HAL_DMA_Abort_IT+0x1e8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d040      	beq.n	8002c48 <HAL_DMA_Abort_IT+0x1a0>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a32      	ldr	r2, [pc, #200]	; (8002c94 <HAL_DMA_Abort_IT+0x1ec>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d038      	beq.n	8002c42 <HAL_DMA_Abort_IT+0x19a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a30      	ldr	r2, [pc, #192]	; (8002c98 <HAL_DMA_Abort_IT+0x1f0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d030      	beq.n	8002c3c <HAL_DMA_Abort_IT+0x194>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2f      	ldr	r2, [pc, #188]	; (8002c9c <HAL_DMA_Abort_IT+0x1f4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d028      	beq.n	8002c36 <HAL_DMA_Abort_IT+0x18e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <HAL_DMA_Abort_IT+0x1dc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d020      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x188>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <HAL_DMA_Abort_IT+0x1f8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d019      	beq.n	8002c2c <HAL_DMA_Abort_IT+0x184>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a29      	ldr	r2, [pc, #164]	; (8002ca4 <HAL_DMA_Abort_IT+0x1fc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d012      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x180>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a28      	ldr	r2, [pc, #160]	; (8002ca8 <HAL_DMA_Abort_IT+0x200>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00a      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x17a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a26      	ldr	r2, [pc, #152]	; (8002cac <HAL_DMA_Abort_IT+0x204>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d102      	bne.n	8002c1c <HAL_DMA_Abort_IT+0x174>
 8002c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c1a:	e01b      	b.n	8002c54 <HAL_DMA_Abort_IT+0x1ac>
 8002c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c20:	e018      	b.n	8002c54 <HAL_DMA_Abort_IT+0x1ac>
 8002c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c26:	e015      	b.n	8002c54 <HAL_DMA_Abort_IT+0x1ac>
 8002c28:	2310      	movs	r3, #16
 8002c2a:	e013      	b.n	8002c54 <HAL_DMA_Abort_IT+0x1ac>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e011      	b.n	8002c54 <HAL_DMA_Abort_IT+0x1ac>
 8002c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c34:	e00e      	b.n	8002c54 <HAL_DMA_Abort_IT+0x1ac>
 8002c36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c3a:	e00b      	b.n	8002c54 <HAL_DMA_Abort_IT+0x1ac>
 8002c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c40:	e008      	b.n	8002c54 <HAL_DMA_Abort_IT+0x1ac>
 8002c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c46:	e005      	b.n	8002c54 <HAL_DMA_Abort_IT+0x1ac>
 8002c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c4c:	e002      	b.n	8002c54 <HAL_DMA_Abort_IT+0x1ac>
 8002c4e:	2310      	movs	r3, #16
 8002c50:	e000      	b.n	8002c54 <HAL_DMA_Abort_IT+0x1ac>
 8002c52:	2301      	movs	r3, #1
 8002c54:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <HAL_DMA_Abort_IT+0x20c>)
 8002c56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
    } 
  }
  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40020080 	.word	0x40020080
 8002c88:	40020008 	.word	0x40020008
 8002c8c:	4002001c 	.word	0x4002001c
 8002c90:	40020030 	.word	0x40020030
 8002c94:	40020044 	.word	0x40020044
 8002c98:	40020058 	.word	0x40020058
 8002c9c:	4002006c 	.word	0x4002006c
 8002ca0:	40020408 	.word	0x40020408
 8002ca4:	4002041c 	.word	0x4002041c
 8002ca8:	40020430 	.word	0x40020430
 8002cac:	40020444 	.word	0x40020444
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	40020000 	.word	0x40020000

08002cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80d6 	beq.w	8002e8e <HAL_DMA_IRQHandler+0x1d6>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80d0 	beq.w	8002e8e <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0204 	bic.w	r2, r2, #4
 8002d0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b9b      	ldr	r3, [pc, #620]	; (8002f80 <HAL_DMA_IRQHandler+0x2c8>)
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d958      	bls.n	8002dca <HAL_DMA_IRQHandler+0x112>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a99      	ldr	r2, [pc, #612]	; (8002f84 <HAL_DMA_IRQHandler+0x2cc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d04f      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x10a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a98      	ldr	r2, [pc, #608]	; (8002f88 <HAL_DMA_IRQHandler+0x2d0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d048      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x106>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a96      	ldr	r2, [pc, #600]	; (8002f8c <HAL_DMA_IRQHandler+0x2d4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d040      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x100>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a95      	ldr	r2, [pc, #596]	; (8002f90 <HAL_DMA_IRQHandler+0x2d8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d038      	beq.n	8002db2 <HAL_DMA_IRQHandler+0xfa>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a93      	ldr	r2, [pc, #588]	; (8002f94 <HAL_DMA_IRQHandler+0x2dc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d030      	beq.n	8002dac <HAL_DMA_IRQHandler+0xf4>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a92      	ldr	r2, [pc, #584]	; (8002f98 <HAL_DMA_IRQHandler+0x2e0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d028      	beq.n	8002da6 <HAL_DMA_IRQHandler+0xee>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a89      	ldr	r2, [pc, #548]	; (8002f80 <HAL_DMA_IRQHandler+0x2c8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d020      	beq.n	8002da0 <HAL_DMA_IRQHandler+0xe8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a8e      	ldr	r2, [pc, #568]	; (8002f9c <HAL_DMA_IRQHandler+0x2e4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d019      	beq.n	8002d9c <HAL_DMA_IRQHandler+0xe4>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a8c      	ldr	r2, [pc, #560]	; (8002fa0 <HAL_DMA_IRQHandler+0x2e8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d012      	beq.n	8002d98 <HAL_DMA_IRQHandler+0xe0>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a8b      	ldr	r2, [pc, #556]	; (8002fa4 <HAL_DMA_IRQHandler+0x2ec>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00a      	beq.n	8002d92 <HAL_DMA_IRQHandler+0xda>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a89      	ldr	r2, [pc, #548]	; (8002fa8 <HAL_DMA_IRQHandler+0x2f0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d102      	bne.n	8002d8c <HAL_DMA_IRQHandler+0xd4>
 8002d86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d8a:	e01b      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x10c>
 8002d8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d90:	e018      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x10c>
 8002d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d96:	e015      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x10c>
 8002d98:	2340      	movs	r3, #64	; 0x40
 8002d9a:	e013      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x10c>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	e011      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x10c>
 8002da0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002da4:	e00e      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x10c>
 8002da6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002daa:	e00b      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x10c>
 8002dac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002db0:	e008      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x10c>
 8002db2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002db6:	e005      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x10c>
 8002db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dbc:	e002      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x10c>
 8002dbe:	2340      	movs	r3, #64	; 0x40
 8002dc0:	e000      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x10c>
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	4a79      	ldr	r2, [pc, #484]	; (8002fac <HAL_DMA_IRQHandler+0x2f4>)
 8002dc6:	6053      	str	r3, [r2, #4]
 8002dc8:	e057      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1c2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6d      	ldr	r2, [pc, #436]	; (8002f84 <HAL_DMA_IRQHandler+0x2cc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d04f      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x1bc>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a6b      	ldr	r2, [pc, #428]	; (8002f88 <HAL_DMA_IRQHandler+0x2d0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d048      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x1b8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6a      	ldr	r2, [pc, #424]	; (8002f8c <HAL_DMA_IRQHandler+0x2d4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d040      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x1b2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a68      	ldr	r2, [pc, #416]	; (8002f90 <HAL_DMA_IRQHandler+0x2d8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d038      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x1ac>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a67      	ldr	r2, [pc, #412]	; (8002f94 <HAL_DMA_IRQHandler+0x2dc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d030      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x1a6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a65      	ldr	r2, [pc, #404]	; (8002f98 <HAL_DMA_IRQHandler+0x2e0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d028      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x1a0>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a5d      	ldr	r2, [pc, #372]	; (8002f80 <HAL_DMA_IRQHandler+0x2c8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d020      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x19a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a61      	ldr	r2, [pc, #388]	; (8002f9c <HAL_DMA_IRQHandler+0x2e4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d019      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x196>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a60      	ldr	r2, [pc, #384]	; (8002fa0 <HAL_DMA_IRQHandler+0x2e8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d012      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x192>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a5e      	ldr	r2, [pc, #376]	; (8002fa4 <HAL_DMA_IRQHandler+0x2ec>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00a      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x18c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a5d      	ldr	r2, [pc, #372]	; (8002fa8 <HAL_DMA_IRQHandler+0x2f0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d102      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x186>
 8002e38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e3c:	e01b      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1be>
 8002e3e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e42:	e018      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1be>
 8002e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e48:	e015      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1be>
 8002e4a:	2340      	movs	r3, #64	; 0x40
 8002e4c:	e013      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1be>
 8002e4e:	2304      	movs	r3, #4
 8002e50:	e011      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1be>
 8002e52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e56:	e00e      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1be>
 8002e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e5c:	e00b      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1be>
 8002e5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e62:	e008      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1be>
 8002e64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e68:	e005      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1be>
 8002e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e6e:	e002      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1be>
 8002e70:	2340      	movs	r3, #64	; 0x40
 8002e72:	e000      	b.n	8002e76 <HAL_DMA_IRQHandler+0x1be>
 8002e74:	2304      	movs	r3, #4
 8002e76:	4a4e      	ldr	r2, [pc, #312]	; (8002fb0 <HAL_DMA_IRQHandler+0x2f8>)
 8002e78:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8136 	beq.w	80030f0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e8c:	e130      	b.n	80030f0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	2202      	movs	r2, #2
 8002e94:	409a      	lsls	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80f8 	beq.w	8003090 <HAL_DMA_IRQHandler+0x3d8>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80f2 	beq.w	8003090 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 020a 	bic.w	r2, r2, #10
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_DMA_IRQHandler+0x2c8>)
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d973      	bls.n	8002fc6 <HAL_DMA_IRQHandler+0x30e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <HAL_DMA_IRQHandler+0x2cc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d06a      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x306>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <HAL_DMA_IRQHandler+0x2d0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d063      	beq.n	8002fba <HAL_DMA_IRQHandler+0x302>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a25      	ldr	r2, [pc, #148]	; (8002f8c <HAL_DMA_IRQHandler+0x2d4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d05b      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x2fc>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a23      	ldr	r2, [pc, #140]	; (8002f90 <HAL_DMA_IRQHandler+0x2d8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d038      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x2c0>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <HAL_DMA_IRQHandler+0x2dc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d030      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x2ba>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a20      	ldr	r2, [pc, #128]	; (8002f98 <HAL_DMA_IRQHandler+0x2e0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d028      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x2b4>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_DMA_IRQHandler+0x2c8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d020      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x2ae>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <HAL_DMA_IRQHandler+0x2e4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x2aa>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <HAL_DMA_IRQHandler+0x2e8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d012      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2a6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <HAL_DMA_IRQHandler+0x2ec>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00a      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x2a0>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <HAL_DMA_IRQHandler+0x2f0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d102      	bne.n	8002f52 <HAL_DMA_IRQHandler+0x29a>
 8002f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f50:	e036      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x308>
 8002f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f56:	e033      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x308>
 8002f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f5c:	e030      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x308>
 8002f5e:	2320      	movs	r3, #32
 8002f60:	e02e      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x308>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e02c      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x308>
 8002f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f6a:	e029      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x308>
 8002f6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f70:	e026      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x308>
 8002f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f76:	e023      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x308>
 8002f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f7c:	e020      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x308>
 8002f7e:	bf00      	nop
 8002f80:	40020080 	.word	0x40020080
 8002f84:	40020008 	.word	0x40020008
 8002f88:	4002001c 	.word	0x4002001c
 8002f8c:	40020030 	.word	0x40020030
 8002f90:	40020044 	.word	0x40020044
 8002f94:	40020058 	.word	0x40020058
 8002f98:	4002006c 	.word	0x4002006c
 8002f9c:	40020408 	.word	0x40020408
 8002fa0:	4002041c 	.word	0x4002041c
 8002fa4:	40020430 	.word	0x40020430
 8002fa8:	40020444 	.word	0x40020444
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fb8:	e002      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x308>
 8002fba:	2320      	movs	r3, #32
 8002fbc:	e000      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x308>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	4a4e      	ldr	r2, [pc, #312]	; (80030fc <HAL_DMA_IRQHandler+0x444>)
 8002fc2:	6053      	str	r3, [r2, #4]
 8002fc4:	e057      	b.n	8003076 <HAL_DMA_IRQHandler+0x3be>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a4d      	ldr	r2, [pc, #308]	; (8003100 <HAL_DMA_IRQHandler+0x448>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d04f      	beq.n	8003070 <HAL_DMA_IRQHandler+0x3b8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a4b      	ldr	r2, [pc, #300]	; (8003104 <HAL_DMA_IRQHandler+0x44c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d048      	beq.n	800306c <HAL_DMA_IRQHandler+0x3b4>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a4a      	ldr	r2, [pc, #296]	; (8003108 <HAL_DMA_IRQHandler+0x450>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d040      	beq.n	8003066 <HAL_DMA_IRQHandler+0x3ae>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a48      	ldr	r2, [pc, #288]	; (800310c <HAL_DMA_IRQHandler+0x454>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d038      	beq.n	8003060 <HAL_DMA_IRQHandler+0x3a8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a47      	ldr	r2, [pc, #284]	; (8003110 <HAL_DMA_IRQHandler+0x458>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d030      	beq.n	800305a <HAL_DMA_IRQHandler+0x3a2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a45      	ldr	r2, [pc, #276]	; (8003114 <HAL_DMA_IRQHandler+0x45c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d028      	beq.n	8003054 <HAL_DMA_IRQHandler+0x39c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a44      	ldr	r2, [pc, #272]	; (8003118 <HAL_DMA_IRQHandler+0x460>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d020      	beq.n	800304e <HAL_DMA_IRQHandler+0x396>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a42      	ldr	r2, [pc, #264]	; (800311c <HAL_DMA_IRQHandler+0x464>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d019      	beq.n	800304a <HAL_DMA_IRQHandler+0x392>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a41      	ldr	r2, [pc, #260]	; (8003120 <HAL_DMA_IRQHandler+0x468>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d012      	beq.n	8003046 <HAL_DMA_IRQHandler+0x38e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3f      	ldr	r2, [pc, #252]	; (8003124 <HAL_DMA_IRQHandler+0x46c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00a      	beq.n	8003040 <HAL_DMA_IRQHandler+0x388>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a3e      	ldr	r2, [pc, #248]	; (8003128 <HAL_DMA_IRQHandler+0x470>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d102      	bne.n	800303a <HAL_DMA_IRQHandler+0x382>
 8003034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003038:	e01b      	b.n	8003072 <HAL_DMA_IRQHandler+0x3ba>
 800303a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800303e:	e018      	b.n	8003072 <HAL_DMA_IRQHandler+0x3ba>
 8003040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003044:	e015      	b.n	8003072 <HAL_DMA_IRQHandler+0x3ba>
 8003046:	2320      	movs	r3, #32
 8003048:	e013      	b.n	8003072 <HAL_DMA_IRQHandler+0x3ba>
 800304a:	2302      	movs	r3, #2
 800304c:	e011      	b.n	8003072 <HAL_DMA_IRQHandler+0x3ba>
 800304e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003052:	e00e      	b.n	8003072 <HAL_DMA_IRQHandler+0x3ba>
 8003054:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003058:	e00b      	b.n	8003072 <HAL_DMA_IRQHandler+0x3ba>
 800305a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800305e:	e008      	b.n	8003072 <HAL_DMA_IRQHandler+0x3ba>
 8003060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003064:	e005      	b.n	8003072 <HAL_DMA_IRQHandler+0x3ba>
 8003066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800306a:	e002      	b.n	8003072 <HAL_DMA_IRQHandler+0x3ba>
 800306c:	2320      	movs	r3, #32
 800306e:	e000      	b.n	8003072 <HAL_DMA_IRQHandler+0x3ba>
 8003070:	2302      	movs	r3, #2
 8003072:	4a2e      	ldr	r2, [pc, #184]	; (800312c <HAL_DMA_IRQHandler+0x474>)
 8003074:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d034      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800308e:	e02f      	b.n	80030f0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	2208      	movs	r2, #8
 8003096:	409a      	lsls	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d028      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x43a>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d023      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 020e 	bic.w	r2, r2, #14
 80030b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f202 	lsl.w	r2, r1, r2
 80030c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
    }
  }
  return;
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
}
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40020400 	.word	0x40020400
 8003100:	40020008 	.word	0x40020008
 8003104:	4002001c 	.word	0x4002001c
 8003108:	40020030 	.word	0x40020030
 800310c:	40020044 	.word	0x40020044
 8003110:	40020058 	.word	0x40020058
 8003114:	4002006c 	.word	0x4002006c
 8003118:	40020080 	.word	0x40020080
 800311c:	40020408 	.word	0x40020408
 8003120:	4002041c 	.word	0x4002041c
 8003124:	40020430 	.word	0x40020430
 8003128:	40020444 	.word	0x40020444
 800312c:	40020000 	.word	0x40020000

08003130 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	2101      	movs	r1, #1
 8003148:	fa01 f202 	lsl.w	r2, r1, r2
 800314c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b10      	cmp	r3, #16
 800315c:	d108      	bne.n	8003170 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800316e:	e007      	b.n	8003180 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	60da      	str	r2, [r3, #12]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
	...

0800318c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800318c:	b480      	push	{r7}
 800318e:	b08b      	sub	sp, #44	; 0x2c
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800319a:	2300      	movs	r3, #0
 800319c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319e:	e133      	b.n	8003408 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031a0:	2201      	movs	r2, #1
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	f040 8122 	bne.w	8003402 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b12      	cmp	r3, #18
 80031c4:	d034      	beq.n	8003230 <HAL_GPIO_Init+0xa4>
 80031c6:	2b12      	cmp	r3, #18
 80031c8:	d80d      	bhi.n	80031e6 <HAL_GPIO_Init+0x5a>
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d02b      	beq.n	8003226 <HAL_GPIO_Init+0x9a>
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d804      	bhi.n	80031dc <HAL_GPIO_Init+0x50>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d031      	beq.n	800323a <HAL_GPIO_Init+0xae>
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d01c      	beq.n	8003214 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031da:	e048      	b.n	800326e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d043      	beq.n	8003268 <HAL_GPIO_Init+0xdc>
 80031e0:	2b11      	cmp	r3, #17
 80031e2:	d01b      	beq.n	800321c <HAL_GPIO_Init+0x90>
          break;
 80031e4:	e043      	b.n	800326e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031e6:	4a8f      	ldr	r2, [pc, #572]	; (8003424 <HAL_GPIO_Init+0x298>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d026      	beq.n	800323a <HAL_GPIO_Init+0xae>
 80031ec:	4a8d      	ldr	r2, [pc, #564]	; (8003424 <HAL_GPIO_Init+0x298>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d806      	bhi.n	8003200 <HAL_GPIO_Init+0x74>
 80031f2:	4a8d      	ldr	r2, [pc, #564]	; (8003428 <HAL_GPIO_Init+0x29c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d020      	beq.n	800323a <HAL_GPIO_Init+0xae>
 80031f8:	4a8c      	ldr	r2, [pc, #560]	; (800342c <HAL_GPIO_Init+0x2a0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d01d      	beq.n	800323a <HAL_GPIO_Init+0xae>
          break;
 80031fe:	e036      	b.n	800326e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003200:	4a8b      	ldr	r2, [pc, #556]	; (8003430 <HAL_GPIO_Init+0x2a4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d019      	beq.n	800323a <HAL_GPIO_Init+0xae>
 8003206:	4a8b      	ldr	r2, [pc, #556]	; (8003434 <HAL_GPIO_Init+0x2a8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d016      	beq.n	800323a <HAL_GPIO_Init+0xae>
 800320c:	4a8a      	ldr	r2, [pc, #552]	; (8003438 <HAL_GPIO_Init+0x2ac>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <HAL_GPIO_Init+0xae>
          break;
 8003212:	e02c      	b.n	800326e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	623b      	str	r3, [r7, #32]
          break;
 800321a:	e028      	b.n	800326e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	3304      	adds	r3, #4
 8003222:	623b      	str	r3, [r7, #32]
          break;
 8003224:	e023      	b.n	800326e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	3308      	adds	r3, #8
 800322c:	623b      	str	r3, [r7, #32]
          break;
 800322e:	e01e      	b.n	800326e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	330c      	adds	r3, #12
 8003236:	623b      	str	r3, [r7, #32]
          break;
 8003238:	e019      	b.n	800326e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003242:	2304      	movs	r3, #4
 8003244:	623b      	str	r3, [r7, #32]
          break;
 8003246:	e012      	b.n	800326e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003250:	2308      	movs	r3, #8
 8003252:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	611a      	str	r2, [r3, #16]
          break;
 800325a:	e008      	b.n	800326e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800325c:	2308      	movs	r3, #8
 800325e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	615a      	str	r2, [r3, #20]
          break;
 8003266:	e002      	b.n	800326e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003268:	2300      	movs	r3, #0
 800326a:	623b      	str	r3, [r7, #32]
          break;
 800326c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2bff      	cmp	r3, #255	; 0xff
 8003272:	d801      	bhi.n	8003278 <HAL_GPIO_Init+0xec>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	e001      	b.n	800327c <HAL_GPIO_Init+0xf0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2bff      	cmp	r3, #255	; 0xff
 8003282:	d802      	bhi.n	800328a <HAL_GPIO_Init+0xfe>
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	e002      	b.n	8003290 <HAL_GPIO_Init+0x104>
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	3b08      	subs	r3, #8
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	210f      	movs	r1, #15
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	401a      	ands	r2, r3
 80032a2:	6a39      	ldr	r1, [r7, #32]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	431a      	orrs	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a2 	beq.w	8003402 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032be:	4b5f      	ldr	r3, [pc, #380]	; (800343c <HAL_GPIO_Init+0x2b0>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	4a5e      	ldr	r2, [pc, #376]	; (800343c <HAL_GPIO_Init+0x2b0>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6193      	str	r3, [r2, #24]
 80032ca:	4b5c      	ldr	r3, [pc, #368]	; (800343c <HAL_GPIO_Init+0x2b0>)
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032d6:	4a5a      	ldr	r2, [pc, #360]	; (8003440 <HAL_GPIO_Init+0x2b4>)
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4013      	ands	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a51      	ldr	r2, [pc, #324]	; (8003444 <HAL_GPIO_Init+0x2b8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <HAL_GPIO_Init+0x1b6>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a50      	ldr	r2, [pc, #320]	; (8003448 <HAL_GPIO_Init+0x2bc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d019      	beq.n	800333e <HAL_GPIO_Init+0x1b2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4f      	ldr	r2, [pc, #316]	; (800344c <HAL_GPIO_Init+0x2c0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_GPIO_Init+0x1ae>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4e      	ldr	r2, [pc, #312]	; (8003450 <HAL_GPIO_Init+0x2c4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00d      	beq.n	8003336 <HAL_GPIO_Init+0x1aa>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4d      	ldr	r2, [pc, #308]	; (8003454 <HAL_GPIO_Init+0x2c8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <HAL_GPIO_Init+0x1a6>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4c      	ldr	r2, [pc, #304]	; (8003458 <HAL_GPIO_Init+0x2cc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_GPIO_Init+0x1a2>
 800332a:	2305      	movs	r3, #5
 800332c:	e00a      	b.n	8003344 <HAL_GPIO_Init+0x1b8>
 800332e:	2306      	movs	r3, #6
 8003330:	e008      	b.n	8003344 <HAL_GPIO_Init+0x1b8>
 8003332:	2304      	movs	r3, #4
 8003334:	e006      	b.n	8003344 <HAL_GPIO_Init+0x1b8>
 8003336:	2303      	movs	r3, #3
 8003338:	e004      	b.n	8003344 <HAL_GPIO_Init+0x1b8>
 800333a:	2302      	movs	r3, #2
 800333c:	e002      	b.n	8003344 <HAL_GPIO_Init+0x1b8>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_GPIO_Init+0x1b8>
 8003342:	2300      	movs	r3, #0
 8003344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003346:	f002 0203 	and.w	r2, r2, #3
 800334a:	0092      	lsls	r2, r2, #2
 800334c:	4093      	lsls	r3, r2
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003354:	493a      	ldr	r1, [pc, #232]	; (8003440 <HAL_GPIO_Init+0x2b4>)
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	089b      	lsrs	r3, r3, #2
 800335a:	3302      	adds	r3, #2
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800336e:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_GPIO_Init+0x2d0>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	493a      	ldr	r1, [pc, #232]	; (800345c <HAL_GPIO_Init+0x2d0>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
 800337a:	e006      	b.n	800338a <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800337c:	4b37      	ldr	r3, [pc, #220]	; (800345c <HAL_GPIO_Init+0x2d0>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	43db      	mvns	r3, r3
 8003384:	4935      	ldr	r1, [pc, #212]	; (800345c <HAL_GPIO_Init+0x2d0>)
 8003386:	4013      	ands	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003396:	4b31      	ldr	r3, [pc, #196]	; (800345c <HAL_GPIO_Init+0x2d0>)
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4930      	ldr	r1, [pc, #192]	; (800345c <HAL_GPIO_Init+0x2d0>)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	4313      	orrs	r3, r2
 80033a0:	604b      	str	r3, [r1, #4]
 80033a2:	e006      	b.n	80033b2 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033a4:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_GPIO_Init+0x2d0>)
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	492b      	ldr	r1, [pc, #172]	; (800345c <HAL_GPIO_Init+0x2d0>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d006      	beq.n	80033cc <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033be:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_GPIO_Init+0x2d0>)
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	4926      	ldr	r1, [pc, #152]	; (800345c <HAL_GPIO_Init+0x2d0>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
 80033ca:	e006      	b.n	80033da <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033cc:	4b23      	ldr	r3, [pc, #140]	; (800345c <HAL_GPIO_Init+0x2d0>)
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	4921      	ldr	r1, [pc, #132]	; (800345c <HAL_GPIO_Init+0x2d0>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_GPIO_Init+0x2d0>)
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	491c      	ldr	r1, [pc, #112]	; (800345c <HAL_GPIO_Init+0x2d0>)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60cb      	str	r3, [r1, #12]
 80033f2:	e006      	b.n	8003402 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_GPIO_Init+0x2d0>)
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	4917      	ldr	r1, [pc, #92]	; (800345c <HAL_GPIO_Init+0x2d0>)
 80033fe:	4013      	ands	r3, r2
 8003400:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	3301      	adds	r3, #1
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	f47f aec4 	bne.w	80031a0 <HAL_GPIO_Init+0x14>
  }
}
 8003418:	bf00      	nop
 800341a:	372c      	adds	r7, #44	; 0x2c
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	10210000 	.word	0x10210000
 8003428:	10110000 	.word	0x10110000
 800342c:	10120000 	.word	0x10120000
 8003430:	10310000 	.word	0x10310000
 8003434:	10320000 	.word	0x10320000
 8003438:	10220000 	.word	0x10220000
 800343c:	40021000 	.word	0x40021000
 8003440:	40010000 	.word	0x40010000
 8003444:	40010800 	.word	0x40010800
 8003448:	40010c00 	.word	0x40010c00
 800344c:	40011000 	.word	0x40011000
 8003450:	40011400 	.word	0x40011400
 8003454:	40011800 	.word	0x40011800
 8003458:	40011c00 	.word	0x40011c00
 800345c:	40010400 	.word	0x40010400

08003460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
 800346c:	4613      	mov	r3, r2
 800346e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003470:	787b      	ldrb	r3, [r7, #1]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800347c:	e003      	b.n	8003486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	041a      	lsls	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	611a      	str	r2, [r3, #16]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e26c      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8087 	beq.w	80035be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b0:	4b92      	ldr	r3, [pc, #584]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 030c 	and.w	r3, r3, #12
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d00c      	beq.n	80034d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034bc:	4b8f      	ldr	r3, [pc, #572]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d112      	bne.n	80034ee <HAL_RCC_OscConfig+0x5e>
 80034c8:	4b8c      	ldr	r3, [pc, #560]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d4:	d10b      	bne.n	80034ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d6:	4b89      	ldr	r3, [pc, #548]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d06c      	beq.n	80035bc <HAL_RCC_OscConfig+0x12c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d168      	bne.n	80035bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e246      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x76>
 80034f8:	4b80      	ldr	r3, [pc, #512]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a7f      	ldr	r2, [pc, #508]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80034fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	e02e      	b.n	8003564 <HAL_RCC_OscConfig+0xd4>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x98>
 800350e:	4b7b      	ldr	r3, [pc, #492]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7a      	ldr	r2, [pc, #488]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4b78      	ldr	r3, [pc, #480]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a77      	ldr	r2, [pc, #476]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e01d      	b.n	8003564 <HAL_RCC_OscConfig+0xd4>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0xbc>
 8003532:	4b72      	ldr	r3, [pc, #456]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a71      	ldr	r2, [pc, #452]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b6f      	ldr	r3, [pc, #444]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6e      	ldr	r2, [pc, #440]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e00b      	b.n	8003564 <HAL_RCC_OscConfig+0xd4>
 800354c:	4b6b      	ldr	r3, [pc, #428]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6a      	ldr	r2, [pc, #424]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4b68      	ldr	r3, [pc, #416]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a67      	ldr	r2, [pc, #412]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 800355e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003562:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe fa3c 	bl	80019e8 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fe fa38 	bl	80019e8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e1fa      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b5d      	ldr	r3, [pc, #372]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0xe4>
 8003592:	e014      	b.n	80035be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe fa28 	bl	80019e8 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800359c:	f7fe fa24 	bl	80019e8 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e1e6      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x10c>
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d063      	beq.n	8003692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ca:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035d6:	4b49      	ldr	r3, [pc, #292]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d11c      	bne.n	800361c <HAL_RCC_OscConfig+0x18c>
 80035e2:	4b46      	ldr	r3, [pc, #280]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d116      	bne.n	800361c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	4b43      	ldr	r3, [pc, #268]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_RCC_OscConfig+0x176>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d001      	beq.n	8003606 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e1ba      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003606:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4939      	ldr	r1, [pc, #228]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361a:	e03a      	b.n	8003692 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003624:	4b36      	ldr	r3, [pc, #216]	; (8003700 <HAL_RCC_OscConfig+0x270>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362a:	f7fe f9dd 	bl	80019e8 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003632:	f7fe f9d9 	bl	80019e8 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e19b      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003650:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4927      	ldr	r1, [pc, #156]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]
 8003664:	e015      	b.n	8003692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <HAL_RCC_OscConfig+0x270>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe f9bc 	bl	80019e8 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003674:	f7fe f9b8 	bl	80019e8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e17a      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d03a      	beq.n	8003714 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d019      	beq.n	80036da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a6:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_RCC_OscConfig+0x274>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ac:	f7fe f99c 	bl	80019e8 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b4:	f7fe f998 	bl	80019e8 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e15a      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <HAL_RCC_OscConfig+0x26c>)
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036d2:	2001      	movs	r0, #1
 80036d4:	f000 fada 	bl	8003c8c <RCC_Delay>
 80036d8:	e01c      	b.n	8003714 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_RCC_OscConfig+0x274>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e0:	f7fe f982 	bl	80019e8 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e6:	e00f      	b.n	8003708 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fe f97e 	bl	80019e8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d908      	bls.n	8003708 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e140      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	42420000 	.word	0x42420000
 8003704:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003708:	4b9e      	ldr	r3, [pc, #632]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e9      	bne.n	80036e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a6 	beq.w	800386e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003726:	4b97      	ldr	r3, [pc, #604]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10d      	bne.n	800374e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003732:	4b94      	ldr	r3, [pc, #592]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	4a93      	ldr	r2, [pc, #588]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373c:	61d3      	str	r3, [r2, #28]
 800373e:	4b91      	ldr	r3, [pc, #580]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374a:	2301      	movs	r3, #1
 800374c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	4b8e      	ldr	r3, [pc, #568]	; (8003988 <HAL_RCC_OscConfig+0x4f8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d118      	bne.n	800378c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375a:	4b8b      	ldr	r3, [pc, #556]	; (8003988 <HAL_RCC_OscConfig+0x4f8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a8a      	ldr	r2, [pc, #552]	; (8003988 <HAL_RCC_OscConfig+0x4f8>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003766:	f7fe f93f 	bl	80019e8 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376e:	f7fe f93b 	bl	80019e8 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b64      	cmp	r3, #100	; 0x64
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0fd      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	4b81      	ldr	r3, [pc, #516]	; (8003988 <HAL_RCC_OscConfig+0x4f8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0f0      	beq.n	800376e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x312>
 8003794:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	4a7a      	ldr	r2, [pc, #488]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6213      	str	r3, [r2, #32]
 80037a0:	e02d      	b.n	80037fe <HAL_RCC_OscConfig+0x36e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x334>
 80037aa:	4b76      	ldr	r3, [pc, #472]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	4a75      	ldr	r2, [pc, #468]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	6213      	str	r3, [r2, #32]
 80037b6:	4b73      	ldr	r3, [pc, #460]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	4a72      	ldr	r2, [pc, #456]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037bc:	f023 0304 	bic.w	r3, r3, #4
 80037c0:	6213      	str	r3, [r2, #32]
 80037c2:	e01c      	b.n	80037fe <HAL_RCC_OscConfig+0x36e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d10c      	bne.n	80037e6 <HAL_RCC_OscConfig+0x356>
 80037cc:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	4a6c      	ldr	r2, [pc, #432]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037d2:	f043 0304 	orr.w	r3, r3, #4
 80037d6:	6213      	str	r3, [r2, #32]
 80037d8:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	4a69      	ldr	r2, [pc, #420]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6213      	str	r3, [r2, #32]
 80037e4:	e00b      	b.n	80037fe <HAL_RCC_OscConfig+0x36e>
 80037e6:	4b67      	ldr	r3, [pc, #412]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4a66      	ldr	r2, [pc, #408]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	6213      	str	r3, [r2, #32]
 80037f2:	4b64      	ldr	r3, [pc, #400]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4a63      	ldr	r2, [pc, #396]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80037f8:	f023 0304 	bic.w	r3, r3, #4
 80037fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d015      	beq.n	8003832 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003806:	f7fe f8ef 	bl	80019e8 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380c:	e00a      	b.n	8003824 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fe f8eb 	bl	80019e8 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	; 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e0ab      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003824:	4b57      	ldr	r3, [pc, #348]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ee      	beq.n	800380e <HAL_RCC_OscConfig+0x37e>
 8003830:	e014      	b.n	800385c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003832:	f7fe f8d9 	bl	80019e8 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003838:	e00a      	b.n	8003850 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7fe f8d5 	bl	80019e8 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f241 3288 	movw	r2, #5000	; 0x1388
 8003848:	4293      	cmp	r3, r2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e095      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003850:	4b4c      	ldr	r3, [pc, #304]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ee      	bne.n	800383a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d105      	bne.n	800386e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003862:	4b48      	ldr	r3, [pc, #288]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	4a47      	ldr	r2, [pc, #284]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 8081 	beq.w	800397a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003878:	4b42      	ldr	r3, [pc, #264]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 030c 	and.w	r3, r3, #12
 8003880:	2b08      	cmp	r3, #8
 8003882:	d061      	beq.n	8003948 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d146      	bne.n	800391a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388c:	4b3f      	ldr	r3, [pc, #252]	; (800398c <HAL_RCC_OscConfig+0x4fc>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003892:	f7fe f8a9 	bl	80019e8 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389a:	f7fe f8a5 	bl	80019e8 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e067      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ac:	4b35      	ldr	r3, [pc, #212]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c0:	d108      	bne.n	80038d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038c2:	4b30      	ldr	r3, [pc, #192]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	492d      	ldr	r1, [pc, #180]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a19      	ldr	r1, [r3, #32]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	430b      	orrs	r3, r1
 80038e6:	4927      	ldr	r1, [pc, #156]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_OscConfig+0x4fc>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fe f879 	bl	80019e8 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fe f875 	bl	80019e8 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e037      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x46a>
 8003918:	e02f      	b.n	800397a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391a:	4b1c      	ldr	r3, [pc, #112]	; (800398c <HAL_RCC_OscConfig+0x4fc>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe f862 	bl	80019e8 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7fe f85e 	bl	80019e8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e020      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x498>
 8003946:	e018      	b.n	800397a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e013      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_OscConfig+0x4f4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	429a      	cmp	r2, r3
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	40007000 	.word	0x40007000
 800398c:	42420060 	.word	0x42420060

08003990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0d0      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b6a      	ldr	r3, [pc, #424]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d910      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b67      	ldr	r3, [pc, #412]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	4965      	ldr	r1, [pc, #404]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b63      	ldr	r3, [pc, #396]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0b8      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d020      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ec:	4b59      	ldr	r3, [pc, #356]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a58      	ldr	r2, [pc, #352]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a04:	4b53      	ldr	r3, [pc, #332]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a52      	ldr	r2, [pc, #328]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a10:	4b50      	ldr	r3, [pc, #320]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	494d      	ldr	r1, [pc, #308]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d040      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d115      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e07f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e073      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e06b      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6e:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f023 0203 	bic.w	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4936      	ldr	r1, [pc, #216]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a80:	f7fd ffb2 	bl	80019e8 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a88:	f7fd ffae 	bl	80019e8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e053      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 020c 	and.w	r2, r3, #12
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d1eb      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d210      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 0207 	bic.w	r2, r3, #7
 8003ac6:	4922      	ldr	r1, [pc, #136]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e032      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4916      	ldr	r1, [pc, #88]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	490e      	ldr	r1, [pc, #56]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b1e:	f000 f821 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8003b22:	4601      	mov	r1, r0
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	4a0a      	ldr	r2, [pc, #40]	; (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	5cd3      	ldrb	r3, [r2, r3]
 8003b32:	fa21 f303 	lsr.w	r3, r1, r3
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <HAL_RCC_ClockConfig+0x1cc>)
 8003b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_RCC_ClockConfig+0x1d0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd ff10 	bl	8001964 <HAL_InitTick>

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40022000 	.word	0x40022000
 8003b54:	40021000 	.word	0x40021000
 8003b58:	08005244 	.word	0x08005244
 8003b5c:	20000000 	.word	0x20000000
 8003b60:	20000004 	.word	0x20000004

08003b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b64:	b490      	push	{r4, r7}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b6a:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b6c:	1d3c      	adds	r4, r7, #4
 8003b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b74:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b8e:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d002      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d003      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0x46>
 8003ba2:	e02d      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ba4:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ba6:	623b      	str	r3, [r7, #32]
      break;
 8003ba8:	e02d      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	0c9b      	lsrs	r3, r3, #18
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bc8:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	0c5b      	lsrs	r3, r3, #17
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	4a0f      	ldr	r2, [pc, #60]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003be2:	fb02 f203 	mul.w	r2, r2, r3
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
 8003bee:	e004      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4a0c      	ldr	r2, [pc, #48]	; (8003c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bf4:	fb02 f303 	mul.w	r3, r2, r3
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	623b      	str	r3, [r7, #32]
      break;
 8003bfe:	e002      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c02:	623b      	str	r3, [r7, #32]
      break;
 8003c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c06:	6a3b      	ldr	r3, [r7, #32]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3728      	adds	r7, #40	; 0x28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc90      	pop	{r4, r7}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	0800521c 	.word	0x0800521c
 8003c18:	0800522c 	.word	0x0800522c
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	007a1200 	.word	0x007a1200
 8003c24:	003d0900 	.word	0x003d0900

08003c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c2c:	4b02      	ldr	r3, [pc, #8]	; (8003c38 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	20000000 	.word	0x20000000

08003c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c40:	f7ff fff2 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c44:	4601      	mov	r1, r0
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4a03      	ldr	r2, [pc, #12]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c52:	5cd3      	ldrb	r3, [r2, r3]
 8003c54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	08005254 	.word	0x08005254

08003c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c68:	f7ff ffde 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c6c:	4601      	mov	r1, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	0adb      	lsrs	r3, r3, #11
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4a03      	ldr	r2, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7a:	5cd3      	ldrb	r3, [r2, r3]
 8003c7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	08005254 	.word	0x08005254

08003c8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <RCC_Delay+0x34>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <RCC_Delay+0x38>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0a5b      	lsrs	r3, r3, #9
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ca8:	bf00      	nop
  }
  while (Delay --);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1e5a      	subs	r2, r3, #1
 8003cae:	60fa      	str	r2, [r7, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f9      	bne.n	8003ca8 <RCC_Delay+0x1c>
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	10624dd3 	.word	0x10624dd3

08003cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d07d      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce8:	4b4f      	ldr	r3, [pc, #316]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10d      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf4:	4b4c      	ldr	r3, [pc, #304]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	4a4b      	ldr	r2, [pc, #300]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	61d3      	str	r3, [r2, #28]
 8003d00:	4b49      	ldr	r3, [pc, #292]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d10:	4b46      	ldr	r3, [pc, #280]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d118      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1c:	4b43      	ldr	r3, [pc, #268]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a42      	ldr	r2, [pc, #264]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d28:	f7fd fe5e 	bl	80019e8 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2e:	e008      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d30:	f7fd fe5a 	bl	80019e8 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e06d      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d42:	4b3a      	ldr	r3, [pc, #232]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d4e:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d02e      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d027      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d6c:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d76:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d7c:	4b2c      	ldr	r3, [pc, #176]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d82:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d014      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d92:	f7fd fe29 	bl	80019e8 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fd fe25 	bl	80019e8 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e036      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db0:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ee      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4917      	ldr	r1, [pc, #92]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d105      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dec:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	490b      	ldr	r1, [pc, #44]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4904      	ldr	r1, [pc, #16]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42420440 	.word	0x42420440

08003e34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b08d      	sub	sp, #52	; 0x34
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e3c:	4b6b      	ldr	r3, [pc, #428]	; (8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003e3e:	f107 040c 	add.w	r4, r7, #12
 8003e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e48:	4b69      	ldr	r3, [pc, #420]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	2300      	movs	r3, #0
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e56:	2300      	movs	r3, #0
 8003e58:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	2b0f      	cmp	r3, #15
 8003e68:	f200 80b6 	bhi.w	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003e6c:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003f57 	.word	0x08003f57
 8003e78:	08003fbd 	.word	0x08003fbd
 8003e7c:	08003fd9 	.word	0x08003fd9
 8003e80:	08003f47 	.word	0x08003f47
 8003e84:	08003fd9 	.word	0x08003fd9
 8003e88:	08003fd9 	.word	0x08003fd9
 8003e8c:	08003fd9 	.word	0x08003fd9
 8003e90:	08003f4f 	.word	0x08003f4f
 8003e94:	08003fd9 	.word	0x08003fd9
 8003e98:	08003fd9 	.word	0x08003fd9
 8003e9c:	08003fd9 	.word	0x08003fd9
 8003ea0:	08003fd9 	.word	0x08003fd9
 8003ea4:	08003fd9 	.word	0x08003fd9
 8003ea8:	08003fd9 	.word	0x08003fd9
 8003eac:	08003fd9 	.word	0x08003fd9
 8003eb0:	08003eb5 	.word	0x08003eb5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003eb4:	4b4f      	ldr	r3, [pc, #316]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003eba:	4b4e      	ldr	r3, [pc, #312]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 808a 	beq.w	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	0c9b      	lsrs	r3, r3, #18
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003eda:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d018      	beq.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ee6:	4b43      	ldr	r3, [pc, #268]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	0c5b      	lsrs	r3, r3, #17
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f06:	4a3c      	ldr	r2, [pc, #240]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	4a38      	ldr	r2, [pc, #224]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8003f1c:	fb02 f303 	mul.w	r3, r2, r3
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f22:	4b34      	ldr	r3, [pc, #208]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2e:	d102      	bne.n	8003f36 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003f34:	e052      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4a31      	ldr	r2, [pc, #196]	; (8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f44:	e04a      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003f46:	f7ff fe0d 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8003f4a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003f4c:	e049      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003f4e:	f7ff fe09 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8003f52:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003f54:	e045      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003f56:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f66:	d108      	bne.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f78:	e01f      	b.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f84:	d109      	bne.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003f86:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8003f92:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f98:	e00f      	b.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fa4:	d11c      	bne.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8003fb2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003fb8:	e012      	b.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003fba:	e011      	b.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003fbc:	f7ff fe52 	bl	8003c64 <HAL_RCC_GetPCLK2Freq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	0b9b      	lsrs	r3, r3, #14
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	3301      	adds	r3, #1
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003fd6:	e004      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8003fd8:	bf00      	nop
 8003fda:	e002      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8003fdc:	bf00      	nop
 8003fde:	e000      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8003fe0:	bf00      	nop
    }
  }
  return (frequency);
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3734      	adds	r7, #52	; 0x34
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd90      	pop	{r4, r7, pc}
 8003fec:	08005230 	.word	0x08005230
 8003ff0:	08005240 	.word	0x08005240
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	007a1200 	.word	0x007a1200
 8003ffc:	003d0900 	.word	0x003d0900
 8004000:	aaaaaaab 	.word	0xaaaaaaab

08004004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e041      	b.n	800409a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd fb6c 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f000 f93e 	bl	80042c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d001      	beq.n	80040bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e03c      	b.n	8004136 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_TIM_Base_Start+0x9c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d018      	beq.n	8004100 <HAL_TIM_Base_Start+0x5c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <HAL_TIM_Base_Start+0xa0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <HAL_TIM_Base_Start+0x5c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e0:	d00e      	beq.n	8004100 <HAL_TIM_Base_Start+0x5c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a18      	ldr	r2, [pc, #96]	; (8004148 <HAL_TIM_Base_Start+0xa4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_TIM_Base_Start+0x5c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a16      	ldr	r2, [pc, #88]	; (800414c <HAL_TIM_Base_Start+0xa8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_TIM_Base_Start+0x5c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a15      	ldr	r2, [pc, #84]	; (8004150 <HAL_TIM_Base_Start+0xac>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d111      	bne.n	8004124 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b06      	cmp	r3, #6
 8004110:	d010      	beq.n	8004134 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004122:	e007      	b.n	8004134 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40013400 	.word	0x40013400
 8004148:	40000400 	.word	0x40000400
 800414c:	40000800 	.word	0x40000800
 8004150:	40000c00 	.word	0x40000c00

08004154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_TIM_ConfigClockSource+0x18>
 8004168:	2302      	movs	r3, #2
 800416a:	e0a6      	b.n	80042ba <HAL_TIM_ConfigClockSource+0x166>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800418a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004192:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d067      	beq.n	8004274 <HAL_TIM_ConfigClockSource+0x120>
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d80b      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x6c>
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d073      	beq.n	8004294 <HAL_TIM_ConfigClockSource+0x140>
 80041ac:	2b10      	cmp	r3, #16
 80041ae:	d802      	bhi.n	80041b6 <HAL_TIM_ConfigClockSource+0x62>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d06f      	beq.n	8004294 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041b4:	e078      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d06c      	beq.n	8004294 <HAL_TIM_ConfigClockSource+0x140>
 80041ba:	2b30      	cmp	r3, #48	; 0x30
 80041bc:	d06a      	beq.n	8004294 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80041be:	e073      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041c0:	2b70      	cmp	r3, #112	; 0x70
 80041c2:	d00d      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0x8c>
 80041c4:	2b70      	cmp	r3, #112	; 0x70
 80041c6:	d804      	bhi.n	80041d2 <HAL_TIM_ConfigClockSource+0x7e>
 80041c8:	2b50      	cmp	r3, #80	; 0x50
 80041ca:	d033      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0xe0>
 80041cc:	2b60      	cmp	r3, #96	; 0x60
 80041ce:	d041      	beq.n	8004254 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80041d0:	e06a      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	d066      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x152>
 80041d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041dc:	d017      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80041de:	e063      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f000 f959 	bl	80044a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004202:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	609a      	str	r2, [r3, #8]
      break;
 800420c:	e04c      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6899      	ldr	r1, [r3, #8]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f000 f942 	bl	80044a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004230:	609a      	str	r2, [r3, #8]
      break;
 8004232:	e039      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	6859      	ldr	r1, [r3, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	461a      	mov	r2, r3
 8004242:	f000 f8b9 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2150      	movs	r1, #80	; 0x50
 800424c:	4618      	mov	r0, r3
 800424e:	f000 f910 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 8004252:	e029      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6859      	ldr	r1, [r3, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	461a      	mov	r2, r3
 8004262:	f000 f8d7 	bl	8004414 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2160      	movs	r1, #96	; 0x60
 800426c:	4618      	mov	r0, r3
 800426e:	f000 f900 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 8004272:	e019      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6859      	ldr	r1, [r3, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	461a      	mov	r2, r3
 8004282:	f000 f899 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2140      	movs	r1, #64	; 0x40
 800428c:	4618      	mov	r0, r3
 800428e:	f000 f8f0 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 8004292:	e009      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f000 f8e7 	bl	8004472 <TIM_ITRx_SetConfig>
        break;
 80042a4:	e000      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80042a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a33      	ldr	r2, [pc, #204]	; (80043a4 <TIM_Base_SetConfig+0xe0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d013      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a32      	ldr	r2, [pc, #200]	; (80043a8 <TIM_Base_SetConfig+0xe4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00f      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ea:	d00b      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a2f      	ldr	r2, [pc, #188]	; (80043ac <TIM_Base_SetConfig+0xe8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a2e      	ldr	r2, [pc, #184]	; (80043b0 <TIM_Base_SetConfig+0xec>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a2d      	ldr	r2, [pc, #180]	; (80043b4 <TIM_Base_SetConfig+0xf0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a22      	ldr	r2, [pc, #136]	; (80043a4 <TIM_Base_SetConfig+0xe0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <TIM_Base_SetConfig+0x82>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a21      	ldr	r2, [pc, #132]	; (80043a8 <TIM_Base_SetConfig+0xe4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00f      	beq.n	8004346 <TIM_Base_SetConfig+0x82>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d00b      	beq.n	8004346 <TIM_Base_SetConfig+0x82>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <TIM_Base_SetConfig+0xe8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d007      	beq.n	8004346 <TIM_Base_SetConfig+0x82>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <TIM_Base_SetConfig+0xec>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d003      	beq.n	8004346 <TIM_Base_SetConfig+0x82>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <TIM_Base_SetConfig+0xf0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d108      	bne.n	8004358 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <TIM_Base_SetConfig+0xe0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_Base_SetConfig+0xc8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <TIM_Base_SetConfig+0xe4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d103      	bne.n	8004394 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	615a      	str	r2, [r3, #20]
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40013400 	.word	0x40013400
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800
 80043b4:	40000c00 	.word	0x40000c00

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f023 0210 	bic.w	r2, r3, #16
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800443e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	031b      	lsls	r3, r3, #12
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004450:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	621a      	str	r2, [r3, #32]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	f043 0307 	orr.w	r3, r3, #7
 8004494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	609a      	str	r2, [r3, #8]
}
 800449c:	bf00      	nop
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b087      	sub	sp, #28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	021a      	lsls	r2, r3, #8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	609a      	str	r2, [r3, #8]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e050      	b.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d018      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a19      	ldr	r2, [pc, #100]	; (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004552:	d00e      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d009      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d004      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a12      	ldr	r2, [pc, #72]	; (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10c      	bne.n	800458c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	4313      	orrs	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	40013400 	.word	0x40013400
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800
 80045b8:	40000c00 	.word	0x40000c00

080045bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e03f      	b.n	800464e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fd f8ae 	bl	8001744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2224      	movs	r2, #36	; 0x24
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fcff 	bl	8005004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695a      	ldr	r2, [r3, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	4613      	mov	r3, r2
 8004662:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b20      	cmp	r3, #32
 800466e:	d11d      	bne.n	80046ac <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_UART_Receive_DMA+0x26>
 8004676:	88fb      	ldrh	r3, [r7, #6]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e016      	b.n	80046ae <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_UART_Receive_DMA+0x38>
 800468a:	2302      	movs	r3, #2
 800468c:	e00f      	b.n	80046ae <HAL_UART_Receive_DMA+0x58>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	461a      	mov	r2, r3
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fae4 	bl	8004c70 <UART_Start_Receive_DMA>
 80046a8:	4603      	mov	r3, r0
 80046aa:	e000      	b.n	80046ae <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b21      	cmp	r3, #33	; 0x21
 80046e2:	d116      	bne.n	8004712 <HAL_UART_DMAStop+0x5c>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d013      	beq.n	8004712 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe f993 	bl	8002a32 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fb13 	bl	8004d38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b22      	cmp	r3, #34	; 0x22
 8004732:	d116      	bne.n	8004762 <HAL_UART_DMAStop+0xac>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d013      	beq.n	8004762 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004748:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	2b00      	cmp	r3, #0
 8004750:	d004      	beq.n	800475c <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe f96b 	bl	8002a32 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fb00 	bl	8004d62 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08a      	sub	sp, #40	; 0x28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800478c:	2300      	movs	r3, #0
 800478e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10d      	bne.n	80047be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_UART_IRQHandler+0x52>
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fb7a 	bl	8004eb0 <UART_Receive_IT>
      return;
 80047bc:	e17c      	b.n	8004ab8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80b1 	beq.w	8004928 <HAL_UART_IRQHandler+0x1bc>
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d105      	bne.n	80047dc <HAL_UART_IRQHandler+0x70>
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80a6 	beq.w	8004928 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_UART_IRQHandler+0x90>
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	f043 0201 	orr.w	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_UART_IRQHandler+0xb0>
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	f043 0202 	orr.w	r2, r3, #2
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_UART_IRQHandler+0xd0>
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	f043 0204 	orr.w	r2, r3, #4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00f      	beq.n	8004866 <HAL_UART_IRQHandler+0xfa>
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d104      	bne.n	800485a <HAL_UART_IRQHandler+0xee>
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f043 0208 	orr.w	r2, r3, #8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 811f 	beq.w	8004aae <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <HAL_UART_IRQHandler+0x11e>
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fb13 	bl	8004eb0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d102      	bne.n	80048b2 <HAL_UART_IRQHandler+0x146>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d031      	beq.n	8004916 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fa55 	bl	8004d62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d023      	beq.n	800490e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695a      	ldr	r2, [r3, #20]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d013      	beq.n	8004906 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	4a77      	ldr	r2, [pc, #476]	; (8004ac0 <HAL_UART_IRQHandler+0x354>)
 80048e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe f8dc 	bl	8002aa8 <HAL_DMA_Abort_IT>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d016      	beq.n	8004924 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004900:	4610      	mov	r0, r2
 8004902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	e00e      	b.n	8004924 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f8ee 	bl	8004ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	e00a      	b.n	8004924 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8ea 	bl	8004ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004914:	e006      	b.n	8004924 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8e6 	bl	8004ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004922:	e0c4      	b.n	8004aae <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004924:	bf00      	nop
    return;
 8004926:	e0c2      	b.n	8004aae <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	2b01      	cmp	r3, #1
 800492e:	f040 80a1 	bne.w	8004a74 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 809b 	beq.w	8004a74 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8095 	beq.w	8004a74 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04e      	beq.n	8004a0c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004978:	8a3b      	ldrh	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 8099 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004984:	8a3a      	ldrh	r2, [r7, #16]
 8004986:	429a      	cmp	r2, r3
 8004988:	f080 8093 	bcs.w	8004ab2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8a3a      	ldrh	r2, [r7, #16]
 8004990:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	2b20      	cmp	r3, #32
 800499a:	d02b      	beq.n	80049f4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049aa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0210 	bic.w	r2, r2, #16
 80049e8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe f81f 	bl	8002a32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f878 	bl	8004afa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a0a:	e052      	b.n	8004ab2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d048      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004a24:	8a7b      	ldrh	r3, [r7, #18]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d045      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a38:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0210 	bic.w	r2, r2, #16
 8004a66:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a68:	8a7b      	ldrh	r3, [r7, #18]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f844 	bl	8004afa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a72:	e020      	b.n	8004ab6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HAL_UART_IRQHandler+0x324>
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f9aa 	bl	8004de2 <UART_Transmit_IT>
    return;
 8004a8e:	e013      	b.n	8004ab8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00e      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x34c>
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f9eb 	bl	8004e80 <UART_EndTransmit_IT>
    return;
 8004aaa:	bf00      	nop
 8004aac:	e004      	b.n	8004ab8 <HAL_UART_IRQHandler+0x34c>
    return;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <HAL_UART_IRQHandler+0x34c>
      return;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <HAL_UART_IRQHandler+0x34c>
      return;
 8004ab6:	bf00      	nop
  }
}
 8004ab8:	3728      	adds	r7, #40	; 0x28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	08004dbb 	.word	0x08004dbb

08004ac4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	460b      	mov	r3, r1
 8004b04:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d12a      	bne.n	8004b82 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b40:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b60:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d107      	bne.n	8004b82 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0210 	bic.w	r2, r2, #16
 8004b80:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d106      	bne.n	8004b98 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b8e:	4619      	mov	r1, r3
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f7ff ffb2 	bl	8004afa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b96:	e002      	b.n	8004b9e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f7fb ff81 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d108      	bne.n	8004bce <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f7ff ff97 	bl	8004afa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bcc:	e002      	b.n	8004bd4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff ff81 	bl	8004ad6 <HAL_UART_RxHalfCpltCallback>
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b21      	cmp	r3, #33	; 0x21
 8004c0e:	d108      	bne.n	8004c22 <UART_DMAError+0x46>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c1c:	68b8      	ldr	r0, [r7, #8]
 8004c1e:	f000 f88b 	bl	8004d38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b22      	cmp	r3, #34	; 0x22
 8004c42:	d108      	bne.n	8004c56 <UART_DMAError+0x7a>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c50:	68b8      	ldr	r0, [r7, #8]
 8004c52:	f000 f886 	bl	8004d62 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f043 0210 	orr.w	r2, r3, #16
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c62:	68b8      	ldr	r0, [r7, #8]
 8004c64:	f7ff ff40 	bl	8004ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	88fa      	ldrh	r2, [r7, #6]
 8004c88:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2222      	movs	r2, #34	; 0x22
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	4a23      	ldr	r2, [pc, #140]	; (8004d2c <UART_Start_Receive_DMA+0xbc>)
 8004c9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <UART_Start_Receive_DMA+0xc0>)
 8004ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <UART_Start_Receive_DMA+0xc4>)
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004cb8:	f107 0308 	add.w	r3, r7, #8
 8004cbc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	f7fd fe50 	bl	8002974 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d00:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0201 	orr.w	r2, r2, #1
 8004d10:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d20:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	08004b11 	.word	0x08004b11
 8004d30:	08004ba7 	.word	0x08004ba7
 8004d34:	08004bdd 	.word	0x08004bdd

08004d38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d4e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr

08004d62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d78:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0201 	bic.w	r2, r2, #1
 8004d88:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d107      	bne.n	8004da2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0210 	bic.w	r2, r2, #16
 8004da0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr

08004dba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff fe87 	bl	8004ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b21      	cmp	r3, #33	; 0x21
 8004df4:	d13e      	bne.n	8004e74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d114      	bne.n	8004e2a <UART_Transmit_IT+0x48>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d110      	bne.n	8004e2a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	1c9a      	adds	r2, r3, #2
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	621a      	str	r2, [r3, #32]
 8004e28:	e008      	b.n	8004e3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6211      	str	r1, [r2, #32]
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10f      	bne.n	8004e70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr

08004e80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff fe0f 	bl	8004ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b22      	cmp	r3, #34	; 0x22
 8004ec2:	f040 8099 	bne.w	8004ff8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ece:	d117      	bne.n	8004f00 <UART_Receive_IT+0x50>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d113      	bne.n	8004f00 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	1c9a      	adds	r2, r3, #2
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	629a      	str	r2, [r3, #40]	; 0x28
 8004efe:	e026      	b.n	8004f4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f12:	d007      	beq.n	8004f24 <UART_Receive_IT+0x74>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <UART_Receive_IT+0x82>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	e008      	b.n	8004f44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d148      	bne.n	8004ff4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0220 	bic.w	r2, r2, #32
 8004f70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695a      	ldr	r2, [r3, #20]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d123      	bne.n	8004fea <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0210 	bic.w	r2, r2, #16
 8004fb6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d10a      	bne.n	8004fdc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff fd89 	bl	8004afa <HAL_UARTEx_RxEventCallback>
 8004fe8:	e002      	b.n	8004ff0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fb fd58 	bl	8000aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e002      	b.n	8004ffa <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e000      	b.n	8004ffa <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004ff8:	2302      	movs	r3, #2
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800503e:	f023 030c 	bic.w	r3, r3, #12
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6812      	ldr	r2, [r2, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	430b      	orrs	r3, r1
 800504a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a2c      	ldr	r2, [pc, #176]	; (8005118 <UART_SetConfig+0x114>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d103      	bne.n	8005074 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800506c:	f7fe fdfa 	bl	8003c64 <HAL_RCC_GetPCLK2Freq>
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	e002      	b.n	800507a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005074:	f7fe fde2 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8005078:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009a      	lsls	r2, r3, #2
 8005084:	441a      	add	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	4a22      	ldr	r2, [pc, #136]	; (800511c <UART_SetConfig+0x118>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	0119      	lsls	r1, r3, #4
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009a      	lsls	r2, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b0:	4b1a      	ldr	r3, [pc, #104]	; (800511c <UART_SetConfig+0x118>)
 80050b2:	fba3 0302 	umull	r0, r3, r3, r2
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2064      	movs	r0, #100	; 0x64
 80050ba:	fb00 f303 	mul.w	r3, r0, r3
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	3332      	adds	r3, #50	; 0x32
 80050c4:	4a15      	ldr	r2, [pc, #84]	; (800511c <UART_SetConfig+0x118>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d0:	4419      	add	r1, r3
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009a      	lsls	r2, r3, #2
 80050dc:	441a      	add	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <UART_SetConfig+0x118>)
 80050ea:	fba3 0302 	umull	r0, r3, r3, r2
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	2064      	movs	r0, #100	; 0x64
 80050f2:	fb00 f303 	mul.w	r3, r0, r3
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	3332      	adds	r3, #50	; 0x32
 80050fc:	4a07      	ldr	r2, [pc, #28]	; (800511c <UART_SetConfig+0x118>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	f003 020f 	and.w	r2, r3, #15
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	440a      	add	r2, r1
 800510e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40013800 	.word	0x40013800
 800511c:	51eb851f 	.word	0x51eb851f

08005120 <__libc_init_array>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	2500      	movs	r5, #0
 8005124:	4e0c      	ldr	r6, [pc, #48]	; (8005158 <__libc_init_array+0x38>)
 8005126:	4c0d      	ldr	r4, [pc, #52]	; (800515c <__libc_init_array+0x3c>)
 8005128:	1ba4      	subs	r4, r4, r6
 800512a:	10a4      	asrs	r4, r4, #2
 800512c:	42a5      	cmp	r5, r4
 800512e:	d109      	bne.n	8005144 <__libc_init_array+0x24>
 8005130:	f000 f868 	bl	8005204 <_init>
 8005134:	2500      	movs	r5, #0
 8005136:	4e0a      	ldr	r6, [pc, #40]	; (8005160 <__libc_init_array+0x40>)
 8005138:	4c0a      	ldr	r4, [pc, #40]	; (8005164 <__libc_init_array+0x44>)
 800513a:	1ba4      	subs	r4, r4, r6
 800513c:	10a4      	asrs	r4, r4, #2
 800513e:	42a5      	cmp	r5, r4
 8005140:	d105      	bne.n	800514e <__libc_init_array+0x2e>
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005148:	4798      	blx	r3
 800514a:	3501      	adds	r5, #1
 800514c:	e7ee      	b.n	800512c <__libc_init_array+0xc>
 800514e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005152:	4798      	blx	r3
 8005154:	3501      	adds	r5, #1
 8005156:	e7f2      	b.n	800513e <__libc_init_array+0x1e>
 8005158:	0800525c 	.word	0x0800525c
 800515c:	0800525c 	.word	0x0800525c
 8005160:	0800525c 	.word	0x0800525c
 8005164:	08005260 	.word	0x08005260

08005168 <memset>:
 8005168:	4603      	mov	r3, r0
 800516a:	4402      	add	r2, r0
 800516c:	4293      	cmp	r3, r2
 800516e:	d100      	bne.n	8005172 <memset+0xa>
 8005170:	4770      	bx	lr
 8005172:	f803 1b01 	strb.w	r1, [r3], #1
 8005176:	e7f9      	b.n	800516c <memset+0x4>

08005178 <round>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800517e:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8005182:	2c13      	cmp	r4, #19
 8005184:	4606      	mov	r6, r0
 8005186:	460d      	mov	r5, r1
 8005188:	460b      	mov	r3, r1
 800518a:	468c      	mov	ip, r1
 800518c:	4602      	mov	r2, r0
 800518e:	dc17      	bgt.n	80051c0 <round+0x48>
 8005190:	2c00      	cmp	r4, #0
 8005192:	da09      	bge.n	80051a8 <round+0x30>
 8005194:	3401      	adds	r4, #1
 8005196:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800519a:	d103      	bne.n	80051a4 <round+0x2c>
 800519c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80051a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80051a4:	2200      	movs	r2, #0
 80051a6:	e028      	b.n	80051fa <round+0x82>
 80051a8:	4915      	ldr	r1, [pc, #84]	; (8005200 <round+0x88>)
 80051aa:	4121      	asrs	r1, r4
 80051ac:	420d      	tst	r5, r1
 80051ae:	d100      	bne.n	80051b2 <round+0x3a>
 80051b0:	b178      	cbz	r0, 80051d2 <round+0x5a>
 80051b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80051b6:	4123      	asrs	r3, r4
 80051b8:	4463      	add	r3, ip
 80051ba:	ea23 0301 	bic.w	r3, r3, r1
 80051be:	e7f1      	b.n	80051a4 <round+0x2c>
 80051c0:	2c33      	cmp	r4, #51	; 0x33
 80051c2:	dd09      	ble.n	80051d8 <round+0x60>
 80051c4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80051c8:	d103      	bne.n	80051d2 <round+0x5a>
 80051ca:	f7fb f831 	bl	8000230 <__adddf3>
 80051ce:	4606      	mov	r6, r0
 80051d0:	460d      	mov	r5, r1
 80051d2:	4630      	mov	r0, r6
 80051d4:	4629      	mov	r1, r5
 80051d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80051e0:	40f8      	lsrs	r0, r7
 80051e2:	4206      	tst	r6, r0
 80051e4:	d0f5      	beq.n	80051d2 <round+0x5a>
 80051e6:	2101      	movs	r1, #1
 80051e8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80051ec:	fa01 f404 	lsl.w	r4, r1, r4
 80051f0:	1932      	adds	r2, r6, r4
 80051f2:	bf28      	it	cs
 80051f4:	185b      	addcs	r3, r3, r1
 80051f6:	ea22 0200 	bic.w	r2, r2, r0
 80051fa:	4619      	mov	r1, r3
 80051fc:	4610      	mov	r0, r2
 80051fe:	e7e6      	b.n	80051ce <round+0x56>
 8005200:	000fffff 	.word	0x000fffff

08005204 <_init>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr

08005210 <_fini>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	bf00      	nop
 8005214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005216:	bc08      	pop	{r3}
 8005218:	469e      	mov	lr, r3
 800521a:	4770      	bx	lr
