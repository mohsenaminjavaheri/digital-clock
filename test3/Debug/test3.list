
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006588  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006770  08006770  00016770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e8  080067e8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  080067e8  080067e8  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067e8  080067e8  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e8  080067e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080067f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000050  0800683c  00020050  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  0800683c  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f94f  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028af  00000000  00000000  0002f9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001008  00000000  00000000  00032278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  00033280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b628  00000000  00000000  00034148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec18  00000000  00000000  0004f770  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009fe52  00000000  00000000  0005e388  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe1da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004288  00000000  00000000  000fe258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000050 	.word	0x20000050
 8000204:	00000000 	.word	0x00000000
 8000208:	08006758 	.word	0x08006758

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000054 	.word	0x20000054
 8000224:	08006758 	.word	0x08006758

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <DWT_Delay_Init+0x58>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a13      	ldr	r2, [pc, #76]	; (8000afc <DWT_Delay_Init+0x58>)
 8000aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ab2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <DWT_Delay_Init+0x58>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	4a10      	ldr	r2, [pc, #64]	; (8000afc <DWT_Delay_Init+0x58>)
 8000aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000abe:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <DWT_Delay_Init+0x5c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <DWT_Delay_Init+0x5c>)
 8000ac6:	f023 0301 	bic.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <DWT_Delay_Init+0x5c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <DWT_Delay_Init+0x5c>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <DWT_Delay_Init+0x5c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000ade:	bf00      	nop
    __ASM volatile ("NOP");
 8000ae0:	bf00      	nop
    __ASM volatile ("NOP");
 8000ae2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <DWT_Delay_Init+0x5c>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000aec:	2300      	movs	r3, #0
 8000aee:	e000      	b.n	8000af2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000af0:	2301      	movs	r3, #1
    }
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000edf0 	.word	0xe000edf0
 8000b00:	e0001000 	.word	0xe0001000

08000b04 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
    uint8_t i = 0, j = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 8000b24:	f7ff ffbe 	bl	8000aa4 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b2e:	e139      	b.n	8000da4 <STEPPERS_Init+0x2a0>
    {
    	for(j=0; j<4; j++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b36:	e0af      	b.n	8000c98 <STEPPERS_Init+0x194>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8000b38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b3c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000b40:	48a4      	ldr	r0, [pc, #656]	; (8000dd4 <STEPPERS_Init+0x2d0>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	1a9b      	subs	r3, r3, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000b4e:	4aa2      	ldr	r2, [pc, #648]	; (8000dd8 <STEPPERS_Init+0x2d4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d10c      	bne.n	8000b6e <STEPPERS_Init+0x6a>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4ba1      	ldr	r3, [pc, #644]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4aa0      	ldr	r2, [pc, #640]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b9e      	ldr	r3, [pc, #632]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	e06a      	b.n	8000c44 <STEPPERS_Init+0x140>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8000b6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b72:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000b76:	4897      	ldr	r0, [pc, #604]	; (8000dd4 <STEPPERS_Init+0x2d0>)
 8000b78:	4613      	mov	r3, r2
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	1a9b      	subs	r3, r3, r2
 8000b7e:	440b      	add	r3, r1
 8000b80:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000b84:	4a96      	ldr	r2, [pc, #600]	; (8000de0 <STEPPERS_Init+0x2dc>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d10c      	bne.n	8000ba4 <STEPPERS_Init+0xa0>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b94      	ldr	r3, [pc, #592]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a93      	ldr	r2, [pc, #588]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b91      	ldr	r3, [pc, #580]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	e04f      	b.n	8000c44 <STEPPERS_Init+0x140>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8000ba4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000ba8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000bac:	4889      	ldr	r0, [pc, #548]	; (8000dd4 <STEPPERS_Init+0x2d0>)
 8000bae:	4613      	mov	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000bba:	4a8a      	ldr	r2, [pc, #552]	; (8000de4 <STEPPERS_Init+0x2e0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d10c      	bne.n	8000bda <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	4b86      	ldr	r3, [pc, #536]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a85      	ldr	r2, [pc, #532]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b83      	ldr	r3, [pc, #524]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	e034      	b.n	8000c44 <STEPPERS_Init+0x140>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOD)
 8000bda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000bde:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000be2:	487c      	ldr	r0, [pc, #496]	; (8000dd4 <STEPPERS_Init+0x2d0>)
 8000be4:	4613      	mov	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000bf0:	4a7d      	ldr	r2, [pc, #500]	; (8000de8 <STEPPERS_Init+0x2e4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d10c      	bne.n	8000c10 <STEPPERS_Init+0x10c>
    		{
    		    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf6:	4b79      	ldr	r3, [pc, #484]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a78      	ldr	r2, [pc, #480]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000bfc:	f043 0320 	orr.w	r3, r3, #32
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b76      	ldr	r3, [pc, #472]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	e019      	b.n	8000c44 <STEPPERS_Init+0x140>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
 8000c10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c14:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000c18:	486e      	ldr	r0, [pc, #440]	; (8000dd4 <STEPPERS_Init+0x2d0>)
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000c26:	4a71      	ldr	r2, [pc, #452]	; (8000dec <STEPPERS_Init+0x2e8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d10b      	bne.n	8000c44 <STEPPERS_Init+0x140>
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c2c:	4b6b      	ldr	r3, [pc, #428]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a6a      	ldr	r2, [pc, #424]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b68      	ldr	r3, [pc, #416]	; (8000ddc <STEPPERS_Init+0x2d8>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	683b      	ldr	r3, [r7, #0]
    		}
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8000c44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c48:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000c4c:	4861      	ldr	r0, [pc, #388]	; (8000dd4 <STEPPERS_Init+0x2d0>)
 8000c4e:	4613      	mov	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	440b      	add	r3, r1
 8000c58:	3308      	adds	r3, #8
 8000c5a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000c5e:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	623b      	str	r3, [r7, #32]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8000c6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c70:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000c74:	4857      	ldr	r0, [pc, #348]	; (8000dd4 <STEPPERS_Init+0x2d0>)
 8000c76:	4613      	mov	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000c82:	f107 0214 	add.w	r2, r7, #20
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fbe3 	bl	8004454 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8000c8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c92:	3301      	adds	r3, #1
 8000c94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	f67f af4b 	bls.w	8000b38 <STEPPERS_Init+0x34>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8000ca2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000ca6:	4952      	ldr	r1, [pc, #328]	; (8000df0 <STEPPERS_Init+0x2ec>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	3311      	adds	r3, #17
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8000cb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cbc:	494c      	ldr	r1, [pc, #304]	; (8000df0 <STEPPERS_Init+0x2ec>)
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	330f      	adds	r3, #15
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8000cce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cd2:	4947      	ldr	r1, [pc, #284]	; (8000df0 <STEPPERS_Init+0x2ec>)
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	440b      	add	r3, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8000ce2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000ce6:	4942      	ldr	r1, [pc, #264]	; (8000df0 <STEPPERS_Init+0x2ec>)
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8000cf8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cfc:	493c      	ldr	r1, [pc, #240]	; (8000df0 <STEPPERS_Init+0x2ec>)
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	440b      	add	r3, r1
 8000d08:	3308      	adds	r3, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8000d0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d12:	4937      	ldr	r1, [pc, #220]	; (8000df0 <STEPPERS_Init+0x2ec>)
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	330e      	adds	r3, #14
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8000d24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d28:	492a      	ldr	r1, [pc, #168]	; (8000dd4 <STEPPERS_Init+0x2d0>)
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	1a9b      	subs	r3, r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	440b      	add	r3, r1
 8000d34:	331b      	adds	r3, #27
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d00b      	beq.n	8000d54 <STEPPERS_Init+0x250>
 8000d3c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d40:	4924      	ldr	r1, [pc, #144]	; (8000dd4 <STEPPERS_Init+0x2d0>)
 8000d42:	4613      	mov	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	331b      	adds	r3, #27
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10b      	bne.n	8000d6c <STEPPERS_Init+0x268>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8000d54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d58:	4925      	ldr	r1, [pc, #148]	; (8000df0 <STEPPERS_Init+0x2ec>)
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	440b      	add	r3, r1
 8000d64:	3310      	adds	r3, #16
 8000d66:	2204      	movs	r2, #4
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e016      	b.n	8000d9a <STEPPERS_Init+0x296>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8000d6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d70:	4918      	ldr	r1, [pc, #96]	; (8000dd4 <STEPPERS_Init+0x2d0>)
 8000d72:	4613      	mov	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	331b      	adds	r3, #27
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d10a      	bne.n	8000d9a <STEPPERS_Init+0x296>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8000d84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d88:	4919      	ldr	r1, [pc, #100]	; (8000df0 <STEPPERS_Init+0x2ec>)
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	440b      	add	r3, r1
 8000d94:	3310      	adds	r3, #16
 8000d96:	2208      	movs	r2, #8
 8000d98:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8000d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d9e:	3301      	adds	r3, #1
 8000da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	f67f aec1 	bls.w	8000b30 <STEPPERS_Init+0x2c>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dae:	2301      	movs	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	623b      	str	r3, [r7, #32]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <STEPPERS_Init+0x2dc>)
 8000dc6:	f003 fb45 	bl	8004454 <HAL_GPIO_Init>
}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	08006798 	.word	0x08006798
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40011000 	.word	0x40011000
 8000de8:	40011400 	.word	0x40011400
 8000dec:	40011800 	.word	0x40011800
 8000df0:	2000006c 	.word	0x2000006c

08000df4 <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
    uint32_t ARR_Value = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8000e18:	f7ff fe74 	bl	8000b04 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10 * STEPPER_TIME_BASE);
 8000e1c:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <STEPPERS_Init_TMR+0x90>)
 8000e26:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2263      	movs	r2, #99	; 0x63
 8000e2c:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	1e5a      	subs	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f004 fa3f 	bl	80052cc <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f004 fbee 	bl	800563c <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f004 fdd0 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f004 fa79 	bl	800536c <HAL_TIM_Base_Start_IT>
    }
}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40012c00 	.word	0x40012c00

08000e88 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	492a      	ldr	r1, [pc, #168]	; (8000f48 <STEPPER_SetSpeed+0xc0>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	330c      	adds	r3, #12
 8000eac:	88ba      	ldrh	r2, [r7, #4]
 8000eae:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8000eb0:	79fa      	ldrb	r2, [r7, #7]
 8000eb2:	4926      	ldr	r1, [pc, #152]	; (8000f4c <STEPPER_SetSpeed+0xc4>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	331b      	adds	r3, #27
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d10b      	bne.n	8000ede <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8000ec6:	79fa      	ldrb	r2, [r7, #7]
 8000ec8:	4920      	ldr	r1, [pc, #128]	; (8000f4c <STEPPER_SetSpeed+0xc4>)
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3318      	adds	r3, #24
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e009      	b.n	8000ef2 <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	491a      	ldr	r1, [pc, #104]	; (8000f4c <STEPPER_SetSpeed+0xc4>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	3318      	adds	r3, #24
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fad6 	bl	80004ac <__aeabi_ui2d>
 8000f00:	4603      	mov	r3, r0
 8000f02:	460c      	mov	r4, r1
 8000f04:	461a      	mov	r2, r3
 8000f06:	4623      	mov	r3, r4
 8000f08:	a10d      	add	r1, pc, #52	; (adr r1, 8000f40 <STEPPER_SetSpeed+0xb8>)
 8000f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f0e:	f7ff fc71 	bl	80007f4 <__aeabi_ddiv>
 8000f12:	4603      	mov	r3, r0
 8000f14:	460c      	mov	r4, r1
 8000f16:	461a      	mov	r2, r3
 8000f18:	4623      	mov	r3, r4
 8000f1a:	79fc      	ldrb	r4, [r7, #7]
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fd50 	bl	80009c4 <__aeabi_d2uiz>
 8000f24:	4601      	mov	r1, r0
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <STEPPER_SetSpeed+0xc0>)
 8000f28:	4623      	mov	r3, r4
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4423      	add	r3, r4
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	3308      	adds	r3, #8
 8000f34:	6019      	str	r1, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd90      	pop	{r4, r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	00000000 	.word	0x00000000
 8000f44:	40ed4c00 	.word	0x40ed4c00
 8000f48:	2000006c 	.word	0x2000006c
 8000f4c:	08006798 	.word	0x08006798

08000f50 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	499d      	ldr	r1, [pc, #628]	; (80011d4 <STEPPER_One_Step+0x284>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	331a      	adds	r3, #26
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f040 81d1 	bne.w	8001314 <STEPPER_One_Step+0x3c4>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8000f72:	79fa      	ldrb	r2, [r7, #7]
 8000f74:	4997      	ldr	r1, [pc, #604]	; (80011d4 <STEPPER_One_Step+0x284>)
 8000f76:	4613      	mov	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	331b      	adds	r3, #27
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f040 808c 	bne.w	80010a2 <STEPPER_One_Step+0x152>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8000f8a:	79fa      	ldrb	r2, [r7, #7]
 8000f8c:	4991      	ldr	r1, [pc, #580]	; (80011d4 <STEPPER_One_Step+0x284>)
 8000f8e:	4613      	mov	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	1a9b      	subs	r3, r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	79fa      	ldrb	r2, [r7, #7]
 8000f9c:	498d      	ldr	r1, [pc, #564]	; (80011d4 <STEPPER_One_Step+0x284>)
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	3310      	adds	r3, #16
 8000faa:	881c      	ldrh	r4, [r3, #0]
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	498a      	ldr	r1, [pc, #552]	; (80011d8 <STEPPER_One_Step+0x288>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	330f      	adds	r3, #15
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b86      	ldr	r3, [pc, #536]	; (80011dc <STEPPER_One_Step+0x28c>)
 8000fc2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4621      	mov	r1, r4
 8000fca:	f003 fbad 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8000fce:	79fa      	ldrb	r2, [r7, #7]
 8000fd0:	4980      	ldr	r1, [pc, #512]	; (80011d4 <STEPPER_One_Step+0x284>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3304      	adds	r3, #4
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	497c      	ldr	r1, [pc, #496]	; (80011d4 <STEPPER_One_Step+0x284>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3312      	adds	r3, #18
 8000ff0:	881c      	ldrh	r4, [r3, #0]
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	4978      	ldr	r1, [pc, #480]	; (80011d8 <STEPPER_One_Step+0x288>)
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	330f      	adds	r3, #15
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4a75      	ldr	r2, [pc, #468]	; (80011dc <STEPPER_One_Step+0x28c>)
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	461a      	mov	r2, r3
 800100e:	4621      	mov	r1, r4
 8001010:	f003 fb8a 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	496f      	ldr	r1, [pc, #444]	; (80011d4 <STEPPER_One_Step+0x284>)
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3308      	adds	r3, #8
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	496a      	ldr	r1, [pc, #424]	; (80011d4 <STEPPER_One_Step+0x284>)
 800102a:	4613      	mov	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	1a9b      	subs	r3, r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	3314      	adds	r3, #20
 8001036:	881c      	ldrh	r4, [r3, #0]
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	4967      	ldr	r1, [pc, #412]	; (80011d8 <STEPPER_One_Step+0x288>)
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	330f      	adds	r3, #15
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4a64      	ldr	r2, [pc, #400]	; (80011dc <STEPPER_One_Step+0x28c>)
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	789b      	ldrb	r3, [r3, #2]
 8001052:	461a      	mov	r2, r3
 8001054:	4621      	mov	r1, r4
 8001056:	f003 fb67 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800105a:	79fa      	ldrb	r2, [r7, #7]
 800105c:	495d      	ldr	r1, [pc, #372]	; (80011d4 <STEPPER_One_Step+0x284>)
 800105e:	4613      	mov	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	330c      	adds	r3, #12
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	4959      	ldr	r1, [pc, #356]	; (80011d4 <STEPPER_One_Step+0x284>)
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	3316      	adds	r3, #22
 800107c:	881c      	ldrh	r4, [r3, #0]
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	4955      	ldr	r1, [pc, #340]	; (80011d8 <STEPPER_One_Step+0x288>)
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	440b      	add	r3, r1
 800108c:	330f      	adds	r3, #15
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4a52      	ldr	r2, [pc, #328]	; (80011dc <STEPPER_One_Step+0x28c>)
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	78db      	ldrb	r3, [r3, #3]
 8001098:	461a      	mov	r2, r3
 800109a:	4621      	mov	r1, r4
 800109c:	f003 fb44 	bl	8004728 <HAL_GPIO_WritePin>
 80010a0:	e13d      	b.n	800131e <STEPPER_One_Step+0x3ce>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	494b      	ldr	r1, [pc, #300]	; (80011d4 <STEPPER_One_Step+0x284>)
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	331b      	adds	r3, #27
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	f040 8095 	bne.w	80011e4 <STEPPER_One_Step+0x294>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80010ba:	79fa      	ldrb	r2, [r7, #7]
 80010bc:	4945      	ldr	r1, [pc, #276]	; (80011d4 <STEPPER_One_Step+0x284>)
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	4941      	ldr	r1, [pc, #260]	; (80011d4 <STEPPER_One_Step+0x284>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	3310      	adds	r3, #16
 80010da:	881c      	ldrh	r4, [r3, #0]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	493e      	ldr	r1, [pc, #248]	; (80011d8 <STEPPER_One_Step+0x288>)
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	330f      	adds	r3, #15
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <STEPPER_One_Step+0x290>)
 80010f2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4621      	mov	r1, r4
 80010fa:	f003 fb15 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80010fe:	79fa      	ldrb	r2, [r7, #7]
 8001100:	4934      	ldr	r1, [pc, #208]	; (80011d4 <STEPPER_One_Step+0x284>)
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	3304      	adds	r3, #4
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	79fa      	ldrb	r2, [r7, #7]
 8001112:	4930      	ldr	r1, [pc, #192]	; (80011d4 <STEPPER_One_Step+0x284>)
 8001114:	4613      	mov	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	1a9b      	subs	r3, r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	3312      	adds	r3, #18
 8001120:	881c      	ldrh	r4, [r3, #0]
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	492c      	ldr	r1, [pc, #176]	; (80011d8 <STEPPER_One_Step+0x288>)
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	330f      	adds	r3, #15
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4a2a      	ldr	r2, [pc, #168]	; (80011e0 <STEPPER_One_Step+0x290>)
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	785b      	ldrb	r3, [r3, #1]
 800113c:	461a      	mov	r2, r3
 800113e:	4621      	mov	r1, r4
 8001140:	f003 faf2 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	4923      	ldr	r1, [pc, #140]	; (80011d4 <STEPPER_One_Step+0x284>)
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	3308      	adds	r3, #8
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	491e      	ldr	r1, [pc, #120]	; (80011d4 <STEPPER_One_Step+0x284>)
 800115a:	4613      	mov	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	1a9b      	subs	r3, r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	3314      	adds	r3, #20
 8001166:	881c      	ldrh	r4, [r3, #0]
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	491b      	ldr	r1, [pc, #108]	; (80011d8 <STEPPER_One_Step+0x288>)
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	330f      	adds	r3, #15
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <STEPPER_One_Step+0x290>)
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	789b      	ldrb	r3, [r3, #2]
 8001182:	461a      	mov	r2, r3
 8001184:	4621      	mov	r1, r4
 8001186:	f003 facf 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	4911      	ldr	r1, [pc, #68]	; (80011d4 <STEPPER_One_Step+0x284>)
 800118e:	4613      	mov	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	330c      	adds	r3, #12
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	79fa      	ldrb	r2, [r7, #7]
 800119e:	490d      	ldr	r1, [pc, #52]	; (80011d4 <STEPPER_One_Step+0x284>)
 80011a0:	4613      	mov	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	3316      	adds	r3, #22
 80011ac:	881c      	ldrh	r4, [r3, #0]
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	4909      	ldr	r1, [pc, #36]	; (80011d8 <STEPPER_One_Step+0x288>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	330f      	adds	r3, #15
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <STEPPER_One_Step+0x290>)
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	78db      	ldrb	r3, [r3, #3]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4621      	mov	r1, r4
 80011cc:	f003 faac 	bl	8004728 <HAL_GPIO_WritePin>
 80011d0:	e0a5      	b.n	800131e <STEPPER_One_Step+0x3ce>
 80011d2:	bf00      	nop
 80011d4:	08006798 	.word	0x08006798
 80011d8:	2000006c 	.word	0x2000006c
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000010 	.word	0x20000010
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	498d      	ldr	r1, [pc, #564]	; (800141c <STEPPER_One_Step+0x4cc>)
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	331b      	adds	r3, #27
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	f040 8091 	bne.w	800131e <STEPPER_One_Step+0x3ce>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	4987      	ldr	r1, [pc, #540]	; (800141c <STEPPER_One_Step+0x4cc>)
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	4983      	ldr	r1, [pc, #524]	; (800141c <STEPPER_One_Step+0x4cc>)
 8001210:	4613      	mov	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	3310      	adds	r3, #16
 800121c:	881c      	ldrh	r4, [r3, #0]
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	497f      	ldr	r1, [pc, #508]	; (8001420 <STEPPER_One_Step+0x4d0>)
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	330f      	adds	r3, #15
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b7c      	ldr	r3, [pc, #496]	; (8001424 <STEPPER_One_Step+0x4d4>)
 8001234:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001238:	461a      	mov	r2, r3
 800123a:	4621      	mov	r1, r4
 800123c:	f003 fa74 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	4976      	ldr	r1, [pc, #472]	; (800141c <STEPPER_One_Step+0x4cc>)
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	3304      	adds	r3, #4
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	79fa      	ldrb	r2, [r7, #7]
 8001254:	4971      	ldr	r1, [pc, #452]	; (800141c <STEPPER_One_Step+0x4cc>)
 8001256:	4613      	mov	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	1a9b      	subs	r3, r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	3312      	adds	r3, #18
 8001262:	881c      	ldrh	r4, [r3, #0]
 8001264:	79fa      	ldrb	r2, [r7, #7]
 8001266:	496e      	ldr	r1, [pc, #440]	; (8001420 <STEPPER_One_Step+0x4d0>)
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	330f      	adds	r3, #15
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4a6b      	ldr	r2, [pc, #428]	; (8001424 <STEPPER_One_Step+0x4d4>)
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	461a      	mov	r2, r3
 8001280:	4621      	mov	r1, r4
 8001282:	f003 fa51 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8001286:	79fa      	ldrb	r2, [r7, #7]
 8001288:	4964      	ldr	r1, [pc, #400]	; (800141c <STEPPER_One_Step+0x4cc>)
 800128a:	4613      	mov	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	1a9b      	subs	r3, r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	3308      	adds	r3, #8
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	79fa      	ldrb	r2, [r7, #7]
 800129a:	4960      	ldr	r1, [pc, #384]	; (800141c <STEPPER_One_Step+0x4cc>)
 800129c:	4613      	mov	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	3314      	adds	r3, #20
 80012a8:	881c      	ldrh	r4, [r3, #0]
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	495c      	ldr	r1, [pc, #368]	; (8001420 <STEPPER_One_Step+0x4d0>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	330f      	adds	r3, #15
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4a59      	ldr	r2, [pc, #356]	; (8001424 <STEPPER_One_Step+0x4d4>)
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4621      	mov	r1, r4
 80012c8:	f003 fa2e 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80012cc:	79fa      	ldrb	r2, [r7, #7]
 80012ce:	4953      	ldr	r1, [pc, #332]	; (800141c <STEPPER_One_Step+0x4cc>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	1a9b      	subs	r3, r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	330c      	adds	r3, #12
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	79fa      	ldrb	r2, [r7, #7]
 80012e0:	494e      	ldr	r1, [pc, #312]	; (800141c <STEPPER_One_Step+0x4cc>)
 80012e2:	4613      	mov	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	1a9b      	subs	r3, r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	3316      	adds	r3, #22
 80012ee:	881c      	ldrh	r4, [r3, #0]
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	494b      	ldr	r1, [pc, #300]	; (8001420 <STEPPER_One_Step+0x4d0>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	330f      	adds	r3, #15
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4a48      	ldr	r2, [pc, #288]	; (8001424 <STEPPER_One_Step+0x4d4>)
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	461a      	mov	r2, r3
 800130c:	4621      	mov	r1, r4
 800130e:	f003 fa0b 	bl	8004728 <HAL_GPIO_WritePin>
 8001312:	e004      	b.n	800131e <STEPPER_One_Step+0x3ce>
		}
	}
	// For BiPolar Stepper Motors
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
 8001314:	79fa      	ldrb	r2, [r7, #7]
 8001316:	4613      	mov	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	1a9b      	subs	r3, r3, r2
 800131c:	009b      	lsls	r3, r3, #2
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	493f      	ldr	r1, [pc, #252]	; (8001420 <STEPPER_One_Step+0x4d0>)
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	3311      	adds	r3, #17
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d132      	bne.n	800139a <STEPPER_One_Step+0x44a>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	493a      	ldr	r1, [pc, #232]	; (8001420 <STEPPER_One_Step+0x4d0>)
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	330f      	adds	r3, #15
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d112      	bne.n	8001370 <STEPPER_One_Step+0x420>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 800134a:	79f9      	ldrb	r1, [r7, #7]
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	4834      	ldr	r0, [pc, #208]	; (8001420 <STEPPER_One_Step+0x4d0>)
 8001350:	460b      	mov	r3, r1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4403      	add	r3, r0
 800135a:	3310      	adds	r3, #16
 800135c:	7818      	ldrb	r0, [r3, #0]
 800135e:	4930      	ldr	r1, [pc, #192]	; (8001420 <STEPPER_One_Step+0x4d0>)
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	330f      	adds	r3, #15
 800136c:	4602      	mov	r2, r0
 800136e:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8001370:	79fa      	ldrb	r2, [r7, #7]
 8001372:	492b      	ldr	r1, [pc, #172]	; (8001420 <STEPPER_One_Step+0x4d0>)
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	330f      	adds	r3, #15
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	3b01      	subs	r3, #1
 8001384:	b2d8      	uxtb	r0, r3
 8001386:	4926      	ldr	r1, [pc, #152]	; (8001420 <STEPPER_One_Step+0x4d0>)
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	330f      	adds	r3, #15
 8001394:	4602      	mov	r2, r0
 8001396:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 8001398:	e03c      	b.n	8001414 <STEPPER_One_Step+0x4c4>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	4920      	ldr	r1, [pc, #128]	; (8001420 <STEPPER_One_Step+0x4d0>)
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3311      	adds	r3, #17
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d131      	bne.n	8001414 <STEPPER_One_Step+0x4c4>
		gs_STEPPER_info[i].Step_Index++;
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	491b      	ldr	r1, [pc, #108]	; (8001420 <STEPPER_One_Step+0x4d0>)
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	330f      	adds	r3, #15
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	b2d8      	uxtb	r0, r3
 80013c6:	4916      	ldr	r1, [pc, #88]	; (8001420 <STEPPER_One_Step+0x4d0>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	330f      	adds	r3, #15
 80013d4:	4602      	mov	r2, r0
 80013d6:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	4911      	ldr	r1, [pc, #68]	; (8001420 <STEPPER_One_Step+0x4d0>)
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	330f      	adds	r3, #15
 80013e8:	7819      	ldrb	r1, [r3, #0]
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <STEPPER_One_Step+0x4d0>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4403      	add	r3, r0
 80013f8:	3310      	adds	r3, #16
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4299      	cmp	r1, r3
 80013fe:	d109      	bne.n	8001414 <STEPPER_One_Step+0x4c4>
			gs_STEPPER_info[i].Step_Index = 0;
 8001400:	79fa      	ldrb	r2, [r7, #7]
 8001402:	4907      	ldr	r1, [pc, #28]	; (8001420 <STEPPER_One_Step+0x4d0>)
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	330f      	adds	r3, #15
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	08006798 	.word	0x08006798
 8001420:	2000006c 	.word	0x2000006c
 8001424:	20000020 	.word	0x20000020

08001428 <STEPPER_Step_NonBlocking>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
}

void STEPPER_Step_NonBlocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	4613      	mov	r3, r2
 8001436:	71bb      	strb	r3, [r7, #6]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	4910      	ldr	r1, [pc, #64]	; (800147c <STEPPER_Step_NonBlocking+0x54>)
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	6819      	ldr	r1, [r3, #0]
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	4419      	add	r1, r3
 800144e:	480b      	ldr	r0, [pc, #44]	; (800147c <STEPPER_Step_NonBlocking+0x54>)
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4403      	add	r3, r0
 800145a:	6019      	str	r1, [r3, #0]
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 800145c:	79fa      	ldrb	r2, [r7, #7]
 800145e:	4907      	ldr	r1, [pc, #28]	; (800147c <STEPPER_Step_NonBlocking+0x54>)
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	3311      	adds	r3, #17
 800146c:	79ba      	ldrb	r2, [r7, #6]
 800146e:	701a      	strb	r2, [r3, #0]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	2000006c 	.word	0x2000006c

08001480 <STEPPER_Stop>:

void STEPPER_Stop(uint8_t au8_STEPPER_Instance)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps = 0;
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	4906      	ldr	r1, [pc, #24]	; (80014a8 <STEPPER_Stop+0x28>)
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2000006c 	.word	0x2000006c

080014ac <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a34      	ldr	r2, [pc, #208]	; (8001590 <STEPPER_TMR_OVF_ISR+0xe4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d162      	bne.n	8001588 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e05c      	b.n	8001582 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	4932      	ldr	r1, [pc, #200]	; (8001594 <STEPPER_TMR_OVF_ISR+0xe8>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3304      	adds	r3, #4
 80014d8:	6819      	ldr	r1, [r3, #0]
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	482d      	ldr	r0, [pc, #180]	; (8001594 <STEPPER_TMR_OVF_ISR+0xe8>)
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4403      	add	r3, r0
 80014e8:	3308      	adds	r3, #8
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4299      	cmp	r1, r3
 80014ee:	d333      	bcc.n	8001558 <STEPPER_TMR_OVF_ISR+0xac>
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	4928      	ldr	r1, [pc, #160]	; (8001594 <STEPPER_TMR_OVF_ISR+0xe8>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	330e      	adds	r3, #14
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d028      	beq.n	8001558 <STEPPER_TMR_OVF_ISR+0xac>
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	4922      	ldr	r1, [pc, #136]	; (8001594 <STEPPER_TMR_OVF_ISR+0xe8>)
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01e      	beq.n	8001558 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fd17 	bl	8000f50 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	491b      	ldr	r1, [pc, #108]	; (8001594 <STEPPER_TMR_OVF_ISR+0xe8>)
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	1e59      	subs	r1, r3, #1
 8001534:	4817      	ldr	r0, [pc, #92]	; (8001594 <STEPPER_TMR_OVF_ISR+0xe8>)
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4403      	add	r3, r0
 8001540:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	4913      	ldr	r1, [pc, #76]	; (8001594 <STEPPER_TMR_OVF_ISR+0xe8>)
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	3304      	adds	r3, #4
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e011      	b.n	800157c <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	490e      	ldr	r1, [pc, #56]	; (8001594 <STEPPER_TMR_OVF_ISR+0xe8>)
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3304      	adds	r3, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	1c59      	adds	r1, r3, #1
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <STEPPER_TMR_OVF_ISR+0xe8>)
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4403      	add	r3, r0
 8001578:	3304      	adds	r3, #4
 800157a:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	3301      	adds	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d99f      	bls.n	80014c8 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40012c00 	.word	0x40012c00
 8001594:	2000006c 	.word	0x2000006c

08001598 <set_id>:
extern uint8_t  chenge_Data;
extern uint8_t  buffer[30];


void set_id(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800159c:	f002 fdda 	bl	8004154 <HAL_FLASH_Unlock>

	EE_Init();
 80015a0:	f000 f86a 	bl	8001678 <EE_Init>

	EE_WriteVariable(0, buffer[1]);
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <set_id+0x20>)
 80015a6:	785b      	ldrb	r3, [r3, #1]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4619      	mov	r1, r3
 80015ac:	2000      	movs	r0, #0
 80015ae:	f000 faad 	bl	8001b0c <EE_WriteVariable>

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200000ac 	.word	0x200000ac

080015bc <start_clock>:

void start_clock(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	if(AD_RES[0] <100)
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <start_clock+0x58>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b63      	cmp	r3, #99	; 0x63
 80015c6:	d802      	bhi.n	80015ce <start_clock+0x12>
	{
		flag = 1;
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <start_clock+0x5c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
	}
	if(AD_RES[1] <100)
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <start_clock+0x58>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b63      	cmp	r3, #99	; 0x63
 80015d4:	d802      	bhi.n	80015dc <start_clock+0x20>
	{
		flag_1 = 1;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <start_clock+0x60>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]
	}
	if(flag!=1)
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <start_clock+0x5c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d005      	beq.n	80015f0 <start_clock+0x34>
	{
		STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 1, DIR_CW);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2101      	movs	r1, #1
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff ff1d 	bl	8001428 <STEPPER_Step_NonBlocking>
 80015ee:	e002      	b.n	80015f6 <start_clock+0x3a>
	}
	else
	{
		STEPPER_Stop(STEPPER_MOTOR1);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff ff45 	bl	8001480 <STEPPER_Stop>
	}
	if(flag_1!=1)
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <start_clock+0x60>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d005      	beq.n	800160a <start_clock+0x4e>
	{
		STEPPER_Step_NonBlocking(STEPPER_MOTOR2, 1, DIR_CW);
 80015fe:	2200      	movs	r2, #0
 8001600:	2101      	movs	r1, #1
 8001602:	2001      	movs	r0, #1
 8001604:	f7ff ff10 	bl	8001428 <STEPPER_Step_NonBlocking>
	}
	else
	{
		STEPPER_Stop(STEPPER_MOTOR2);
	}
}
 8001608:	e002      	b.n	8001610 <start_clock+0x54>
		STEPPER_Stop(STEPPER_MOTOR2);
 800160a:	2001      	movs	r0, #1
 800160c:	f7ff ff38 	bl	8001480 <STEPPER_Stop>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200000d8 	.word	0x200000d8
 8001618:	20000098 	.word	0x20000098
 800161c:	2000009c 	.word	0x2000009c

08001620 <spec_position>:

void spec_position(uint8_t Direction_1, uint32_t step_1 ,uint8_t Direction_2, uint32_t step_2)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4603      	mov	r3, r0
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	4613      	mov	r3, r2
 8001630:	73bb      	strb	r3, [r7, #14]
		if(chenge_Data == 1 && i == 1)
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <spec_position+0x50>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d115      	bne.n	8001666 <spec_position+0x46>
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <spec_position+0x54>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d111      	bne.n	8001666 <spec_position+0x46>
		{
			STEPPER_Step_NonBlocking(STEPPER_MOTOR1, step_1, Direction_1);
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	461a      	mov	r2, r3
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff feed 	bl	8001428 <STEPPER_Step_NonBlocking>
			STEPPER_Step_NonBlocking(STEPPER_MOTOR2, step_2, Direction_2);
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	461a      	mov	r2, r3
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff fee7 	bl	8001428 <STEPPER_Step_NonBlocking>
			chenge_Data = 0;
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <spec_position+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
			i=0;
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <spec_position+0x54>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
		}
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200000a0 	.word	0x200000a0
 8001674:	200000a4 	.word	0x200000a4

08001678 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 800167e:	2306      	movs	r3, #6
 8001680:	847b      	strh	r3, [r7, #34]	; 0x22
 8001682:	2306      	movs	r3, #6
 8001684:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	83fb      	strh	r3, [r7, #30]
 800168e:	2300      	movs	r3, #0
 8001690:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8001692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001696:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800169c:	4b9e      	ldr	r3, [pc, #632]	; (8001918 <EE_Init+0x2a0>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80016a2:	4b9e      	ldr	r3, [pc, #632]	; (800191c <EE_Init+0x2a4>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 80016ac:	4b9a      	ldr	r3, [pc, #616]	; (8001918 <EE_Init+0x2a0>)
 80016ae:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 80016b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80016b6:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d057      	beq.n	800176e <EE_Init+0xf6>
 80016be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d003      	beq.n	80016ce <EE_Init+0x56>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80f4 	beq.w	80018b4 <EE_Init+0x23c>
 80016cc:	e18d      	b.n	80019ea <EE_Init+0x372>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80016ce:	8c3b      	ldrh	r3, [r7, #32]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d116      	bne.n	8001702 <EE_Init+0x8a>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80016d4:	4890      	ldr	r0, [pc, #576]	; (8001918 <EE_Init+0x2a0>)
 80016d6:	f000 f9a9 	bl	8001a2c <EE_VerifyPageFullyErased>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f040 818e 	bne.w	80019fe <EE_Init+0x386>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80016e2:	f107 0214 	add.w	r2, r7, #20
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fe0a 	bl	8004304 <HAL_FLASHEx_Erase>
 80016f0:	4603      	mov	r3, r0
 80016f2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80016f4:	7efb      	ldrb	r3, [r7, #27]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8181 	beq.w	80019fe <EE_Init+0x386>
          {
            return flashstatus;
 80016fc:	7efb      	ldrb	r3, [r7, #27]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	e185      	b.n	8001a0e <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001702:	8c3b      	ldrh	r3, [r7, #32]
 8001704:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001708:	4293      	cmp	r3, r2
 800170a:	d125      	bne.n	8001758 <EE_Init+0xe0>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800170c:	4882      	ldr	r0, [pc, #520]	; (8001918 <EE_Init+0x2a0>)
 800170e:	f000 f98d 	bl	8001a2c <EE_VerifyPageFullyErased>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10e      	bne.n	8001736 <EE_Init+0xbe>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001718:	f107 0214 	add.w	r2, r7, #20
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f002 fdef 	bl	8004304 <HAL_FLASHEx_Erase>
 8001726:	4603      	mov	r3, r0
 8001728:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800172a:	7efb      	ldrb	r3, [r7, #27]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <EE_Init+0xbe>
          {
            return flashstatus;
 8001730:	7efb      	ldrb	r3, [r7, #27]
 8001732:	b29b      	uxth	r3, r3
 8001734:	e16b      	b.n	8001a0e <EE_Init+0x396>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	4977      	ldr	r1, [pc, #476]	; (800191c <EE_Init+0x2a4>)
 8001740:	2001      	movs	r0, #1
 8001742:	f002 fc97 	bl	8004074 <HAL_FLASH_Program>
 8001746:	4603      	mov	r3, r0
 8001748:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800174a:	7efb      	ldrb	r3, [r7, #27]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8156 	beq.w	80019fe <EE_Init+0x386>
        {
          return flashstatus;
 8001752:	7efb      	ldrb	r3, [r7, #27]
 8001754:	b29b      	uxth	r3, r3
 8001756:	e15a      	b.n	8001a0e <EE_Init+0x396>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8001758:	f000 f9fa 	bl	8001b50 <EE_Format>
 800175c:	4603      	mov	r3, r0
 800175e:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001760:	7efb      	ldrb	r3, [r7, #27]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 814b 	beq.w	80019fe <EE_Init+0x386>
        {
          return flashstatus;
 8001768:	7efb      	ldrb	r3, [r7, #27]
 800176a:	b29b      	uxth	r3, r3
 800176c:	e14f      	b.n	8001a0e <EE_Init+0x396>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800176e:	8c3b      	ldrh	r3, [r7, #32]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d163      	bne.n	800183c <EE_Init+0x1c4>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001774:	2300      	movs	r3, #0
 8001776:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001778:	e030      	b.n	80017dc <EE_Init+0x164>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 800177a:	4b69      	ldr	r3, [pc, #420]	; (8001920 <EE_Init+0x2a8>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	b29a      	uxth	r2, r3
 8001780:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001782:	4968      	ldr	r1, [pc, #416]	; (8001924 <EE_Init+0x2ac>)
 8001784:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001788:	429a      	cmp	r2, r3
 800178a:	d101      	bne.n	8001790 <EE_Init+0x118>
          {
            x = varidx;
 800178c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800178e:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8001790:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001792:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001796:	429a      	cmp	r2, r3
 8001798:	d01d      	beq.n	80017d6 <EE_Init+0x15e>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 800179a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800179c:	4a61      	ldr	r2, [pc, #388]	; (8001924 <EE_Init+0x2ac>)
 800179e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a2:	4961      	ldr	r1, [pc, #388]	; (8001928 <EE_Init+0x2b0>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f967 	bl	8001a78 <EE_ReadVariable>
 80017aa:	4603      	mov	r3, r0
 80017ac:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 80017ae:	8bbb      	ldrh	r3, [r7, #28]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d010      	beq.n	80017d6 <EE_Init+0x15e>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80017b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017b6:	4a5b      	ldr	r2, [pc, #364]	; (8001924 <EE_Init+0x2ac>)
 80017b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017bc:	4b5a      	ldr	r3, [pc, #360]	; (8001928 <EE_Init+0x2b0>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f000 fa58 	bl	8001c78 <EE_VerifyPageFullWriteVariable>
 80017c8:	4603      	mov	r3, r0
 80017ca:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 80017cc:	8bfb      	ldrh	r3, [r7, #30]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <EE_Init+0x15e>
              {
                return eepromstatus;
 80017d2:	8bfb      	ldrh	r3, [r7, #30]
 80017d4:	e11b      	b.n	8001a0e <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80017d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017d8:	3301      	adds	r3, #1
 80017da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d9cb      	bls.n	800177a <EE_Init+0x102>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	494b      	ldr	r1, [pc, #300]	; (8001918 <EE_Init+0x2a0>)
 80017ec:	2001      	movs	r0, #1
 80017ee:	f002 fc41 	bl	8004074 <HAL_FLASH_Program>
 80017f2:	4603      	mov	r3, r0
 80017f4:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80017f6:	7efb      	ldrb	r3, [r7, #27]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <EE_Init+0x18a>
        {
          return flashstatus;
 80017fc:	7efb      	ldrb	r3, [r7, #27]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	e105      	b.n	8001a0e <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8001806:	4b45      	ldr	r3, [pc, #276]	; (800191c <EE_Init+0x2a4>)
 8001808:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800180a:	2301      	movs	r3, #1
 800180c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800180e:	4843      	ldr	r0, [pc, #268]	; (800191c <EE_Init+0x2a4>)
 8001810:	f000 f90c 	bl	8001a2c <EE_VerifyPageFullyErased>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 80f3 	bne.w	8001a02 <EE_Init+0x38a>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800181c:	f107 0214 	add.w	r2, r7, #20
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f002 fd6d 	bl	8004304 <HAL_FLASHEx_Erase>
 800182a:	4603      	mov	r3, r0
 800182c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800182e:	7efb      	ldrb	r3, [r7, #27]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80e6 	beq.w	8001a02 <EE_Init+0x38a>
          {
            return flashstatus;
 8001836:	7efb      	ldrb	r3, [r7, #27]
 8001838:	b29b      	uxth	r3, r3
 800183a:	e0e8      	b.n	8001a0e <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 800183c:	8c3b      	ldrh	r3, [r7, #32]
 800183e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001842:	4293      	cmp	r3, r2
 8001844:	d12b      	bne.n	800189e <EE_Init+0x226>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 800184a:	4b34      	ldr	r3, [pc, #208]	; (800191c <EE_Init+0x2a4>)
 800184c:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001852:	4832      	ldr	r0, [pc, #200]	; (800191c <EE_Init+0x2a4>)
 8001854:	f000 f8ea 	bl	8001a2c <EE_VerifyPageFullyErased>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10e      	bne.n	800187c <EE_Init+0x204>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800185e:	f107 0214 	add.w	r2, r7, #20
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fd4c 	bl	8004304 <HAL_FLASHEx_Erase>
 800186c:	4603      	mov	r3, r0
 800186e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001870:	7efb      	ldrb	r3, [r7, #27]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <EE_Init+0x204>
          {
            return flashstatus;
 8001876:	7efb      	ldrb	r3, [r7, #27]
 8001878:	b29b      	uxth	r3, r3
 800187a:	e0c8      	b.n	8001a0e <EE_Init+0x396>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	4924      	ldr	r1, [pc, #144]	; (8001918 <EE_Init+0x2a0>)
 8001886:	2001      	movs	r0, #1
 8001888:	f002 fbf4 	bl	8004074 <HAL_FLASH_Program>
 800188c:	4603      	mov	r3, r0
 800188e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001890:	7efb      	ldrb	r3, [r7, #27]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80b5 	beq.w	8001a02 <EE_Init+0x38a>
        {
          return flashstatus;
 8001898:	7efb      	ldrb	r3, [r7, #27]
 800189a:	b29b      	uxth	r3, r3
 800189c:	e0b7      	b.n	8001a0e <EE_Init+0x396>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 800189e:	f000 f957 	bl	8001b50 <EE_Format>
 80018a2:	4603      	mov	r3, r0
 80018a4:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80018a6:	7efb      	ldrb	r3, [r7, #27]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80aa 	beq.w	8001a02 <EE_Init+0x38a>
        {
          return flashstatus;
 80018ae:	7efb      	ldrb	r3, [r7, #27]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	e0ac      	b.n	8001a0e <EE_Init+0x396>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80018b4:	8c3b      	ldrh	r3, [r7, #32]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10a      	bne.n	80018d0 <EE_Init+0x258>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 80018ba:	f000 f949 	bl	8001b50 <EE_Format>
 80018be:	4603      	mov	r3, r0
 80018c0:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80018c2:	7efb      	ldrb	r3, [r7, #27]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 809e 	beq.w	8001a06 <EE_Init+0x38e>
        {
          return flashstatus;
 80018ca:	7efb      	ldrb	r3, [r7, #27]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	e09e      	b.n	8001a0e <EE_Init+0x396>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 80018d0:	8c3b      	ldrh	r3, [r7, #32]
 80018d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d11b      	bne.n	8001912 <EE_Init+0x29a>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <EE_Init+0x2a4>)
 80018e0:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80018e6:	480d      	ldr	r0, [pc, #52]	; (800191c <EE_Init+0x2a4>)
 80018e8:	f000 f8a0 	bl	8001a2c <EE_VerifyPageFullyErased>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 8089 	bne.w	8001a06 <EE_Init+0x38e>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80018f4:	f107 0214 	add.w	r2, r7, #20
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 fd01 	bl	8004304 <HAL_FLASHEx_Erase>
 8001902:	4603      	mov	r3, r0
 8001904:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001906:	7efb      	ldrb	r3, [r7, #27]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d07c      	beq.n	8001a06 <EE_Init+0x38e>
          {
            return flashstatus;
 800190c:	7efb      	ldrb	r3, [r7, #27]
 800190e:	b29b      	uxth	r3, r3
 8001910:	e07d      	b.n	8001a0e <EE_Init+0x396>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001912:	2300      	movs	r3, #0
 8001914:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001916:	e03a      	b.n	800198e <EE_Init+0x316>
 8001918:	08008000 	.word	0x08008000
 800191c:	08018000 	.word	0x08018000
 8001920:	08008006 	.word	0x08008006
 8001924:	200000d0 	.word	0x200000d0
 8001928:	20000094 	.word	0x20000094
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 800192c:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <EE_Init+0x3a0>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b29a      	uxth	r2, r3
 8001932:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001934:	4939      	ldr	r1, [pc, #228]	; (8001a1c <EE_Init+0x3a4>)
 8001936:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800193a:	429a      	cmp	r2, r3
 800193c:	d101      	bne.n	8001942 <EE_Init+0x2ca>
          {
            x = varidx;
 800193e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001940:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8001942:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001944:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001948:	429a      	cmp	r2, r3
 800194a:	d01d      	beq.n	8001988 <EE_Init+0x310>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 800194c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800194e:	4a33      	ldr	r2, [pc, #204]	; (8001a1c <EE_Init+0x3a4>)
 8001950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001954:	4932      	ldr	r1, [pc, #200]	; (8001a20 <EE_Init+0x3a8>)
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f88e 	bl	8001a78 <EE_ReadVariable>
 800195c:	4603      	mov	r3, r0
 800195e:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8001960:	8bbb      	ldrh	r3, [r7, #28]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d010      	beq.n	8001988 <EE_Init+0x310>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8001966:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001968:	4a2c      	ldr	r2, [pc, #176]	; (8001a1c <EE_Init+0x3a4>)
 800196a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800196e:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <EE_Init+0x3a8>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f000 f97f 	bl	8001c78 <EE_VerifyPageFullWriteVariable>
 800197a:	4603      	mov	r3, r0
 800197c:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 800197e:	8bfb      	ldrh	r3, [r7, #30]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <EE_Init+0x310>
              {
                return eepromstatus;
 8001984:	8bfb      	ldrh	r3, [r7, #30]
 8001986:	e042      	b.n	8001a0e <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800198a:	3301      	adds	r3, #1
 800198c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800198e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001990:	2b02      	cmp	r3, #2
 8001992:	d9cb      	bls.n	800192c <EE_Init+0x2b4>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	4921      	ldr	r1, [pc, #132]	; (8001a24 <EE_Init+0x3ac>)
 800199e:	2001      	movs	r0, #1
 80019a0:	f002 fb68 	bl	8004074 <HAL_FLASH_Program>
 80019a4:	4603      	mov	r3, r0
 80019a6:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80019a8:	7efb      	ldrb	r3, [r7, #27]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <EE_Init+0x33c>
        {
          return flashstatus;
 80019ae:	7efb      	ldrb	r3, [r7, #27]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	e02c      	b.n	8001a0e <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <EE_Init+0x3b0>)
 80019ba:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80019bc:	2301      	movs	r3, #1
 80019be:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80019c0:	4819      	ldr	r0, [pc, #100]	; (8001a28 <EE_Init+0x3b0>)
 80019c2:	f000 f833 	bl	8001a2c <EE_VerifyPageFullyErased>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11c      	bne.n	8001a06 <EE_Init+0x38e>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80019cc:	f107 0214 	add.w	r2, r7, #20
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fc95 	bl	8004304 <HAL_FLASHEx_Erase>
 80019da:	4603      	mov	r3, r0
 80019dc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80019de:	7efb      	ldrb	r3, [r7, #27]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d010      	beq.n	8001a06 <EE_Init+0x38e>
          {
            return flashstatus;
 80019e4:	7efb      	ldrb	r3, [r7, #27]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	e011      	b.n	8001a0e <EE_Init+0x396>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 80019ea:	f000 f8b1 	bl	8001b50 <EE_Format>
 80019ee:	4603      	mov	r3, r0
 80019f0:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80019f2:	7efb      	ldrb	r3, [r7, #27]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <EE_Init+0x392>
      {
        return flashstatus;
 80019f8:	7efb      	ldrb	r3, [r7, #27]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	e007      	b.n	8001a0e <EE_Init+0x396>
      break;
 80019fe:	bf00      	nop
 8001a00:	e004      	b.n	8001a0c <EE_Init+0x394>
      break;
 8001a02:	bf00      	nop
 8001a04:	e002      	b.n	8001a0c <EE_Init+0x394>
      break;
 8001a06:	bf00      	nop
 8001a08:	e000      	b.n	8001a0c <EE_Init+0x394>
      }
      break;
 8001a0a:	bf00      	nop
  }

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3728      	adds	r7, #40	; 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	08018006 	.word	0x08018006
 8001a1c:	200000d0 	.word	0x200000d0
 8001a20:	20000094 	.word	0x20000094
 8001a24:	08018000 	.word	0x08018000
 8001a28:	08008000 	.word	0x08008000

08001a2c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 8001a38:	f245 5355 	movw	r3, #21845	; 0x5555
 8001a3c:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8001a3e:	e00d      	b.n	8001a5c <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 8001a46:	897b      	ldrh	r3, [r7, #10]
 8001a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d002      	beq.n	8001a56 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]

      break;
 8001a54:	e006      	b.n	8001a64 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <EE_VerifyPageFullyErased+0x48>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d9ed      	bls.n	8001a40 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	b29b      	uxth	r3, r3
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	080087ff 	.word	0x080087ff

08001a78 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8001a88:	f245 5355 	movw	r3, #21845	; 0x5555
 8001a8c:	81bb      	strh	r3, [r7, #12]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <EE_ReadVariable+0x8c>)
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <EE_ReadVariable+0x8c>)
 8001a98:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f8a8 	bl	8001bf0 <EE_FindValidPage>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8001aa4:	89fb      	ldrh	r3, [r7, #14]
 8001aa6:	2bab      	cmp	r3, #171	; 0xab
 8001aa8:	d101      	bne.n	8001aae <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8001aaa:	23ab      	movs	r3, #171	; 0xab
 8001aac:	e025      	b.n	8001afa <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001ab4:	3310      	adds	r3, #16
 8001ab6:	02db      	lsls	r3, r3, #11
 8001ab8:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8001aba:	89fb      	ldrh	r3, [r7, #14]
 8001abc:	3301      	adds	r3, #1
 8001abe:	02da      	lsls	r2, r3, #11
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <EE_ReadVariable+0x90>)
 8001ac2:	4413      	add	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 8001ac6:	e012      	b.n	8001aee <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 8001ace:	89ba      	ldrh	r2, [r7, #12]
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d108      	bne.n	8001ae8 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	3b02      	subs	r3, #2
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	82fb      	strh	r3, [r7, #22]

      break;
 8001ae6:	e007      	b.n	8001af8 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	3b04      	subs	r3, #4
 8001aec:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3302      	adds	r3, #2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d8e7      	bhi.n	8001ac8 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 8001af8:	8afb      	ldrh	r3, [r7, #22]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	08008000 	.word	0x08008000
 8001b08:	08007ffe 	.word	0x08007ffe

08001b0c <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	80fb      	strh	r3, [r7, #6]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001b20:	88ba      	ldrh	r2, [r7, #4]
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f8a6 	bl	8001c78 <EE_VerifyPageFullWriteVariable>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001b30:	89fb      	ldrh	r3, [r7, #14]
 8001b32:	2b80      	cmp	r3, #128	; 0x80
 8001b34:	d107      	bne.n	8001b46 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8001b36:	88ba      	ldrh	r2, [r7, #4]
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f8f9 	bl	8001d34 <EE_PageTransfer>
 8001b42:	4603      	mov	r3, r0
 8001b44:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8001b46:	89fb      	ldrh	r3, [r7, #14]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 8001b62:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <EE_Format+0x98>)
 8001b64:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001b6a:	481f      	ldr	r0, [pc, #124]	; (8001be8 <EE_Format+0x98>)
 8001b6c:	f7ff ff5e 	bl	8001a2c <EE_VerifyPageFullyErased>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8001b76:	f107 0210 	add.w	r2, r7, #16
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 fbc0 	bl	8004304 <HAL_FLASHEx_Erase>
 8001b84:	4603      	mov	r3, r0
 8001b86:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <EE_Format+0x42>
    {
      return flashstatus;
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	e025      	b.n	8001bde <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	4913      	ldr	r1, [pc, #76]	; (8001be8 <EE_Format+0x98>)
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f002 fa69 	bl	8004074 <HAL_FLASH_Program>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <EE_Format+0x60>
  {
    return flashstatus;
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
 8001bae:	e016      	b.n	8001bde <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <EE_Format+0x9c>)
 8001bb2:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <EE_Format+0x9c>)
 8001bb6:	f7ff ff39 	bl	8001a2c <EE_VerifyPageFullyErased>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10d      	bne.n	8001bdc <EE_Format+0x8c>
  {  
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8001bc0:	f107 0210 	add.w	r2, r7, #16
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 fb9b 	bl	8004304 <HAL_FLASHEx_Erase>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <EE_Format+0x8c>
    {
      return flashstatus;
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	e000      	b.n	8001bde <EE_Format+0x8e>
    }
  }
  
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	08008000 	.word	0x08008000
 8001bec:	08018000 	.word	0x08018000

08001bf0 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	81fb      	strh	r3, [r7, #14]
 8001bfe:	2306      	movs	r3, #6
 8001c00:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <EE_FindValidPage+0x80>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <EE_FindValidPage+0x84>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01b      	beq.n	8001c4c <EE_FindValidPage+0x5c>
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d125      	bne.n	8001c64 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8001c18:	89bb      	ldrh	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d108      	bne.n	8001c30 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 8001c1e:	89fb      	ldrh	r3, [r7, #14]
 8001c20:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d101      	bne.n	8001c2c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e01c      	b.n	8001c66 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001c2c:	2340      	movs	r3, #64	; 0x40
 8001c2e:	e01a      	b.n	8001c66 <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d108      	bne.n	8001c48 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 8001c36:	89bb      	ldrh	r3, [r7, #12]
 8001c38:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001c40:	2340      	movs	r3, #64	; 0x40
 8001c42:	e010      	b.n	8001c66 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001c44:	2300      	movs	r3, #0
 8001c46:	e00e      	b.n	8001c66 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001c48:	23ab      	movs	r3, #171	; 0xab
 8001c4a:	e00c      	b.n	8001c66 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8001c4c:	89fb      	ldrh	r3, [r7, #14]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001c52:	2300      	movs	r3, #0
 8001c54:	e007      	b.n	8001c66 <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 8001c56:	89bb      	ldrh	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001c5c:	2340      	movs	r3, #64	; 0x40
 8001c5e:	e002      	b.n	8001c66 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001c60:	23ab      	movs	r3, #171	; 0xab
 8001c62:	e000      	b.n	8001c66 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001c64:	2300      	movs	r3, #0
  }
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	08008000 	.word	0x08008000
 8001c74:	08018000 	.word	0x08018000

08001c78 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	460a      	mov	r2, r1
 8001c82:	80fb      	strh	r3, [r7, #6]
 8001c84:	4613      	mov	r3, r2
 8001c86:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <EE_VerifyPageFullWriteVariable+0xb0>)
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <EE_VerifyPageFullWriteVariable+0xb4>)
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f7ff ffa9 	bl	8001bf0 <EE_FindValidPage>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8001ca2:	8a3b      	ldrh	r3, [r7, #16]
 8001ca4:	2bab      	cmp	r3, #171	; 0xab
 8001ca6:	d101      	bne.n	8001cac <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8001ca8:	23ab      	movs	r3, #171	; 0xab
 8001caa:	e039      	b.n	8001d20 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8001cac:	8a3b      	ldrh	r3, [r7, #16]
 8001cae:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001cb2:	3310      	adds	r3, #16
 8001cb4:	02db      	lsls	r3, r3, #11
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 8001cb8:	8a3b      	ldrh	r3, [r7, #16]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	02da      	lsls	r2, r3, #11
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <EE_VerifyPageFullWriteVariable+0xb8>)
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8001cc4:	e027      	b.n	8001d16 <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cce:	d11f      	bne.n	8001d10 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8001cd0:	88bb      	ldrh	r3, [r7, #4]
 8001cd2:	f04f 0400 	mov.w	r4, #0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4623      	mov	r3, r4
 8001cda:	6979      	ldr	r1, [r7, #20]
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f002 f9c9 	bl	8004074 <HAL_FLASH_Program>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8001ce6:	7cfb      	ldrb	r3, [r7, #19]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return flashstatus;
 8001cec:	7cfb      	ldrb	r3, [r7, #19]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	e016      	b.n	8001d20 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	1c99      	adds	r1, r3, #2
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	f04f 0400 	mov.w	r4, #0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	2001      	movs	r0, #1
 8001d02:	f002 f9b7 	bl	8004074 <HAL_FLASH_Program>
 8001d06:	4603      	mov	r3, r0
 8001d08:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 8001d0a:	7cfb      	ldrb	r3, [r7, #19]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	e007      	b.n	8001d20 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3304      	adds	r3, #4
 8001d14:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d3d3      	bcc.n	8001cc6 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001d1e:	2380      	movs	r3, #128	; 0x80
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	08008000 	.word	0x08008000
 8001d2c:	08008800 	.word	0x08008800
 8001d30:	08007fff 	.word	0x08007fff

08001d34 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	460a      	mov	r2, r1
 8001d3e:	80fb      	strh	r3, [r7, #6]
 8001d40:	4613      	mov	r3, r2
 8001d42:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
 8001d4a:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <EE_PageTransfer+0x164>)
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t oldpageid = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t validpage = PAGE0, varidx = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d56:	2300      	movs	r3, #0
 8001d58:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	843b      	strh	r3, [r7, #32]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	83fb      	strh	r3, [r7, #30]
  uint32_t page_error = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff ff42 	bl	8001bf0 <EE_FindValidPage>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	847b      	strh	r3, [r7, #34]	; 0x22

  if (validpage == PAGE1)       /* Page1 valid */
 8001d70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d72:	2b40      	cmp	r3, #64	; 0x40
 8001d74:	d104      	bne.n	8001d80 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    newpageaddress = PAGE0_BASE_ADDRESS;
 8001d76:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <EE_PageTransfer+0x164>)
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
 8001d7a:	4b48      	ldr	r3, [pc, #288]	; (8001e9c <EE_PageTransfer+0x168>)
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d7e:	e009      	b.n	8001d94 <EE_PageTransfer+0x60>
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8001d80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d104      	bne.n	8001d90 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;
 8001d86:	4b45      	ldr	r3, [pc, #276]	; (8001e9c <EE_PageTransfer+0x168>)
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 8001d8a:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <EE_PageTransfer+0x164>)
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8e:	e001      	b.n	8001d94 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001d90:	23ab      	movs	r3, #171	; 0xab
 8001d92:	e07c      	b.n	8001e8e <EE_PageTransfer+0x15a>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8001d94:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f002 f968 	bl	8004074 <HAL_FLASH_Program>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001daa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <EE_PageTransfer+0x86>
  {
    return flashstatus;
 8001db2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	e069      	b.n	8001e8e <EE_PageTransfer+0x15a>
  }
  
  /* Write the variable passed as parameter in the new active page */
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001dba:	88ba      	ldrh	r2, [r7, #4]
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff59 	bl	8001c78 <EE_VerifyPageFullWriteVariable>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	843b      	strh	r3, [r7, #32]
  /* If program operation was failed, a Flash error code is returned */
  if (eepromstatus != HAL_OK)
 8001dca:	8c3b      	ldrh	r3, [r7, #32]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <EE_PageTransfer+0xa0>
  {
    return eepromstatus;
 8001dd0:	8c3b      	ldrh	r3, [r7, #32]
 8001dd2:	e05c      	b.n	8001e8e <EE_PageTransfer+0x15a>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001dd8:	e027      	b.n	8001e2a <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001dda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ddc:	4a30      	ldr	r2, [pc, #192]	; (8001ea0 <EE_PageTransfer+0x16c>)
 8001dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001de2:	88fa      	ldrh	r2, [r7, #6]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d01d      	beq.n	8001e24 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8001de8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dea:	4a2d      	ldr	r2, [pc, #180]	; (8001ea0 <EE_PageTransfer+0x16c>)
 8001dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001df0:	492c      	ldr	r1, [pc, #176]	; (8001ea4 <EE_PageTransfer+0x170>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fe40 	bl	8001a78 <EE_ReadVariable>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	83fb      	strh	r3, [r7, #30]
      /* In case variable corresponding to the virtual address was found */
      if (readstatus != 0x1)
 8001dfc:	8bfb      	ldrh	r3, [r7, #30]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d010      	beq.n	8001e24 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8001e02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e04:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <EE_PageTransfer+0x16c>)
 8001e06:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <EE_PageTransfer+0x170>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4610      	mov	r0, r2
 8001e12:	f7ff ff31 	bl	8001c78 <EE_VerifyPageFullWriteVariable>
 8001e16:	4603      	mov	r3, r0
 8001e18:	843b      	strh	r3, [r7, #32]
        /* If program operation was failed, a Flash error code is returned */
        if (eepromstatus != HAL_OK)
 8001e1a:	8c3b      	ldrh	r3, [r7, #32]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <EE_PageTransfer+0xf0>
        {
          return eepromstatus;
 8001e20:	8c3b      	ldrh	r3, [r7, #32]
 8001e22:	e034      	b.n	8001e8e <EE_PageTransfer+0x15a>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001e24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e26:	3301      	adds	r3, #1
 8001e28:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d9d4      	bls.n	8001dda <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  s_eraseinit.PageAddress = oldpageid;
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = 1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8001e3c:	f107 0218 	add.w	r2, r7, #24
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 fa5c 	bl	8004304 <HAL_FLASHEx_Erase>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001e52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <EE_PageTransfer+0x12e>
  {
    return flashstatus;
 8001e5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	e015      	b.n	8001e8e <EE_PageTransfer+0x15a>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f002 f901 	bl	8004074 <HAL_FLASH_Program>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001e78:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <EE_PageTransfer+0x154>
  {
    return flashstatus;
 8001e80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	e002      	b.n	8001e8e <EE_PageTransfer+0x15a>
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8001e88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e8c:	b29b      	uxth	r3, r3
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3730      	adds	r7, #48	; 0x30
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	08008000 	.word	0x08008000
 8001e9c:	08018000 	.word	0x08018000
 8001ea0:	200000d0 	.word	0x200000d0
 8001ea4:	20000094 	.word	0x20000094

08001ea8 <HAL_UART_RxCpltCallback>:
	AD_RES[1] = HAL_ADC_GetValue(&hadc1);
	if(AD_RES[1]<100) flag_1=1;

}*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	chenge_Data = 1;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_UART_RxCpltCallback+0x18>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	200000a0 	.word	0x200000a0

08001ec4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff faed 	bl	80014ac <STEPPER_TMR_OVF_ISR>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ee2:	f000 fcbf 	bl	8002864 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ee6:	f000 f959 	bl	800219c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//ADC_ChannelConfTypeDef sConfig = {0};
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001eea:	f000 fa53 	bl	8002394 <MX_GPIO_Init>
	MX_DMA_Init();
 8001eee:	f000 fa2b 	bl	8002348 <MX_DMA_Init>
	MX_ADC1_Init();
 8001ef2:	f000 f9b1 	bl	8002258 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8001ef6:	f000 f9fd 	bl	80022f4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	EE_Init();
 8001efa:	f7ff fbbd 	bl	8001678 <EE_Init>

	EE_ReadVariable(0, n);
 8001efe:	4b92      	ldr	r3, [pc, #584]	; (8002148 <main+0x26c>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4619      	mov	r1, r3
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff fdb7 	bl	8001a78 <EE_ReadVariable>

	HAL_ADCEx_Calibration_Start(&hadc1);
 8001f0a:	4890      	ldr	r0, [pc, #576]	; (800214c <main+0x270>)
 8001f0c:	f001 fa6c 	bl	80033e8 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, AD_RES, 2);
 8001f10:	2202      	movs	r2, #2
 8001f12:	498f      	ldr	r1, [pc, #572]	; (8002150 <main+0x274>)
 8001f14:	488d      	ldr	r0, [pc, #564]	; (800214c <main+0x270>)
 8001f16:	f000 fea7 	bl	8002c68 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 8001f1a:	488c      	ldr	r0, [pc, #560]	; (800214c <main+0x270>)
 8001f1c:	f000 fdee 	bl	8002afc <HAL_ADC_Start_IT>


	HAL_UART_Receive_DMA(&huart1, setting, 1);
 8001f20:	2201      	movs	r2, #1
 8001f22:	498c      	ldr	r1, [pc, #560]	; (8002154 <main+0x278>)
 8001f24:	488c      	ldr	r0, [pc, #560]	; (8002158 <main+0x27c>)
 8001f26:	f003 fe40 	bl	8005baa <HAL_UART_Receive_DMA>

	while(setting[0] == 0);
 8001f2a:	bf00      	nop
 8001f2c:	4b89      	ldr	r3, [pc, #548]	; (8002154 <main+0x278>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0fb      	beq.n	8001f2c <main+0x50>

	int numberofclock = setting[0];
 8001f34:	4b87      	ldr	r3, [pc, #540]	; (8002154 <main+0x278>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	607b      	str	r3, [r7, #4]

	numberofarray = 5*numberofclock+1;
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3301      	adds	r3, #1
 8001f44:	4a85      	ldr	r2, [pc, #532]	; (800215c <main+0x280>)
 8001f46:	6013      	str	r3, [r2, #0]

	HAL_UART_DMAStop(&huart1);
 8001f48:	4883      	ldr	r0, [pc, #524]	; (8002158 <main+0x27c>)
 8001f4a:	f003 fe5e 	bl	8005c0a <HAL_UART_DMAStop>

	chenge_Data = 0;
 8001f4e:	4b84      	ldr	r3, [pc, #528]	; (8002160 <main+0x284>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart1, buffer, numberofarray);
 8001f54:	4b81      	ldr	r3, [pc, #516]	; (800215c <main+0x280>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4981      	ldr	r1, [pc, #516]	; (8002164 <main+0x288>)
 8001f5e:	487e      	ldr	r0, [pc, #504]	; (8002158 <main+0x27c>)
 8001f60:	f003 fe23 	bl	8005baa <HAL_UART_Receive_DMA>

	STEPPERS_Init_TMR(&htim1);
 8001f64:	4880      	ldr	r0, [pc, #512]	; (8002168 <main+0x28c>)
 8001f66:	f7fe ff45 	bl	8000df4 <STEPPERS_Init_TMR>

	STEPPER_SetSpeed(STEPPER_MOTOR1, 100);
 8001f6a:	2164      	movs	r1, #100	; 0x64
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7fe ff8b 	bl	8000e88 <STEPPER_SetSpeed>
	STEPPER_SetSpeed(STEPPER_MOTOR2, 100);
 8001f72:	2164      	movs	r1, #100	; 0x64
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7fe ff87 	bl	8000e88 <STEPPER_SetSpeed>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_ADC_Start_IT(&hadc1);
 8001f7a:	4874      	ldr	r0, [pc, #464]	; (800214c <main+0x270>)
 8001f7c:	f000 fdbe 	bl	8002afc <HAL_ADC_Start_IT>
		if(chenge_Data == 1 && buffer[0] ==0x02)
 8001f80:	4b77      	ldr	r3, [pc, #476]	; (8002160 <main+0x284>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10c      	bne.n	8001fa2 <main+0xc6>
 8001f88:	4b76      	ldr	r3, [pc, #472]	; (8002164 <main+0x288>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d108      	bne.n	8001fa2 <main+0xc6>
		{
			chenge_Data=0;
 8001f90:	4b73      	ldr	r3, [pc, #460]	; (8002160 <main+0x284>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
			flag = 0;
 8001f96:	4b75      	ldr	r3, [pc, #468]	; (800216c <main+0x290>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
			flag_1 = 0;
 8001f9c:	4b74      	ldr	r3, [pc, #464]	; (8002170 <main+0x294>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
		}
		if(chenge_Data == 1 && buffer[0] ==0x03)
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <main+0x284>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	f040 80b3 	bne.w	8002112 <main+0x236>
 8001fac:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <main+0x288>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	f040 80ae 	bne.w	8002112 <main+0x236>
		{

			//get Direction of Rotation
			uint8_t MSB_1 = buffer[5*n+2] & 0xF0;
 8001fb6:	4b64      	ldr	r3, [pc, #400]	; (8002148 <main+0x26c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	4a67      	ldr	r2, [pc, #412]	; (8002164 <main+0x288>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	f023 030f 	bic.w	r3, r3, #15
 8001fcc:	70fb      	strb	r3, [r7, #3]
			//4 bit shift to right
			Direction_1 = MSB_1>>4;
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4b67      	ldr	r3, [pc, #412]	; (8002174 <main+0x298>)
 8001fd6:	701a      	strb	r2, [r3, #0]

			//get Direction of Rotation
			uint8_t MSB_2 = buffer[5*n+4] & 0xF0;
 8001fd8:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <main+0x26c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	4a5f      	ldr	r2, [pc, #380]	; (8002164 <main+0x288>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	f023 030f 	bic.w	r3, r3, #15
 8001fee:	70bb      	strb	r3, [r7, #2]
			//4 bit shift to right
			Direction_2 = MSB_2>>4;
 8001ff0:	78bb      	ldrb	r3, [r7, #2]
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b60      	ldr	r3, [pc, #384]	; (8002178 <main+0x29c>)
 8001ff8:	701a      	strb	r2, [r3, #0]

			//get 4bit of degree in binary
			uint8_t LSB_1 = buffer[5*n+2] & 0x0F;
 8001ffa:	4b53      	ldr	r3, [pc, #332]	; (8002148 <main+0x26c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3302      	adds	r3, #2
 8002008:	4a56      	ldr	r2, [pc, #344]	; (8002164 <main+0x288>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	707b      	strb	r3, [r7, #1]
			//calculate degree in 2 byte
			degree_1 = LSB_1<<8 | buffer[5*n+3];
 8002012:	787b      	ldrb	r3, [r7, #1]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b21a      	sxth	r2, r3
 8002018:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <main+0x26c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	460b      	mov	r3, r1
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	3303      	adds	r3, #3
 8002026:	494f      	ldr	r1, [pc, #316]	; (8002164 <main+0x288>)
 8002028:	5ccb      	ldrb	r3, [r1, r3]
 800202a:	b21b      	sxth	r3, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	b21b      	sxth	r3, r3
 8002030:	b29a      	uxth	r2, r3
 8002032:	4b52      	ldr	r3, [pc, #328]	; (800217c <main+0x2a0>)
 8002034:	801a      	strh	r2, [r3, #0]
			//calculate steps
			step_1 = degree_1 /0.17578125 ;
 8002036:	4b51      	ldr	r3, [pc, #324]	; (800217c <main+0x2a0>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa46 	bl	80004cc <__aeabi_i2d>
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	4b4e      	ldr	r3, [pc, #312]	; (8002180 <main+0x2a4>)
 8002046:	f7fe fbd5 	bl	80007f4 <__aeabi_ddiv>
 800204a:	4603      	mov	r3, r0
 800204c:	460c      	mov	r4, r1
 800204e:	4618      	mov	r0, r3
 8002050:	4621      	mov	r1, r4
 8002052:	f7fe fcd7 	bl	8000a04 <__aeabi_d2f>
 8002056:	4602      	mov	r2, r0
 8002058:	4b4a      	ldr	r3, [pc, #296]	; (8002184 <main+0x2a8>)
 800205a:	601a      	str	r2, [r3, #0]
			round_step_1 = round(step_1);
 800205c:	4b49      	ldr	r3, [pc, #292]	; (8002184 <main+0x2a8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa45 	bl	80004f0 <__aeabi_f2d>
 8002066:	4603      	mov	r3, r0
 8002068:	460c      	mov	r4, r1
 800206a:	4618      	mov	r0, r3
 800206c:	4621      	mov	r1, r4
 800206e:	f004 fb2d 	bl	80066cc <round>
 8002072:	4603      	mov	r3, r0
 8002074:	460c      	mov	r4, r1
 8002076:	4618      	mov	r0, r3
 8002078:	4621      	mov	r1, r4
 800207a:	f7fe fca3 	bl	80009c4 <__aeabi_d2uiz>
 800207e:	4602      	mov	r2, r0
 8002080:	4b41      	ldr	r3, [pc, #260]	; (8002188 <main+0x2ac>)
 8002082:	601a      	str	r2, [r3, #0]

			//get 4bit of degree in binary
			uint8_t LSB_2 = buffer[5*n+4] & 0x0F;
 8002084:	4b30      	ldr	r3, [pc, #192]	; (8002148 <main+0x26c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	4a34      	ldr	r2, [pc, #208]	; (8002164 <main+0x288>)
 8002094:	5cd3      	ldrb	r3, [r2, r3]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	703b      	strb	r3, [r7, #0]
			//calculate degree in 2 byte
			degree_2 = LSB_2<<8 | buffer[5*n+5];
 800209c:	783b      	ldrb	r3, [r7, #0]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	b219      	sxth	r1, r3
 80020a2:	4b29      	ldr	r3, [pc, #164]	; (8002148 <main+0x26c>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	4a2d      	ldr	r2, [pc, #180]	; (8002164 <main+0x288>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	430b      	orrs	r3, r1
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <main+0x2b0>)
 80020bc:	801a      	strh	r2, [r3, #0]
			//calculate steps
			step_2 = degree_2 /0.17578125 ;
 80020be:	4b33      	ldr	r3, [pc, #204]	; (800218c <main+0x2b0>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa02 	bl	80004cc <__aeabi_i2d>
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <main+0x2a4>)
 80020ce:	f7fe fb91 	bl	80007f4 <__aeabi_ddiv>
 80020d2:	4603      	mov	r3, r0
 80020d4:	460c      	mov	r4, r1
 80020d6:	4618      	mov	r0, r3
 80020d8:	4621      	mov	r1, r4
 80020da:	f7fe fc93 	bl	8000a04 <__aeabi_d2f>
 80020de:	4602      	mov	r2, r0
 80020e0:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <main+0x2b4>)
 80020e2:	601a      	str	r2, [r3, #0]
			round_step_2 = round(step_2);
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <main+0x2b4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa01 	bl	80004f0 <__aeabi_f2d>
 80020ee:	4603      	mov	r3, r0
 80020f0:	460c      	mov	r4, r1
 80020f2:	4618      	mov	r0, r3
 80020f4:	4621      	mov	r1, r4
 80020f6:	f004 fae9 	bl	80066cc <round>
 80020fa:	4603      	mov	r3, r0
 80020fc:	460c      	mov	r4, r1
 80020fe:	4618      	mov	r0, r3
 8002100:	4621      	mov	r1, r4
 8002102:	f7fe fc5f 	bl	80009c4 <__aeabi_d2uiz>
 8002106:	4602      	mov	r2, r0
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <main+0x2b8>)
 800210a:	601a      	str	r2, [r3, #0]

			i = 1;
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <main+0x2bc>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]



		//job

		switch(buffer[0])
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <main+0x288>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d006      	beq.n	8002128 <main+0x24c>
 800211a:	2b03      	cmp	r3, #3
 800211c:	d007      	beq.n	800212e <main+0x252>
 800211e:	2b01      	cmp	r3, #1
 8002120:	d110      	bne.n	8002144 <main+0x268>
		{
		case 0x01 : //set ID : Number of clock
			set_id();
 8002122:	f7ff fa39 	bl	8001598 <set_id>
			break;
 8002126:	e00d      	b.n	8002144 <main+0x268>
		case 0x02 : //go to position 0
			start_clock();
 8002128:	f7ff fa48 	bl	80015bc <start_clock>
			break;
 800212c:	e00a      	b.n	8002144 <main+0x268>
		case 0x03 : //go to specific position
			spec_position(Direction_1,round_step_1,Direction_2	,round_step_2);
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <main+0x298>)
 8002130:	7818      	ldrb	r0, [r3, #0]
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <main+0x2ac>)
 8002134:	6819      	ldr	r1, [r3, #0]
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <main+0x29c>)
 8002138:	781a      	ldrb	r2, [r3, #0]
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <main+0x2b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f7ff fa6f 	bl	8001620 <spec_position>
			break;
 8002142:	bf00      	nop
		HAL_ADC_Start_IT(&hadc1);
 8002144:	e719      	b.n	8001f7a <main+0x9e>
 8002146:	bf00      	nop
 8002148:	20000096 	.word	0x20000096
 800214c:	200000f4 	.word	0x200000f4
 8002150:	200000d8 	.word	0x200000d8
 8002154:	200000a8 	.word	0x200000a8
 8002158:	20000168 	.word	0x20000168
 800215c:	200000cc 	.word	0x200000cc
 8002160:	200000a0 	.word	0x200000a0
 8002164:	200000ac 	.word	0x200000ac
 8002168:	200001fc 	.word	0x200001fc
 800216c:	20000098 	.word	0x20000098
 8002170:	2000009c 	.word	0x2000009c
 8002174:	200001f4 	.word	0x200001f4
 8002178:	200000f0 	.word	0x200000f0
 800217c:	200000e0 	.word	0x200000e0
 8002180:	3fc68000 	.word	0x3fc68000
 8002184:	200000e4 	.word	0x200000e4
 8002188:	20000248 	.word	0x20000248
 800218c:	20000244 	.word	0x20000244
 8002190:	200000ec 	.word	0x200000ec
 8002194:	200001f8 	.word	0x200001f8
 8002198:	200000a4 	.word	0x200000a4

0800219c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b096      	sub	sp, #88	; 0x58
 80021a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021a6:	2228      	movs	r2, #40	; 0x28
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 fa86 	bl	80066bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]
 80021cc:	611a      	str	r2, [r3, #16]
 80021ce:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021de:	2301      	movs	r3, #1
 80021e0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e2:	2302      	movs	r3, #2
 80021e4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ea:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021f0:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 faae 	bl	8004758 <HAL_RCC_OscConfig>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 8002202:	f000 f929 	bl	8002458 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002206:	230f      	movs	r3, #15
 8002208:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800220a:	2302      	movs	r3, #2
 800220c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	2102      	movs	r1, #2
 8002222:	4618      	mov	r0, r3
 8002224:	f002 fd18 	bl	8004c58 <HAL_RCC_ClockConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <SystemClock_Config+0x96>
	{
		Error_Handler();
 800222e:	f000 f913 	bl	8002458 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002232:	2302      	movs	r3, #2
 8002234:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800223a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4618      	mov	r0, r3
 8002240:	f002 fea6 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0xb2>
	{
		Error_Handler();
 800224a:	f000 f905 	bl	8002458 <Error_Handler>
	}
}
 800224e:	bf00      	nop
 8002250:	3758      	adds	r7, #88	; 0x58
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002268:	4b20      	ldr	r3, [pc, #128]	; (80022ec <MX_ADC1_Init+0x94>)
 800226a:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <MX_ADC1_Init+0x98>)
 800226c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <MX_ADC1_Init+0x94>)
 8002270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002274:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <MX_ADC1_Init+0x94>)
 8002278:	2201      	movs	r2, #1
 800227a:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <MX_ADC1_Init+0x94>)
 800227e:	2200      	movs	r2, #0
 8002280:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <MX_ADC1_Init+0x94>)
 8002284:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002288:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800228a:	4b18      	ldr	r3, [pc, #96]	; (80022ec <MX_ADC1_Init+0x94>)
 800228c:	2200      	movs	r2, #0
 800228e:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 8002290:	4b16      	ldr	r3, [pc, #88]	; (80022ec <MX_ADC1_Init+0x94>)
 8002292:	2202      	movs	r2, #2
 8002294:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002296:	4815      	ldr	r0, [pc, #84]	; (80022ec <MX_ADC1_Init+0x94>)
 8002298:	f000 fb46 	bl	8002928 <HAL_ADC_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 80022a2:	f000 f8d9 	bl	8002458 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80022ae:	2305      	movs	r3, #5
 80022b0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	480d      	ldr	r0, [pc, #52]	; (80022ec <MX_ADC1_Init+0x94>)
 80022b8:	f000 fe9c 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 80022c2:	f000 f8c9 	bl	8002458 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80022c6:	2302      	movs	r3, #2
 80022c8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80022ca:	2302      	movs	r3, #2
 80022cc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4806      	ldr	r0, [pc, #24]	; (80022ec <MX_ADC1_Init+0x94>)
 80022d4:	f000 fe8e 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_ADC1_Init+0x8a>
	{
		Error_Handler();
 80022de:	f000 f8bb 	bl	8002458 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200000f4 	.word	0x200000f4
 80022f0:	40012400 	.word	0x40012400

080022f4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <MX_USART1_UART_Init+0x50>)
 80022fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 8002300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002304:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 800231a:	220c      	movs	r2, #12
 800231c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800232a:	4805      	ldr	r0, [pc, #20]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 800232c:	f003 fbf0 	bl	8005b10 <HAL_UART_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8002336:	f000 f88f 	bl	8002458 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000168 	.word	0x20000168
 8002344:	40013800 	.word	0x40013800

08002348 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <MX_DMA_Init+0x48>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <MX_DMA_Init+0x48>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6153      	str	r3, [r2, #20]
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <MX_DMA_Init+0x48>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	200b      	movs	r0, #11
 800236c:	f001 f9c9 	bl	8003702 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002370:	200b      	movs	r0, #11
 8002372:	f001 f9e2 	bl	800373a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	200f      	movs	r0, #15
 800237c:	f001 f9c1 	bl	8003702 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002380:	200f      	movs	r0, #15
 8002382:	f001 f9da 	bl	800373a <HAL_NVIC_EnableIRQ>

}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000

08002394 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <MX_GPIO_Init+0xb8>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a27      	ldr	r2, [pc, #156]	; (800244c <MX_GPIO_Init+0xb8>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <MX_GPIO_Init+0xb8>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <MX_GPIO_Init+0xb8>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a21      	ldr	r2, [pc, #132]	; (800244c <MX_GPIO_Init+0xb8>)
 80023c6:	f043 0308 	orr.w	r3, r3, #8
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b1f      	ldr	r3, [pc, #124]	; (800244c <MX_GPIO_Init+0xb8>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <MX_GPIO_Init+0xb8>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a1b      	ldr	r2, [pc, #108]	; (800244c <MX_GPIO_Init+0xb8>)
 80023de:	f043 0320 	orr.w	r3, r3, #32
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <MX_GPIO_Init+0xb8>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80023f0:	2200      	movs	r2, #0
 80023f2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80023f6:	4816      	ldr	r0, [pc, #88]	; (8002450 <MX_GPIO_Init+0xbc>)
 80023f8:	f002 f996 	bl	8004728 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002402:	4814      	ldr	r0, [pc, #80]	; (8002454 <MX_GPIO_Init+0xc0>)
 8002404:	f002 f990 	bl	8004728 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002408:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800240c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240e:	2301      	movs	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2302      	movs	r3, #2
 8002418:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	f107 0310 	add.w	r3, r7, #16
 800241e:	4619      	mov	r1, r3
 8002420:	480b      	ldr	r0, [pc, #44]	; (8002450 <MX_GPIO_Init+0xbc>)
 8002422:	f002 f817 	bl	8004454 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002426:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800242a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242c:	2301      	movs	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2302      	movs	r3, #2
 8002436:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	4619      	mov	r1, r3
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_GPIO_Init+0xc0>)
 8002440:	f002 f808 	bl	8004454 <HAL_GPIO_Init>

}
 8002444:	bf00      	nop
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	40010c00 	.word	0x40010c00
 8002454:	40011400 	.word	0x40011400

08002458 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800245c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800245e:	e7fe      	b.n	800245e <Error_Handler+0x6>

08002460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_MspInit+0x5c>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	4a14      	ldr	r2, [pc, #80]	; (80024bc <HAL_MspInit+0x5c>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6193      	str	r3, [r2, #24]
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_MspInit+0x5c>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_MspInit+0x5c>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_MspInit+0x5c>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	61d3      	str	r3, [r2, #28]
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_MspInit+0x5c>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_MspInit+0x60>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_MspInit+0x60>)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010000 	.word	0x40010000

080024c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0310 	add.w	r3, r7, #16
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2c      	ldr	r2, [pc, #176]	; (8002590 <HAL_ADC_MspInit+0xcc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d151      	bne.n	8002588 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_ADC_MspInit+0xd0>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	4a2a      	ldr	r2, [pc, #168]	; (8002594 <HAL_ADC_MspInit+0xd0>)
 80024ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ee:	6193      	str	r3, [r2, #24]
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <HAL_ADC_MspInit+0xd0>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_ADC_MspInit+0xd0>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a24      	ldr	r2, [pc, #144]	; (8002594 <HAL_ADC_MspInit+0xd0>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_ADC_MspInit+0xd0>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002514:	2306      	movs	r3, #6
 8002516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002518:	2303      	movs	r3, #3
 800251a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	f107 0310 	add.w	r3, r7, #16
 8002520:	4619      	mov	r1, r3
 8002522:	481d      	ldr	r0, [pc, #116]	; (8002598 <HAL_ADC_MspInit+0xd4>)
 8002524:	f001 ff96 	bl	8004454 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <HAL_ADC_MspInit+0xd8>)
 800252a:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <HAL_ADC_MspInit+0xdc>)
 800252c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_ADC_MspInit+0xd8>)
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_ADC_MspInit+0xd8>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_ADC_MspInit+0xd8>)
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <HAL_ADC_MspInit+0xd8>)
 8002542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002546:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_ADC_MspInit+0xd8>)
 800254a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800254e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_ADC_MspInit+0xd8>)
 8002552:	2220      	movs	r2, #32
 8002554:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_ADC_MspInit+0xd8>)
 8002558:	2200      	movs	r2, #0
 800255a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800255c:	480f      	ldr	r0, [pc, #60]	; (800259c <HAL_ADC_MspInit+0xd8>)
 800255e:	f001 f907 	bl	8003770 <HAL_DMA_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002568:	f7ff ff76 	bl	8002458 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <HAL_ADC_MspInit+0xd8>)
 8002570:	621a      	str	r2, [r3, #32]
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <HAL_ADC_MspInit+0xd8>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	2012      	movs	r0, #18
 800257e:	f001 f8c0 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002582:	2012      	movs	r0, #18
 8002584:	f001 f8d9 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002588:	bf00      	nop
 800258a:	3720      	adds	r7, #32
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40012400 	.word	0x40012400
 8002594:	40021000 	.word	0x40021000
 8002598:	40010800 	.word	0x40010800
 800259c:	200001b0 	.word	0x200001b0
 80025a0:	40020008 	.word	0x40020008

080025a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_TIM_Base_MspInit+0x74>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d12b      	bne.n	800260e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_TIM_Base_MspInit+0x78>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	4a18      	ldr	r2, [pc, #96]	; (800261c <HAL_TIM_Base_MspInit+0x78>)
 80025bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025c0:	6193      	str	r3, [r2, #24]
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_TIM_Base_MspInit+0x78>)
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	2018      	movs	r0, #24
 80025d4:	f001 f895 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80025d8:	2018      	movs	r0, #24
 80025da:	f001 f8ae 	bl	800373a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	2019      	movs	r0, #25
 80025e4:	f001 f88d 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80025e8:	2019      	movs	r0, #25
 80025ea:	f001 f8a6 	bl	800373a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	201a      	movs	r0, #26
 80025f4:	f001 f885 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80025f8:	201a      	movs	r0, #26
 80025fa:	f001 f89e 	bl	800373a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	201b      	movs	r0, #27
 8002604:	f001 f87d 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002608:	201b      	movs	r0, #27
 800260a:	f001 f896 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40012c00 	.word	0x40012c00
 800261c:	40021000 	.word	0x40021000

08002620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a33      	ldr	r2, [pc, #204]	; (8002708 <HAL_UART_MspInit+0xe8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d15f      	bne.n	8002700 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002640:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_UART_MspInit+0xec>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4a31      	ldr	r2, [pc, #196]	; (800270c <HAL_UART_MspInit+0xec>)
 8002646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264a:	6193      	str	r3, [r2, #24]
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_UART_MspInit+0xec>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_UART_MspInit+0xec>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a2b      	ldr	r2, [pc, #172]	; (800270c <HAL_UART_MspInit+0xec>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_UART_MspInit+0xec>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267a:	2303      	movs	r3, #3
 800267c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	4619      	mov	r1, r3
 8002684:	4822      	ldr	r0, [pc, #136]	; (8002710 <HAL_UART_MspInit+0xf0>)
 8002686:	f001 fee5 	bl	8004454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800268a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800268e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	4619      	mov	r1, r3
 800269e:	481c      	ldr	r0, [pc, #112]	; (8002710 <HAL_UART_MspInit+0xf0>)
 80026a0:	f001 fed8 	bl	8004454 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_UART_MspInit+0xf4>)
 80026a6:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_UART_MspInit+0xf8>)
 80026a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_UART_MspInit+0xf4>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_UART_MspInit+0xf4>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <HAL_UART_MspInit+0xf4>)
 80026b8:	2280      	movs	r2, #128	; 0x80
 80026ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_UART_MspInit+0xf4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_UART_MspInit+0xf4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_UART_MspInit+0xf4>)
 80026ca:	2220      	movs	r2, #32
 80026cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_UART_MspInit+0xf4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026d4:	480f      	ldr	r0, [pc, #60]	; (8002714 <HAL_UART_MspInit+0xf4>)
 80026d6:	f001 f84b 	bl	8003770 <HAL_DMA_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80026e0:	f7ff feba 	bl	8002458 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <HAL_UART_MspInit+0xf4>)
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <HAL_UART_MspInit+0xf4>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026f0:	2200      	movs	r2, #0
 80026f2:	2100      	movs	r1, #0
 80026f4:	2025      	movs	r0, #37	; 0x25
 80026f6:	f001 f804 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026fa:	2025      	movs	r0, #37	; 0x25
 80026fc:	f001 f81d 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002700:	bf00      	nop
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40013800 	.word	0x40013800
 800270c:	40021000 	.word	0x40021000
 8002710:	40010800 	.word	0x40010800
 8002714:	20000124 	.word	0x20000124
 8002718:	40020058 	.word	0x40020058

0800271c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <NMI_Handler+0x4>

08002722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002726:	e7fe      	b.n	8002726 <HardFault_Handler+0x4>

08002728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800272c:	e7fe      	b.n	800272c <MemManage_Handler+0x4>

0800272e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002732:	e7fe      	b.n	8002732 <BusFault_Handler+0x4>

08002734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002738:	e7fe      	b.n	8002738 <UsageFault_Handler+0x4>

0800273a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002762:	f000 f8c5 	bl	80028f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <DMA1_Channel1_IRQHandler+0x10>)
 8002772:	f001 fa15 	bl	8003ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200001b0 	.word	0x200001b0

08002780 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <DMA1_Channel5_IRQHandler+0x10>)
 8002786:	f001 fa0b 	bl	8003ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000124 	.word	0x20000124

08002794 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <ADC1_2_IRQHandler+0x10>)
 800279a:	f000 fb43 	bl	8002e24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200000f4 	.word	0x200000f4

080027a8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <TIM1_BRK_IRQHandler+0x10>)
 80027ae:	f002 fe3d 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200001fc 	.word	0x200001fc

080027bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <TIM1_UP_IRQHandler+0x10>)
 80027c2:	f002 fe33 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200001fc 	.word	0x200001fc

080027d0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80027d6:	f002 fe29 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200001fc 	.word	0x200001fc

080027e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027e8:	4802      	ldr	r0, [pc, #8]	; (80027f4 <TIM1_CC_IRQHandler+0x10>)
 80027ea:	f002 fe1f 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200001fc 	.word	0x200001fc

080027f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <USART1_IRQHandler+0x10>)
 80027fe:	f003 fa5f 	bl	8005cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000168 	.word	0x20000168

0800280c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <Reset_Handler>:
 8002818:	480c      	ldr	r0, [pc, #48]	; (800284c <LoopFillZerobss+0x12>)
 800281a:	490d      	ldr	r1, [pc, #52]	; (8002850 <LoopFillZerobss+0x16>)
 800281c:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <LoopFillZerobss+0x1a>)
 800281e:	2300      	movs	r3, #0
 8002820:	e002      	b.n	8002828 <LoopCopyDataInit>

08002822 <CopyDataInit>:
 8002822:	58d4      	ldr	r4, [r2, r3]
 8002824:	50c4      	str	r4, [r0, r3]
 8002826:	3304      	adds	r3, #4

08002828 <LoopCopyDataInit>:
 8002828:	18c4      	adds	r4, r0, r3
 800282a:	428c      	cmp	r4, r1
 800282c:	d3f9      	bcc.n	8002822 <CopyDataInit>
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <LoopFillZerobss+0x1e>)
 8002830:	4c0a      	ldr	r4, [pc, #40]	; (800285c <LoopFillZerobss+0x22>)
 8002832:	2300      	movs	r3, #0
 8002834:	e001      	b.n	800283a <LoopFillZerobss>

08002836 <FillZerobss>:
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	3204      	adds	r2, #4

0800283a <LoopFillZerobss>:
 800283a:	42a2      	cmp	r2, r4
 800283c:	d3fb      	bcc.n	8002836 <FillZerobss>
 800283e:	f7ff ffe5 	bl	800280c <SystemInit>
 8002842:	f003 ff17 	bl	8006674 <__libc_init_array>
 8002846:	f7ff fb49 	bl	8001edc <main>
 800284a:	4770      	bx	lr
 800284c:	20000000 	.word	0x20000000
 8002850:	2000004c 	.word	0x2000004c
 8002854:	080067f0 	.word	0x080067f0
 8002858:	20000050 	.word	0x20000050
 800285c:	20000270 	.word	0x20000270

08002860 <ADC3_IRQHandler>:
 8002860:	e7fe      	b.n	8002860 <ADC3_IRQHandler>
	...

08002864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_Init+0x28>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a07      	ldr	r2, [pc, #28]	; (800288c <HAL_Init+0x28>)
 800286e:	f043 0310 	orr.w	r3, r3, #16
 8002872:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002874:	2003      	movs	r0, #3
 8002876:	f000 ff39 	bl	80036ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800287a:	2000      	movs	r0, #0
 800287c:	f000 f808 	bl	8002890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002880:	f7ff fdee 	bl	8002460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40022000 	.word	0x40022000

08002890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_InitTick+0x54>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_InitTick+0x58>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4619      	mov	r1, r3
 80028a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 ff51 	bl	8003756 <HAL_SYSTICK_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00e      	b.n	80028dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b0f      	cmp	r3, #15
 80028c2:	d80a      	bhi.n	80028da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c4:	2200      	movs	r2, #0
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295
 80028cc:	f000 ff19 	bl	8003702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d0:	4a06      	ldr	r2, [pc, #24]	; (80028ec <HAL_InitTick+0x5c>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000040 	.word	0x20000040
 80028e8:	20000048 	.word	0x20000048
 80028ec:	20000044 	.word	0x20000044

080028f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_IncTick+0x1c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_IncTick+0x20>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	4a03      	ldr	r2, [pc, #12]	; (8002910 <HAL_IncTick+0x20>)
 8002902:	6013      	str	r3, [r2, #0]
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	20000048 	.word	0x20000048
 8002910:	2000024c 	.word	0x2000024c

08002914 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return uwTick;
 8002918:	4b02      	ldr	r3, [pc, #8]	; (8002924 <HAL_GetTick+0x10>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	2000024c 	.word	0x2000024c

08002928 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0ce      	b.n	8002ae8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff fdac 	bl	80024c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fc93 	bl	8003298 <ADC_ConversionStop_Disable>
 8002972:	4603      	mov	r3, r0
 8002974:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 80a9 	bne.w	8002ad6 <HAL_ADC_Init+0x1ae>
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 80a5 	bne.w	8002ad6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002994:	f023 0302 	bic.w	r3, r3, #2
 8002998:	f043 0202 	orr.w	r2, r3, #2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4951      	ldr	r1, [pc, #324]	; (8002af0 <HAL_ADC_Init+0x1c8>)
 80029aa:	428b      	cmp	r3, r1
 80029ac:	d10a      	bne.n	80029c4 <HAL_ADC_Init+0x9c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029b6:	d002      	beq.n	80029be <HAL_ADC_Init+0x96>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	e004      	b.n	80029c8 <HAL_ADC_Init+0xa0>
 80029be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029c2:	e001      	b.n	80029c8 <HAL_ADC_Init+0xa0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7b1b      	ldrb	r3, [r3, #12]
 80029ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e0:	d003      	beq.n	80029ea <HAL_ADC_Init+0xc2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d102      	bne.n	80029f0 <HAL_ADC_Init+0xc8>
 80029ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ee:	e000      	b.n	80029f2 <HAL_ADC_Init+0xca>
 80029f0:	2300      	movs	r3, #0
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7d1b      	ldrb	r3, [r3, #20]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d119      	bne.n	8002a34 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7b1b      	ldrb	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	035a      	lsls	r2, r3, #13
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	e00b      	b.n	8002a34 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <HAL_ADC_Init+0x1cc>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a64:	d003      	beq.n	8002a6e <HAL_ADC_Init+0x146>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d104      	bne.n	8002a78 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	051b      	lsls	r3, r3, #20
 8002a76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_ADC_Init+0x1d0>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ab2:	e018      	b.n	8002ae6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	f023 0312 	bic.w	r3, r3, #18
 8002abc:	f043 0210 	orr.w	r2, r3, #16
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ad4:	e007      	b.n	8002ae6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	f043 0210 	orr.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40013c00 	.word	0x40013c00
 8002af4:	ffe1f7fd 	.word	0xffe1f7fd
 8002af8:	ff1f0efe 	.word	0xff1f0efe

08002afc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_Start_IT+0x1a>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e0a0      	b.n	8002c58 <HAL_ADC_Start_IT+0x15c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fb60 	bl	80031e4 <ADC_Enable>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 808f 	bne.w	8002c4e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a45      	ldr	r2, [pc, #276]	; (8002c60 <HAL_ADC_Start_IT+0x164>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d105      	bne.n	8002b5a <HAL_ADC_Start_IT+0x5e>
 8002b4e:	4b45      	ldr	r3, [pc, #276]	; (8002c64 <HAL_ADC_Start_IT+0x168>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d115      	bne.n	8002b86 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d026      	beq.n	8002bc2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b84:	e01d      	b.n	8002bc2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a33      	ldr	r2, [pc, #204]	; (8002c64 <HAL_ADC_Start_IT+0x168>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_ADC_Start_IT+0xaa>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a2f      	ldr	r2, [pc, #188]	; (8002c60 <HAL_ADC_Start_IT+0x164>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10d      	bne.n	8002bc2 <HAL_ADC_Start_IT+0xc6>
 8002ba6:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_ADC_Start_IT+0x168>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	f023 0206 	bic.w	r2, r3, #6
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bda:	e002      	b.n	8002be2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0202 	mvn.w	r2, #2
 8002bf2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0220 	orr.w	r2, r2, #32
 8002c02:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c12:	d113      	bne.n	8002c3c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c18:	4a11      	ldr	r2, [pc, #68]	; (8002c60 <HAL_ADC_Start_IT+0x164>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d105      	bne.n	8002c2a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_ADC_Start_IT+0x168>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d108      	bne.n	8002c3c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	e00c      	b.n	8002c56 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	e003      	b.n	8002c56 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40012800 	.word	0x40012800
 8002c64:	40012400 	.word	0x40012400

08002c68 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a64      	ldr	r2, [pc, #400]	; (8002e10 <HAL_ADC_Start_DMA+0x1a8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d004      	beq.n	8002c8c <HAL_ADC_Start_DMA+0x24>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a63      	ldr	r2, [pc, #396]	; (8002e14 <HAL_ADC_Start_DMA+0x1ac>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d106      	bne.n	8002c9a <HAL_ADC_Start_DMA+0x32>
 8002c8c:	4b60      	ldr	r3, [pc, #384]	; (8002e10 <HAL_ADC_Start_DMA+0x1a8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f040 80b3 	bne.w	8002e00 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_Start_DMA+0x40>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e0ae      	b.n	8002e06 <HAL_ADC_Start_DMA+0x19e>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fa97 	bl	80031e4 <ADC_Enable>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 809a 	bne.w	8002df6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a4e      	ldr	r2, [pc, #312]	; (8002e14 <HAL_ADC_Start_DMA+0x1ac>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d105      	bne.n	8002cec <HAL_ADC_Start_DMA+0x84>
 8002ce0:	4b4b      	ldr	r3, [pc, #300]	; (8002e10 <HAL_ADC_Start_DMA+0x1a8>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d115      	bne.n	8002d18 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d026      	beq.n	8002d54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d16:	e01d      	b.n	8002d54 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a39      	ldr	r2, [pc, #228]	; (8002e10 <HAL_ADC_Start_DMA+0x1a8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d004      	beq.n	8002d38 <HAL_ADC_Start_DMA+0xd0>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a38      	ldr	r2, [pc, #224]	; (8002e14 <HAL_ADC_Start_DMA+0x1ac>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d10d      	bne.n	8002d54 <HAL_ADC_Start_DMA+0xec>
 8002d38:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_ADC_Start_DMA+0x1a8>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d006      	beq.n	8002d6e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	f023 0206 	bic.w	r2, r3, #6
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d6c:	e002      	b.n	8002d74 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a25      	ldr	r2, [pc, #148]	; (8002e18 <HAL_ADC_Start_DMA+0x1b0>)
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4a24      	ldr	r2, [pc, #144]	; (8002e1c <HAL_ADC_Start_DMA+0x1b4>)
 8002d8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4a23      	ldr	r2, [pc, #140]	; (8002e20 <HAL_ADC_Start_DMA+0x1b8>)
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0202 	mvn.w	r2, #2
 8002d9c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a18      	ldr	r0, [r3, #32]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	334c      	adds	r3, #76	; 0x4c
 8002db8:	4619      	mov	r1, r3
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f000 fd4d 	bl	800385c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002dcc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002dd0:	d108      	bne.n	8002de4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002de0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002de2:	e00f      	b.n	8002e04 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002df2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002df4:	e006      	b.n	8002e04 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002dfe:	e001      	b.n	8002e04 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40012400 	.word	0x40012400
 8002e14:	40012800 	.word	0x40012800
 8002e18:	0800331b 	.word	0x0800331b
 8002e1c:	08003397 	.word	0x08003397
 8002e20:	080033b3 	.word	0x080033b3

08002e24 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d140      	bne.n	8002ebc <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d139      	bne.n	8002ebc <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e6e:	d11d      	bne.n	8002eac <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d119      	bne.n	8002eac <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0220 	bic.w	r2, r2, #32
 8002e86:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f87c 	bl	8002faa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f06f 0212 	mvn.w	r2, #18
 8002eba:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b80      	cmp	r3, #128	; 0x80
 8002ec8:	d14f      	bne.n	8002f6a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d148      	bne.n	8002f6a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002efa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002efe:	d012      	beq.n	8002f26 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d125      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002f18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f1c:	d11d      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d119      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f34:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d105      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 faf0 	bl	8003540 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 020c 	mvn.w	r2, #12
 8002f68:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d114      	bne.n	8002fa2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10d      	bne.n	8002fa2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f81b 	bl	8002fce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0201 	mvn.w	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x20>
 8003010:	2302      	movs	r3, #2
 8003012:	e0dc      	b.n	80031ce <HAL_ADC_ConfigChannel+0x1da>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b06      	cmp	r3, #6
 8003022:	d81c      	bhi.n	800305e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	3b05      	subs	r3, #5
 8003036:	221f      	movs	r2, #31
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	4019      	ands	r1, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	3b05      	subs	r3, #5
 8003050:	fa00 f203 	lsl.w	r2, r0, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	635a      	str	r2, [r3, #52]	; 0x34
 800305c:	e03c      	b.n	80030d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d81c      	bhi.n	80030a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	3b23      	subs	r3, #35	; 0x23
 8003078:	221f      	movs	r2, #31
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	4019      	ands	r1, r3
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	3b23      	subs	r3, #35	; 0x23
 8003092:	fa00 f203 	lsl.w	r2, r0, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
 800309e:	e01b      	b.n	80030d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	3b41      	subs	r3, #65	; 0x41
 80030b2:	221f      	movs	r2, #31
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	4019      	ands	r1, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	3b41      	subs	r3, #65	; 0x41
 80030cc:	fa00 f203 	lsl.w	r2, r0, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b09      	cmp	r3, #9
 80030de:	d91c      	bls.n	800311a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68d9      	ldr	r1, [r3, #12]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	3b1e      	subs	r3, #30
 80030f2:	2207      	movs	r2, #7
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	4019      	ands	r1, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6898      	ldr	r0, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	3b1e      	subs	r3, #30
 800310c:	fa00 f203 	lsl.w	r2, r0, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	60da      	str	r2, [r3, #12]
 8003118:	e019      	b.n	800314e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6919      	ldr	r1, [r3, #16]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	2207      	movs	r2, #7
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	4019      	ands	r1, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6898      	ldr	r0, [r3, #8]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	fa00 f203 	lsl.w	r2, r0, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b10      	cmp	r3, #16
 8003154:	d003      	beq.n	800315e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800315a:	2b11      	cmp	r3, #17
 800315c:	d132      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d125      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d126      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003184:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b10      	cmp	r3, #16
 800318c:	d11a      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <HAL_ADC_ConfigChannel+0x1e8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	0c9a      	lsrs	r2, r3, #18
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031a4:	e002      	b.n	80031ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f9      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x1b2>
 80031b2:	e007      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	40012400 	.word	0x40012400
 80031dc:	20000040 	.word	0x20000040
 80031e0:	431bde83 	.word	0x431bde83

080031e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d040      	beq.n	8003284 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003212:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <ADC_Enable+0xac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <ADC_Enable+0xb0>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	0c9b      	lsrs	r3, r3, #18
 800321e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003220:	e002      	b.n	8003228 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	3b01      	subs	r3, #1
 8003226:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f9      	bne.n	8003222 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800322e:	f7ff fb71 	bl	8002914 <HAL_GetTick>
 8003232:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003234:	e01f      	b.n	8003276 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003236:	f7ff fb6d 	bl	8002914 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d918      	bls.n	8003276 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d011      	beq.n	8003276 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e007      	b.n	8003286 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d1d8      	bne.n	8003236 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000040 	.word	0x20000040
 8003294:	431bde83 	.word	0x431bde83

08003298 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d12e      	bne.n	8003310 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032c2:	f7ff fb27 	bl	8002914 <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032c8:	e01b      	b.n	8003302 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032ca:	f7ff fb23 	bl	8002914 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d914      	bls.n	8003302 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d10d      	bne.n	8003302 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	f043 0210 	orr.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	f043 0201 	orr.w	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e007      	b.n	8003312 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d0dc      	beq.n	80032ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003330:	2b00      	cmp	r3, #0
 8003332:	d127      	bne.n	8003384 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800334a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800334e:	d115      	bne.n	800337c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003354:	2b00      	cmp	r3, #0
 8003356:	d111      	bne.n	800337c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff fe14 	bl	8002faa <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003382:	e004      	b.n	800338e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff fe09 	bl	8002fbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033aa:	bf00      	nop
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff fe01 	bl	8002fe0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_ADCEx_Calibration_Start+0x1e>
 8003402:	2302      	movs	r3, #2
 8003404:	e095      	b.n	8003532 <HAL_ADCEx_Calibration_Start+0x14a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ff42 	bl	8003298 <ADC_ConversionStop_Disable>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 8084 	bne.w	8003528 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003428:	f023 0302 	bic.w	r3, r3, #2
 800342c:	f043 0202 	orr.w	r2, r3, #2
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003434:	4b41      	ldr	r3, [pc, #260]	; (800353c <HAL_ADCEx_Calibration_Start+0x154>)
 8003436:	681c      	ldr	r4, [r3, #0]
 8003438:	2002      	movs	r0, #2
 800343a:	f001 fe5f 	bl	80050fc <HAL_RCCEx_GetPeriphCLKFreq>
 800343e:	4603      	mov	r3, r0
 8003440:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003444:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003446:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003448:	e002      	b.n	8003450 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3b01      	subs	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f9      	bne.n	800344a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fec4 	bl	80031e4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0208 	orr.w	r2, r2, #8
 800346a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800346c:	f7ff fa52 	bl	8002914 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003472:	e01b      	b.n	80034ac <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003474:	f7ff fa4e 	bl	8002914 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b0a      	cmp	r3, #10
 8003480:	d914      	bls.n	80034ac <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00d      	beq.n	80034ac <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	f023 0312 	bic.w	r3, r3, #18
 8003498:	f043 0210 	orr.w	r2, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e042      	b.n	8003532 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1dc      	bne.n	8003474 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0204 	orr.w	r2, r2, #4
 80034c8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034ca:	f7ff fa23 	bl	8002914 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034d0:	e01b      	b.n	800350a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034d2:	f7ff fa1f 	bl	8002914 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b0a      	cmp	r3, #10
 80034de:	d914      	bls.n	800350a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00d      	beq.n	800350a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	f023 0312 	bic.w	r3, r3, #18
 80034f6:	f043 0210 	orr.w	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e013      	b.n	8003532 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1dc      	bne.n	80034d2 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	f023 0303 	bic.w	r3, r3, #3
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
}
 8003532:	4618      	mov	r0, r3
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}
 800353a:	bf00      	nop
 800353c:	20000040 	.word	0x20000040

08003540 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
	...

08003554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003570:	4013      	ands	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800357c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003586:	4a04      	ldr	r2, [pc, #16]	; (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	60d3      	str	r3, [r2, #12]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <__NVIC_GetPriorityGrouping+0x18>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	f003 0307 	and.w	r3, r3, #7
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	db0b      	blt.n	80035e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	f003 021f 	and.w	r2, r3, #31
 80035d0:	4906      	ldr	r1, [pc, #24]	; (80035ec <__NVIC_EnableIRQ+0x34>)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	2001      	movs	r0, #1
 80035da:	fa00 f202 	lsl.w	r2, r0, r2
 80035de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	e000e100 	.word	0xe000e100

080035f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	2b00      	cmp	r3, #0
 8003602:	db0a      	blt.n	800361a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	490c      	ldr	r1, [pc, #48]	; (800363c <__NVIC_SetPriority+0x4c>)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	440b      	add	r3, r1
 8003614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003618:	e00a      	b.n	8003630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4908      	ldr	r1, [pc, #32]	; (8003640 <__NVIC_SetPriority+0x50>)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3b04      	subs	r3, #4
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	440b      	add	r3, r1
 800362e:	761a      	strb	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f1c3 0307 	rsb	r3, r3, #7
 800365e:	2b04      	cmp	r3, #4
 8003660:	bf28      	it	cs
 8003662:	2304      	movcs	r3, #4
 8003664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3304      	adds	r3, #4
 800366a:	2b06      	cmp	r3, #6
 800366c:	d902      	bls.n	8003674 <NVIC_EncodePriority+0x30>
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3b03      	subs	r3, #3
 8003672:	e000      	b.n	8003676 <NVIC_EncodePriority+0x32>
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	f04f 32ff 	mov.w	r2, #4294967295
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	401a      	ands	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368c:	f04f 31ff 	mov.w	r1, #4294967295
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43d9      	mvns	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	4313      	orrs	r3, r2
         );
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b8:	d301      	bcc.n	80036be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00f      	b.n	80036de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <SysTick_Config+0x40>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c6:	210f      	movs	r1, #15
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f7ff ff90 	bl	80035f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <SysTick_Config+0x40>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d6:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <SysTick_Config+0x40>)
 80036d8:	2207      	movs	r2, #7
 80036da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	e000e010 	.word	0xe000e010

080036ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff2d 	bl	8003554 <__NVIC_SetPriorityGrouping>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003714:	f7ff ff42 	bl	800359c <__NVIC_GetPriorityGrouping>
 8003718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7ff ff90 	bl	8003644 <NVIC_EncodePriority>
 8003724:	4602      	mov	r2, r0
 8003726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff5f 	bl	80035f0 <__NVIC_SetPriority>
}
 8003732:	bf00      	nop
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	4603      	mov	r3, r0
 8003742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ff35 	bl	80035b8 <__NVIC_EnableIRQ>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ffa2 	bl	80036a8 <SysTick_Config>
 8003764:	4603      	mov	r3, r0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e059      	b.n	800383a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_DMA_Init+0xd4>)
 800378e:	429a      	cmp	r2, r3
 8003790:	d80f      	bhi.n	80037b2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_DMA_Init+0xd8>)
 800379a:	4413      	add	r3, r2
 800379c:	4a2b      	ldr	r2, [pc, #172]	; (800384c <HAL_DMA_Init+0xdc>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	009a      	lsls	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a28      	ldr	r2, [pc, #160]	; (8003850 <HAL_DMA_Init+0xe0>)
 80037ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80037b0:	e00e      	b.n	80037d0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b26      	ldr	r3, [pc, #152]	; (8003854 <HAL_DMA_Init+0xe4>)
 80037ba:	4413      	add	r3, r2
 80037bc:	4a23      	ldr	r2, [pc, #140]	; (800384c <HAL_DMA_Init+0xdc>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	009a      	lsls	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a22      	ldr	r2, [pc, #136]	; (8003858 <HAL_DMA_Init+0xe8>)
 80037ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80037f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	40020407 	.word	0x40020407
 8003848:	bffdfff8 	.word	0xbffdfff8
 800384c:	cccccccd 	.word	0xcccccccd
 8003850:	40020000 	.word	0x40020000
 8003854:	bffdfbf8 	.word	0xbffdfbf8
 8003858:	40020400 	.word	0x40020400

0800385c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_DMA_Start_IT+0x20>
 8003878:	2302      	movs	r3, #2
 800387a:	e04a      	b.n	8003912 <HAL_DMA_Start_IT+0xb6>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800388a:	2b01      	cmp	r3, #1
 800388c:	d13a      	bne.n	8003904 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fbb0 	bl	8004018 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 020e 	orr.w	r2, r2, #14
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e00f      	b.n	80038f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0204 	bic.w	r2, r2, #4
 80038e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 020a 	orr.w	r2, r2, #10
 80038f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e005      	b.n	8003910 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800390c:	2302      	movs	r3, #2
 800390e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003910:	7dfb      	ldrb	r3, [r7, #23]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800392c:	2b02      	cmp	r3, #2
 800392e:	d008      	beq.n	8003942 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2204      	movs	r2, #4
 8003934:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e020      	b.n	8003984 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 020e 	bic.w	r2, r2, #14
 8003950:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f202 	lsl.w	r2, r1, r2
 8003970:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003982:	7bfb      	ldrb	r3, [r7, #15]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr
	...

08003990 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d005      	beq.n	80039b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2204      	movs	r2, #4
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e0d6      	b.n	8003b60 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 020e 	bic.w	r2, r2, #14
 80039c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	4b64      	ldr	r3, [pc, #400]	; (8003b6c <HAL_DMA_Abort_IT+0x1dc>)
 80039da:	429a      	cmp	r2, r3
 80039dc:	d958      	bls.n	8003a90 <HAL_DMA_Abort_IT+0x100>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a63      	ldr	r2, [pc, #396]	; (8003b70 <HAL_DMA_Abort_IT+0x1e0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d04f      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xf8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a61      	ldr	r2, [pc, #388]	; (8003b74 <HAL_DMA_Abort_IT+0x1e4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d048      	beq.n	8003a84 <HAL_DMA_Abort_IT+0xf4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a60      	ldr	r2, [pc, #384]	; (8003b78 <HAL_DMA_Abort_IT+0x1e8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d040      	beq.n	8003a7e <HAL_DMA_Abort_IT+0xee>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5e      	ldr	r2, [pc, #376]	; (8003b7c <HAL_DMA_Abort_IT+0x1ec>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d038      	beq.n	8003a78 <HAL_DMA_Abort_IT+0xe8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5d      	ldr	r2, [pc, #372]	; (8003b80 <HAL_DMA_Abort_IT+0x1f0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d030      	beq.n	8003a72 <HAL_DMA_Abort_IT+0xe2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5b      	ldr	r2, [pc, #364]	; (8003b84 <HAL_DMA_Abort_IT+0x1f4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d028      	beq.n	8003a6c <HAL_DMA_Abort_IT+0xdc>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a53      	ldr	r2, [pc, #332]	; (8003b6c <HAL_DMA_Abort_IT+0x1dc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d020      	beq.n	8003a66 <HAL_DMA_Abort_IT+0xd6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a57      	ldr	r2, [pc, #348]	; (8003b88 <HAL_DMA_Abort_IT+0x1f8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d019      	beq.n	8003a62 <HAL_DMA_Abort_IT+0xd2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a56      	ldr	r2, [pc, #344]	; (8003b8c <HAL_DMA_Abort_IT+0x1fc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d012      	beq.n	8003a5e <HAL_DMA_Abort_IT+0xce>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a54      	ldr	r2, [pc, #336]	; (8003b90 <HAL_DMA_Abort_IT+0x200>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00a      	beq.n	8003a58 <HAL_DMA_Abort_IT+0xc8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a53      	ldr	r2, [pc, #332]	; (8003b94 <HAL_DMA_Abort_IT+0x204>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d102      	bne.n	8003a52 <HAL_DMA_Abort_IT+0xc2>
 8003a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a50:	e01b      	b.n	8003a8a <HAL_DMA_Abort_IT+0xfa>
 8003a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a56:	e018      	b.n	8003a8a <HAL_DMA_Abort_IT+0xfa>
 8003a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a5c:	e015      	b.n	8003a8a <HAL_DMA_Abort_IT+0xfa>
 8003a5e:	2310      	movs	r3, #16
 8003a60:	e013      	b.n	8003a8a <HAL_DMA_Abort_IT+0xfa>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e011      	b.n	8003a8a <HAL_DMA_Abort_IT+0xfa>
 8003a66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a6a:	e00e      	b.n	8003a8a <HAL_DMA_Abort_IT+0xfa>
 8003a6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a70:	e00b      	b.n	8003a8a <HAL_DMA_Abort_IT+0xfa>
 8003a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a76:	e008      	b.n	8003a8a <HAL_DMA_Abort_IT+0xfa>
 8003a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a7c:	e005      	b.n	8003a8a <HAL_DMA_Abort_IT+0xfa>
 8003a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a82:	e002      	b.n	8003a8a <HAL_DMA_Abort_IT+0xfa>
 8003a84:	2310      	movs	r3, #16
 8003a86:	e000      	b.n	8003a8a <HAL_DMA_Abort_IT+0xfa>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	4a43      	ldr	r2, [pc, #268]	; (8003b98 <HAL_DMA_Abort_IT+0x208>)
 8003a8c:	6053      	str	r3, [r2, #4]
 8003a8e:	e057      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1b0>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a36      	ldr	r2, [pc, #216]	; (8003b70 <HAL_DMA_Abort_IT+0x1e0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d04f      	beq.n	8003b3a <HAL_DMA_Abort_IT+0x1aa>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a35      	ldr	r2, [pc, #212]	; (8003b74 <HAL_DMA_Abort_IT+0x1e4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d048      	beq.n	8003b36 <HAL_DMA_Abort_IT+0x1a6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a33      	ldr	r2, [pc, #204]	; (8003b78 <HAL_DMA_Abort_IT+0x1e8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d040      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x1a0>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a32      	ldr	r2, [pc, #200]	; (8003b7c <HAL_DMA_Abort_IT+0x1ec>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d038      	beq.n	8003b2a <HAL_DMA_Abort_IT+0x19a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a30      	ldr	r2, [pc, #192]	; (8003b80 <HAL_DMA_Abort_IT+0x1f0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d030      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x194>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a2f      	ldr	r2, [pc, #188]	; (8003b84 <HAL_DMA_Abort_IT+0x1f4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d028      	beq.n	8003b1e <HAL_DMA_Abort_IT+0x18e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <HAL_DMA_Abort_IT+0x1dc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d020      	beq.n	8003b18 <HAL_DMA_Abort_IT+0x188>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a2b      	ldr	r2, [pc, #172]	; (8003b88 <HAL_DMA_Abort_IT+0x1f8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d019      	beq.n	8003b14 <HAL_DMA_Abort_IT+0x184>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <HAL_DMA_Abort_IT+0x1fc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d012      	beq.n	8003b10 <HAL_DMA_Abort_IT+0x180>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a28      	ldr	r2, [pc, #160]	; (8003b90 <HAL_DMA_Abort_IT+0x200>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00a      	beq.n	8003b0a <HAL_DMA_Abort_IT+0x17a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a26      	ldr	r2, [pc, #152]	; (8003b94 <HAL_DMA_Abort_IT+0x204>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d102      	bne.n	8003b04 <HAL_DMA_Abort_IT+0x174>
 8003afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b02:	e01b      	b.n	8003b3c <HAL_DMA_Abort_IT+0x1ac>
 8003b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b08:	e018      	b.n	8003b3c <HAL_DMA_Abort_IT+0x1ac>
 8003b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b0e:	e015      	b.n	8003b3c <HAL_DMA_Abort_IT+0x1ac>
 8003b10:	2310      	movs	r3, #16
 8003b12:	e013      	b.n	8003b3c <HAL_DMA_Abort_IT+0x1ac>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e011      	b.n	8003b3c <HAL_DMA_Abort_IT+0x1ac>
 8003b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b1c:	e00e      	b.n	8003b3c <HAL_DMA_Abort_IT+0x1ac>
 8003b1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b22:	e00b      	b.n	8003b3c <HAL_DMA_Abort_IT+0x1ac>
 8003b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b28:	e008      	b.n	8003b3c <HAL_DMA_Abort_IT+0x1ac>
 8003b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b2e:	e005      	b.n	8003b3c <HAL_DMA_Abort_IT+0x1ac>
 8003b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b34:	e002      	b.n	8003b3c <HAL_DMA_Abort_IT+0x1ac>
 8003b36:	2310      	movs	r3, #16
 8003b38:	e000      	b.n	8003b3c <HAL_DMA_Abort_IT+0x1ac>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <HAL_DMA_Abort_IT+0x20c>)
 8003b3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
    } 
  }
  return status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40020080 	.word	0x40020080
 8003b70:	40020008 	.word	0x40020008
 8003b74:	4002001c 	.word	0x4002001c
 8003b78:	40020030 	.word	0x40020030
 8003b7c:	40020044 	.word	0x40020044
 8003b80:	40020058 	.word	0x40020058
 8003b84:	4002006c 	.word	0x4002006c
 8003b88:	40020408 	.word	0x40020408
 8003b8c:	4002041c 	.word	0x4002041c
 8003b90:	40020430 	.word	0x40020430
 8003b94:	40020444 	.word	0x40020444
 8003b98:	40020400 	.word	0x40020400
 8003b9c:	40020000 	.word	0x40020000

08003ba0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80d6 	beq.w	8003d76 <HAL_DMA_IRQHandler+0x1d6>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80d0 	beq.w	8003d76 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d107      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0204 	bic.w	r2, r2, #4
 8003bf2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b9b      	ldr	r3, [pc, #620]	; (8003e68 <HAL_DMA_IRQHandler+0x2c8>)
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d958      	bls.n	8003cb2 <HAL_DMA_IRQHandler+0x112>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a99      	ldr	r2, [pc, #612]	; (8003e6c <HAL_DMA_IRQHandler+0x2cc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d04f      	beq.n	8003caa <HAL_DMA_IRQHandler+0x10a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a98      	ldr	r2, [pc, #608]	; (8003e70 <HAL_DMA_IRQHandler+0x2d0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d048      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x106>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a96      	ldr	r2, [pc, #600]	; (8003e74 <HAL_DMA_IRQHandler+0x2d4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d040      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x100>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a95      	ldr	r2, [pc, #596]	; (8003e78 <HAL_DMA_IRQHandler+0x2d8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d038      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xfa>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a93      	ldr	r2, [pc, #588]	; (8003e7c <HAL_DMA_IRQHandler+0x2dc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d030      	beq.n	8003c94 <HAL_DMA_IRQHandler+0xf4>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a92      	ldr	r2, [pc, #584]	; (8003e80 <HAL_DMA_IRQHandler+0x2e0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d028      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xee>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a89      	ldr	r2, [pc, #548]	; (8003e68 <HAL_DMA_IRQHandler+0x2c8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d020      	beq.n	8003c88 <HAL_DMA_IRQHandler+0xe8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a8e      	ldr	r2, [pc, #568]	; (8003e84 <HAL_DMA_IRQHandler+0x2e4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d019      	beq.n	8003c84 <HAL_DMA_IRQHandler+0xe4>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a8c      	ldr	r2, [pc, #560]	; (8003e88 <HAL_DMA_IRQHandler+0x2e8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d012      	beq.n	8003c80 <HAL_DMA_IRQHandler+0xe0>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a8b      	ldr	r2, [pc, #556]	; (8003e8c <HAL_DMA_IRQHandler+0x2ec>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00a      	beq.n	8003c7a <HAL_DMA_IRQHandler+0xda>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a89      	ldr	r2, [pc, #548]	; (8003e90 <HAL_DMA_IRQHandler+0x2f0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d102      	bne.n	8003c74 <HAL_DMA_IRQHandler+0xd4>
 8003c6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c72:	e01b      	b.n	8003cac <HAL_DMA_IRQHandler+0x10c>
 8003c74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c78:	e018      	b.n	8003cac <HAL_DMA_IRQHandler+0x10c>
 8003c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c7e:	e015      	b.n	8003cac <HAL_DMA_IRQHandler+0x10c>
 8003c80:	2340      	movs	r3, #64	; 0x40
 8003c82:	e013      	b.n	8003cac <HAL_DMA_IRQHandler+0x10c>
 8003c84:	2304      	movs	r3, #4
 8003c86:	e011      	b.n	8003cac <HAL_DMA_IRQHandler+0x10c>
 8003c88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c8c:	e00e      	b.n	8003cac <HAL_DMA_IRQHandler+0x10c>
 8003c8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c92:	e00b      	b.n	8003cac <HAL_DMA_IRQHandler+0x10c>
 8003c94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c98:	e008      	b.n	8003cac <HAL_DMA_IRQHandler+0x10c>
 8003c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c9e:	e005      	b.n	8003cac <HAL_DMA_IRQHandler+0x10c>
 8003ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ca4:	e002      	b.n	8003cac <HAL_DMA_IRQHandler+0x10c>
 8003ca6:	2340      	movs	r3, #64	; 0x40
 8003ca8:	e000      	b.n	8003cac <HAL_DMA_IRQHandler+0x10c>
 8003caa:	2304      	movs	r3, #4
 8003cac:	4a79      	ldr	r2, [pc, #484]	; (8003e94 <HAL_DMA_IRQHandler+0x2f4>)
 8003cae:	6053      	str	r3, [r2, #4]
 8003cb0:	e057      	b.n	8003d62 <HAL_DMA_IRQHandler+0x1c2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6d      	ldr	r2, [pc, #436]	; (8003e6c <HAL_DMA_IRQHandler+0x2cc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d04f      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x1bc>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a6b      	ldr	r2, [pc, #428]	; (8003e70 <HAL_DMA_IRQHandler+0x2d0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d048      	beq.n	8003d58 <HAL_DMA_IRQHandler+0x1b8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6a      	ldr	r2, [pc, #424]	; (8003e74 <HAL_DMA_IRQHandler+0x2d4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d040      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x1b2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a68      	ldr	r2, [pc, #416]	; (8003e78 <HAL_DMA_IRQHandler+0x2d8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d038      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x1ac>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a67      	ldr	r2, [pc, #412]	; (8003e7c <HAL_DMA_IRQHandler+0x2dc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d030      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x1a6>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <HAL_DMA_IRQHandler+0x2e0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d028      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x1a0>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a5d      	ldr	r2, [pc, #372]	; (8003e68 <HAL_DMA_IRQHandler+0x2c8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d020      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x19a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a61      	ldr	r2, [pc, #388]	; (8003e84 <HAL_DMA_IRQHandler+0x2e4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d019      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x196>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a60      	ldr	r2, [pc, #384]	; (8003e88 <HAL_DMA_IRQHandler+0x2e8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d012      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x192>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a5e      	ldr	r2, [pc, #376]	; (8003e8c <HAL_DMA_IRQHandler+0x2ec>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00a      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x18c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a5d      	ldr	r2, [pc, #372]	; (8003e90 <HAL_DMA_IRQHandler+0x2f0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d102      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x186>
 8003d20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d24:	e01b      	b.n	8003d5e <HAL_DMA_IRQHandler+0x1be>
 8003d26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d2a:	e018      	b.n	8003d5e <HAL_DMA_IRQHandler+0x1be>
 8003d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d30:	e015      	b.n	8003d5e <HAL_DMA_IRQHandler+0x1be>
 8003d32:	2340      	movs	r3, #64	; 0x40
 8003d34:	e013      	b.n	8003d5e <HAL_DMA_IRQHandler+0x1be>
 8003d36:	2304      	movs	r3, #4
 8003d38:	e011      	b.n	8003d5e <HAL_DMA_IRQHandler+0x1be>
 8003d3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d3e:	e00e      	b.n	8003d5e <HAL_DMA_IRQHandler+0x1be>
 8003d40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d44:	e00b      	b.n	8003d5e <HAL_DMA_IRQHandler+0x1be>
 8003d46:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d4a:	e008      	b.n	8003d5e <HAL_DMA_IRQHandler+0x1be>
 8003d4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d50:	e005      	b.n	8003d5e <HAL_DMA_IRQHandler+0x1be>
 8003d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d56:	e002      	b.n	8003d5e <HAL_DMA_IRQHandler+0x1be>
 8003d58:	2340      	movs	r3, #64	; 0x40
 8003d5a:	e000      	b.n	8003d5e <HAL_DMA_IRQHandler+0x1be>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	4a4e      	ldr	r2, [pc, #312]	; (8003e98 <HAL_DMA_IRQHandler+0x2f8>)
 8003d60:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8136 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d74:	e130      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80f8 	beq.w	8003f78 <HAL_DMA_IRQHandler+0x3d8>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80f2 	beq.w	8003f78 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 020a 	bic.w	r2, r2, #10
 8003db0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4b29      	ldr	r3, [pc, #164]	; (8003e68 <HAL_DMA_IRQHandler+0x2c8>)
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d973      	bls.n	8003eae <HAL_DMA_IRQHandler+0x30e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a28      	ldr	r2, [pc, #160]	; (8003e6c <HAL_DMA_IRQHandler+0x2cc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d06a      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x306>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a26      	ldr	r2, [pc, #152]	; (8003e70 <HAL_DMA_IRQHandler+0x2d0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d063      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x302>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <HAL_DMA_IRQHandler+0x2d4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d05b      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x2fc>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a23      	ldr	r2, [pc, #140]	; (8003e78 <HAL_DMA_IRQHandler+0x2d8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d038      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x2c0>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a22      	ldr	r2, [pc, #136]	; (8003e7c <HAL_DMA_IRQHandler+0x2dc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d030      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x2ba>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <HAL_DMA_IRQHandler+0x2e0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d028      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x2b4>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <HAL_DMA_IRQHandler+0x2c8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d020      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ae>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1c      	ldr	r2, [pc, #112]	; (8003e84 <HAL_DMA_IRQHandler+0x2e4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d019      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2aa>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <HAL_DMA_IRQHandler+0x2e8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d012      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x2a6>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a19      	ldr	r2, [pc, #100]	; (8003e8c <HAL_DMA_IRQHandler+0x2ec>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00a      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x2a0>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_DMA_IRQHandler+0x2f0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d102      	bne.n	8003e3a <HAL_DMA_IRQHandler+0x29a>
 8003e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e38:	e036      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x308>
 8003e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e3e:	e033      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x308>
 8003e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e44:	e030      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x308>
 8003e46:	2320      	movs	r3, #32
 8003e48:	e02e      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x308>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e02c      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x308>
 8003e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e52:	e029      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x308>
 8003e54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e58:	e026      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x308>
 8003e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e5e:	e023      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x308>
 8003e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e64:	e020      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x308>
 8003e66:	bf00      	nop
 8003e68:	40020080 	.word	0x40020080
 8003e6c:	40020008 	.word	0x40020008
 8003e70:	4002001c 	.word	0x4002001c
 8003e74:	40020030 	.word	0x40020030
 8003e78:	40020044 	.word	0x40020044
 8003e7c:	40020058 	.word	0x40020058
 8003e80:	4002006c 	.word	0x4002006c
 8003e84:	40020408 	.word	0x40020408
 8003e88:	4002041c 	.word	0x4002041c
 8003e8c:	40020430 	.word	0x40020430
 8003e90:	40020444 	.word	0x40020444
 8003e94:	40020400 	.word	0x40020400
 8003e98:	40020000 	.word	0x40020000
 8003e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ea0:	e002      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x308>
 8003ea2:	2320      	movs	r3, #32
 8003ea4:	e000      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x308>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	4a4e      	ldr	r2, [pc, #312]	; (8003fe4 <HAL_DMA_IRQHandler+0x444>)
 8003eaa:	6053      	str	r3, [r2, #4]
 8003eac:	e057      	b.n	8003f5e <HAL_DMA_IRQHandler+0x3be>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a4d      	ldr	r2, [pc, #308]	; (8003fe8 <HAL_DMA_IRQHandler+0x448>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d04f      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x3b8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a4b      	ldr	r2, [pc, #300]	; (8003fec <HAL_DMA_IRQHandler+0x44c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d048      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x3b4>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a4a      	ldr	r2, [pc, #296]	; (8003ff0 <HAL_DMA_IRQHandler+0x450>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d040      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x3ae>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a48      	ldr	r2, [pc, #288]	; (8003ff4 <HAL_DMA_IRQHandler+0x454>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d038      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x3a8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a47      	ldr	r2, [pc, #284]	; (8003ff8 <HAL_DMA_IRQHandler+0x458>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d030      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3a2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a45      	ldr	r2, [pc, #276]	; (8003ffc <HAL_DMA_IRQHandler+0x45c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d028      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x39c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a44      	ldr	r2, [pc, #272]	; (8004000 <HAL_DMA_IRQHandler+0x460>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d020      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x396>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a42      	ldr	r2, [pc, #264]	; (8004004 <HAL_DMA_IRQHandler+0x464>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d019      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x392>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a41      	ldr	r2, [pc, #260]	; (8004008 <HAL_DMA_IRQHandler+0x468>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d012      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x38e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3f      	ldr	r2, [pc, #252]	; (800400c <HAL_DMA_IRQHandler+0x46c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00a      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x388>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a3e      	ldr	r2, [pc, #248]	; (8004010 <HAL_DMA_IRQHandler+0x470>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d102      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x382>
 8003f1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f20:	e01b      	b.n	8003f5a <HAL_DMA_IRQHandler+0x3ba>
 8003f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f26:	e018      	b.n	8003f5a <HAL_DMA_IRQHandler+0x3ba>
 8003f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f2c:	e015      	b.n	8003f5a <HAL_DMA_IRQHandler+0x3ba>
 8003f2e:	2320      	movs	r3, #32
 8003f30:	e013      	b.n	8003f5a <HAL_DMA_IRQHandler+0x3ba>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e011      	b.n	8003f5a <HAL_DMA_IRQHandler+0x3ba>
 8003f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f3a:	e00e      	b.n	8003f5a <HAL_DMA_IRQHandler+0x3ba>
 8003f3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f40:	e00b      	b.n	8003f5a <HAL_DMA_IRQHandler+0x3ba>
 8003f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f46:	e008      	b.n	8003f5a <HAL_DMA_IRQHandler+0x3ba>
 8003f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f4c:	e005      	b.n	8003f5a <HAL_DMA_IRQHandler+0x3ba>
 8003f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f52:	e002      	b.n	8003f5a <HAL_DMA_IRQHandler+0x3ba>
 8003f54:	2320      	movs	r3, #32
 8003f56:	e000      	b.n	8003f5a <HAL_DMA_IRQHandler+0x3ba>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	4a2e      	ldr	r2, [pc, #184]	; (8004014 <HAL_DMA_IRQHandler+0x474>)
 8003f5c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d034      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f76:	e02f      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d028      	beq.n	8003fda <HAL_DMA_IRQHandler+0x43a>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d023      	beq.n	8003fda <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 020e 	bic.w	r2, r2, #14
 8003fa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	2101      	movs	r1, #1
 8003fac:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
    }
  }
  return;
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
}
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40020400 	.word	0x40020400
 8003fe8:	40020008 	.word	0x40020008
 8003fec:	4002001c 	.word	0x4002001c
 8003ff0:	40020030 	.word	0x40020030
 8003ff4:	40020044 	.word	0x40020044
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	4002006c 	.word	0x4002006c
 8004000:	40020080 	.word	0x40020080
 8004004:	40020408 	.word	0x40020408
 8004008:	4002041c 	.word	0x4002041c
 800400c:	40020430 	.word	0x40020430
 8004010:	40020444 	.word	0x40020444
 8004014:	40020000 	.word	0x40020000

08004018 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402e:	2101      	movs	r1, #1
 8004030:	fa01 f202 	lsl.w	r2, r1, r2
 8004034:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b10      	cmp	r3, #16
 8004044:	d108      	bne.n	8004058 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004056:	e007      	b.n	8004068 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	60da      	str	r2, [r3, #12]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
	...

08004074 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800408e:	4b2f      	ldr	r3, [pc, #188]	; (800414c <HAL_FLASH_Program+0xd8>)
 8004090:	7e1b      	ldrb	r3, [r3, #24]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_FLASH_Program+0x26>
 8004096:	2302      	movs	r3, #2
 8004098:	e054      	b.n	8004144 <HAL_FLASH_Program+0xd0>
 800409a:	4b2c      	ldr	r3, [pc, #176]	; (800414c <HAL_FLASH_Program+0xd8>)
 800409c:	2201      	movs	r2, #1
 800409e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040a4:	f000 f898 	bl	80041d8 <FLASH_WaitForLastOperation>
 80040a8:	4603      	mov	r3, r0
 80040aa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d144      	bne.n	800413c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d102      	bne.n	80040be <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80040b8:	2301      	movs	r3, #1
 80040ba:	757b      	strb	r3, [r7, #21]
 80040bc:	e007      	b.n	80040ce <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d102      	bne.n	80040ca <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80040c4:	2302      	movs	r3, #2
 80040c6:	757b      	strb	r3, [r7, #21]
 80040c8:	e001      	b.n	80040ce <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80040ca:	2304      	movs	r3, #4
 80040cc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	75bb      	strb	r3, [r7, #22]
 80040d2:	e02d      	b.n	8004130 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80040d4:	7dbb      	ldrb	r3, [r7, #22]
 80040d6:	005a      	lsls	r2, r3, #1
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	eb02 0c03 	add.w	ip, r2, r3
 80040de:	7dbb      	ldrb	r3, [r7, #22]
 80040e0:	0119      	lsls	r1, r3, #4
 80040e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040e6:	f1c1 0620 	rsb	r6, r1, #32
 80040ea:	f1a1 0020 	sub.w	r0, r1, #32
 80040ee:	fa22 f401 	lsr.w	r4, r2, r1
 80040f2:	fa03 f606 	lsl.w	r6, r3, r6
 80040f6:	4334      	orrs	r4, r6
 80040f8:	fa23 f000 	lsr.w	r0, r3, r0
 80040fc:	4304      	orrs	r4, r0
 80040fe:	fa23 f501 	lsr.w	r5, r3, r1
 8004102:	b2a3      	uxth	r3, r4
 8004104:	4619      	mov	r1, r3
 8004106:	4660      	mov	r0, ip
 8004108:	f000 f84a 	bl	80041a0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800410c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004110:	f000 f862 	bl	80041d8 <FLASH_WaitForLastOperation>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <HAL_FLASH_Program+0xdc>)
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <HAL_FLASH_Program+0xdc>)
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d107      	bne.n	800413a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800412a:	7dbb      	ldrb	r3, [r7, #22]
 800412c:	3301      	adds	r3, #1
 800412e:	75bb      	strb	r3, [r7, #22]
 8004130:	7dba      	ldrb	r2, [r7, #22]
 8004132:	7d7b      	ldrb	r3, [r7, #21]
 8004134:	429a      	cmp	r2, r3
 8004136:	d3cd      	bcc.n	80040d4 <HAL_FLASH_Program+0x60>
 8004138:	e000      	b.n	800413c <HAL_FLASH_Program+0xc8>
      {
        break;
 800413a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_FLASH_Program+0xd8>)
 800413e:	2200      	movs	r2, #0
 8004140:	761a      	strb	r2, [r3, #24]

  return status;
 8004142:	7dfb      	ldrb	r3, [r7, #23]
}
 8004144:	4618      	mov	r0, r3
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414c:	20000250 	.word	0x20000250
 8004150:	40022000 	.word	0x40022000

08004154 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <HAL_FLASH_Unlock+0x40>)
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_FLASH_Unlock+0x40>)
 800416c:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <HAL_FLASH_Unlock+0x44>)
 800416e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004170:	4b08      	ldr	r3, [pc, #32]	; (8004194 <HAL_FLASH_Unlock+0x40>)
 8004172:	4a0a      	ldr	r2, [pc, #40]	; (800419c <HAL_FLASH_Unlock+0x48>)
 8004174:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <HAL_FLASH_Unlock+0x40>)
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004186:	79fb      	ldrb	r3, [r7, #7]
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40022000 	.word	0x40022000
 8004198:	45670123 	.word	0x45670123
 800419c:	cdef89ab 	.word	0xcdef89ab

080041a0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <FLASH_Program_HalfWord+0x30>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <FLASH_Program_HalfWord+0x34>)
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	4a07      	ldr	r2, [pc, #28]	; (80041d4 <FLASH_Program_HalfWord+0x34>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	801a      	strh	r2, [r3, #0]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000250 	.word	0x20000250
 80041d4:	40022000 	.word	0x40022000

080041d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7fe fb98 	bl	8002914 <HAL_GetTick>
 80041e4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041e6:	e010      	b.n	800420a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d00c      	beq.n	800420a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <FLASH_WaitForLastOperation+0x2e>
 80041f6:	f7fe fb8d 	bl	8002914 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d201      	bcs.n	800420a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e025      	b.n	8004256 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <FLASH_WaitForLastOperation+0x88>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e8      	bne.n	80041e8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <FLASH_WaitForLastOperation+0x88>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <FLASH_WaitForLastOperation+0x88>)
 8004224:	2220      	movs	r2, #32
 8004226:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <FLASH_WaitForLastOperation+0x88>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10b      	bne.n	800424c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004234:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <FLASH_WaitForLastOperation+0x88>)
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <FLASH_WaitForLastOperation+0x88>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800424c:	f000 f80a 	bl	8004264 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40022000 	.word	0x40022000

08004264 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800426e:	4b23      	ldr	r3, [pc, #140]	; (80042fc <FLASH_SetErrorCode+0x98>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800427a:	4b21      	ldr	r3, [pc, #132]	; (8004300 <FLASH_SetErrorCode+0x9c>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f043 0302 	orr.w	r3, r3, #2
 8004282:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <FLASH_SetErrorCode+0x9c>)
 8004284:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f043 0310 	orr.w	r3, r3, #16
 800428c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800428e:	4b1b      	ldr	r3, [pc, #108]	; (80042fc <FLASH_SetErrorCode+0x98>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800429a:	4b19      	ldr	r3, [pc, #100]	; (8004300 <FLASH_SetErrorCode+0x9c>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	4a17      	ldr	r2, [pc, #92]	; (8004300 <FLASH_SetErrorCode+0x9c>)
 80042a4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <FLASH_SetErrorCode+0x98>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80042ba:	4b11      	ldr	r3, [pc, #68]	; (8004300 <FLASH_SetErrorCode+0x9c>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f043 0304 	orr.w	r3, r3, #4
 80042c2:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <FLASH_SetErrorCode+0x9c>)
 80042c4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80042c6:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <FLASH_SetErrorCode+0x98>)
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <FLASH_SetErrorCode+0x98>)
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f240 1201 	movw	r2, #257	; 0x101
 80042d8:	4293      	cmp	r3, r2
 80042da:	d106      	bne.n	80042ea <FLASH_SetErrorCode+0x86>
 80042dc:	4b07      	ldr	r3, [pc, #28]	; (80042fc <FLASH_SetErrorCode+0x98>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	4a06      	ldr	r2, [pc, #24]	; (80042fc <FLASH_SetErrorCode+0x98>)
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	61d3      	str	r3, [r2, #28]
}  
 80042e8:	e002      	b.n	80042f0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042ea:	4a04      	ldr	r2, [pc, #16]	; (80042fc <FLASH_SetErrorCode+0x98>)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	60d3      	str	r3, [r2, #12]
}  
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40022000 	.word	0x40022000
 8004300:	20000250 	.word	0x20000250

08004304 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004316:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <HAL_FLASHEx_Erase+0xd0>)
 8004318:	7e1b      	ldrb	r3, [r3, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_FLASHEx_Erase+0x1e>
 800431e:	2302      	movs	r3, #2
 8004320:	e053      	b.n	80043ca <HAL_FLASHEx_Erase+0xc6>
 8004322:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <HAL_FLASHEx_Erase+0xd0>)
 8004324:	2201      	movs	r2, #1
 8004326:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d116      	bne.n	800435e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004330:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004334:	f7ff ff50 	bl	80041d8 <FLASH_WaitForLastOperation>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d141      	bne.n	80043c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800433e:	2001      	movs	r0, #1
 8004340:	f000 f84c 	bl	80043dc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004344:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004348:	f7ff ff46 	bl	80041d8 <FLASH_WaitForLastOperation>
 800434c:	4603      	mov	r3, r0
 800434e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004350:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_FLASHEx_Erase+0xd4>)
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <HAL_FLASHEx_Erase+0xd4>)
 8004356:	f023 0304 	bic.w	r3, r3, #4
 800435a:	6113      	str	r3, [r2, #16]
 800435c:	e031      	b.n	80043c2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800435e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004362:	f7ff ff39 	bl	80041d8 <FLASH_WaitForLastOperation>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d12a      	bne.n	80043c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f04f 32ff 	mov.w	r2, #4294967295
 8004372:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	e019      	b.n	80043b0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800437c:	68b8      	ldr	r0, [r7, #8]
 800437e:	f000 f849 	bl	8004414 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004382:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004386:	f7ff ff27 	bl	80041d8 <FLASH_WaitForLastOperation>
 800438a:	4603      	mov	r3, r0
 800438c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_FLASHEx_Erase+0xd4>)
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	4a11      	ldr	r2, [pc, #68]	; (80043d8 <HAL_FLASHEx_Erase+0xd4>)
 8004394:	f023 0302 	bic.w	r3, r3, #2
 8004398:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	601a      	str	r2, [r3, #0]
            break;
 80043a6:	e00c      	b.n	80043c2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	02da      	lsls	r2, r3, #11
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d3dc      	bcc.n	800437c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80043c2:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <HAL_FLASHEx_Erase+0xd0>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	761a      	strb	r2, [r3, #24]

  return status;
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000250 	.word	0x20000250
 80043d8:	40022000 	.word	0x40022000

080043dc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <FLASH_MassErase+0x30>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <FLASH_MassErase+0x34>)
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	4a08      	ldr	r2, [pc, #32]	; (8004410 <FLASH_MassErase+0x34>)
 80043f0:	f043 0304 	orr.w	r3, r3, #4
 80043f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <FLASH_MassErase+0x34>)
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	4a05      	ldr	r2, [pc, #20]	; (8004410 <FLASH_MassErase+0x34>)
 80043fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004400:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	20000250 	.word	0x20000250
 8004410:	40022000 	.word	0x40022000

08004414 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <FLASH_PageErase+0x38>)
 800441e:	2200      	movs	r2, #0
 8004420:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004422:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <FLASH_PageErase+0x3c>)
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <FLASH_PageErase+0x3c>)
 8004428:	f043 0302 	orr.w	r3, r3, #2
 800442c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800442e:	4a08      	ldr	r2, [pc, #32]	; (8004450 <FLASH_PageErase+0x3c>)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004434:	4b06      	ldr	r3, [pc, #24]	; (8004450 <FLASH_PageErase+0x3c>)
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	4a05      	ldr	r2, [pc, #20]	; (8004450 <FLASH_PageErase+0x3c>)
 800443a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800443e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000250 	.word	0x20000250
 8004450:	40022000 	.word	0x40022000

08004454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004454:	b480      	push	{r7}
 8004456:	b08b      	sub	sp, #44	; 0x2c
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800445e:	2300      	movs	r3, #0
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004462:	2300      	movs	r3, #0
 8004464:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004466:	e133      	b.n	80046d0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004468:	2201      	movs	r2, #1
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	429a      	cmp	r2, r3
 8004482:	f040 8122 	bne.w	80046ca <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b12      	cmp	r3, #18
 800448c:	d034      	beq.n	80044f8 <HAL_GPIO_Init+0xa4>
 800448e:	2b12      	cmp	r3, #18
 8004490:	d80d      	bhi.n	80044ae <HAL_GPIO_Init+0x5a>
 8004492:	2b02      	cmp	r3, #2
 8004494:	d02b      	beq.n	80044ee <HAL_GPIO_Init+0x9a>
 8004496:	2b02      	cmp	r3, #2
 8004498:	d804      	bhi.n	80044a4 <HAL_GPIO_Init+0x50>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d031      	beq.n	8004502 <HAL_GPIO_Init+0xae>
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d01c      	beq.n	80044dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044a2:	e048      	b.n	8004536 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d043      	beq.n	8004530 <HAL_GPIO_Init+0xdc>
 80044a8:	2b11      	cmp	r3, #17
 80044aa:	d01b      	beq.n	80044e4 <HAL_GPIO_Init+0x90>
          break;
 80044ac:	e043      	b.n	8004536 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80044ae:	4a8f      	ldr	r2, [pc, #572]	; (80046ec <HAL_GPIO_Init+0x298>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d026      	beq.n	8004502 <HAL_GPIO_Init+0xae>
 80044b4:	4a8d      	ldr	r2, [pc, #564]	; (80046ec <HAL_GPIO_Init+0x298>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d806      	bhi.n	80044c8 <HAL_GPIO_Init+0x74>
 80044ba:	4a8d      	ldr	r2, [pc, #564]	; (80046f0 <HAL_GPIO_Init+0x29c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d020      	beq.n	8004502 <HAL_GPIO_Init+0xae>
 80044c0:	4a8c      	ldr	r2, [pc, #560]	; (80046f4 <HAL_GPIO_Init+0x2a0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01d      	beq.n	8004502 <HAL_GPIO_Init+0xae>
          break;
 80044c6:	e036      	b.n	8004536 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80044c8:	4a8b      	ldr	r2, [pc, #556]	; (80046f8 <HAL_GPIO_Init+0x2a4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d019      	beq.n	8004502 <HAL_GPIO_Init+0xae>
 80044ce:	4a8b      	ldr	r2, [pc, #556]	; (80046fc <HAL_GPIO_Init+0x2a8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d016      	beq.n	8004502 <HAL_GPIO_Init+0xae>
 80044d4:	4a8a      	ldr	r2, [pc, #552]	; (8004700 <HAL_GPIO_Init+0x2ac>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <HAL_GPIO_Init+0xae>
          break;
 80044da:	e02c      	b.n	8004536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	623b      	str	r3, [r7, #32]
          break;
 80044e2:	e028      	b.n	8004536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	3304      	adds	r3, #4
 80044ea:	623b      	str	r3, [r7, #32]
          break;
 80044ec:	e023      	b.n	8004536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	3308      	adds	r3, #8
 80044f4:	623b      	str	r3, [r7, #32]
          break;
 80044f6:	e01e      	b.n	8004536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	330c      	adds	r3, #12
 80044fe:	623b      	str	r3, [r7, #32]
          break;
 8004500:	e019      	b.n	8004536 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800450a:	2304      	movs	r3, #4
 800450c:	623b      	str	r3, [r7, #32]
          break;
 800450e:	e012      	b.n	8004536 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d105      	bne.n	8004524 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004518:	2308      	movs	r3, #8
 800451a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	611a      	str	r2, [r3, #16]
          break;
 8004522:	e008      	b.n	8004536 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004524:	2308      	movs	r3, #8
 8004526:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	615a      	str	r2, [r3, #20]
          break;
 800452e:	e002      	b.n	8004536 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004530:	2300      	movs	r3, #0
 8004532:	623b      	str	r3, [r7, #32]
          break;
 8004534:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2bff      	cmp	r3, #255	; 0xff
 800453a:	d801      	bhi.n	8004540 <HAL_GPIO_Init+0xec>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	e001      	b.n	8004544 <HAL_GPIO_Init+0xf0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2bff      	cmp	r3, #255	; 0xff
 800454a:	d802      	bhi.n	8004552 <HAL_GPIO_Init+0xfe>
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	e002      	b.n	8004558 <HAL_GPIO_Init+0x104>
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	3b08      	subs	r3, #8
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	210f      	movs	r1, #15
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	fa01 f303 	lsl.w	r3, r1, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	401a      	ands	r2, r3
 800456a:	6a39      	ldr	r1, [r7, #32]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	fa01 f303 	lsl.w	r3, r1, r3
 8004572:	431a      	orrs	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80a2 	beq.w	80046ca <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004586:	4b5f      	ldr	r3, [pc, #380]	; (8004704 <HAL_GPIO_Init+0x2b0>)
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	4a5e      	ldr	r2, [pc, #376]	; (8004704 <HAL_GPIO_Init+0x2b0>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6193      	str	r3, [r2, #24]
 8004592:	4b5c      	ldr	r3, [pc, #368]	; (8004704 <HAL_GPIO_Init+0x2b0>)
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800459e:	4a5a      	ldr	r2, [pc, #360]	; (8004708 <HAL_GPIO_Init+0x2b4>)
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	3302      	adds	r3, #2
 80045a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	220f      	movs	r2, #15
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4013      	ands	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a51      	ldr	r2, [pc, #324]	; (800470c <HAL_GPIO_Init+0x2b8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d01f      	beq.n	800460a <HAL_GPIO_Init+0x1b6>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a50      	ldr	r2, [pc, #320]	; (8004710 <HAL_GPIO_Init+0x2bc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d019      	beq.n	8004606 <HAL_GPIO_Init+0x1b2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a4f      	ldr	r2, [pc, #316]	; (8004714 <HAL_GPIO_Init+0x2c0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_GPIO_Init+0x1ae>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a4e      	ldr	r2, [pc, #312]	; (8004718 <HAL_GPIO_Init+0x2c4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00d      	beq.n	80045fe <HAL_GPIO_Init+0x1aa>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a4d      	ldr	r2, [pc, #308]	; (800471c <HAL_GPIO_Init+0x2c8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d007      	beq.n	80045fa <HAL_GPIO_Init+0x1a6>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a4c      	ldr	r2, [pc, #304]	; (8004720 <HAL_GPIO_Init+0x2cc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d101      	bne.n	80045f6 <HAL_GPIO_Init+0x1a2>
 80045f2:	2305      	movs	r3, #5
 80045f4:	e00a      	b.n	800460c <HAL_GPIO_Init+0x1b8>
 80045f6:	2306      	movs	r3, #6
 80045f8:	e008      	b.n	800460c <HAL_GPIO_Init+0x1b8>
 80045fa:	2304      	movs	r3, #4
 80045fc:	e006      	b.n	800460c <HAL_GPIO_Init+0x1b8>
 80045fe:	2303      	movs	r3, #3
 8004600:	e004      	b.n	800460c <HAL_GPIO_Init+0x1b8>
 8004602:	2302      	movs	r3, #2
 8004604:	e002      	b.n	800460c <HAL_GPIO_Init+0x1b8>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_GPIO_Init+0x1b8>
 800460a:	2300      	movs	r3, #0
 800460c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460e:	f002 0203 	and.w	r2, r2, #3
 8004612:	0092      	lsls	r2, r2, #2
 8004614:	4093      	lsls	r3, r2
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800461c:	493a      	ldr	r1, [pc, #232]	; (8004708 <HAL_GPIO_Init+0x2b4>)
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	089b      	lsrs	r3, r3, #2
 8004622:	3302      	adds	r3, #2
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d006      	beq.n	8004644 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004636:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	493a      	ldr	r1, [pc, #232]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
 8004642:	e006      	b.n	8004652 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004644:	4b37      	ldr	r3, [pc, #220]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	43db      	mvns	r3, r3
 800464c:	4935      	ldr	r1, [pc, #212]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 800464e:	4013      	ands	r3, r2
 8004650:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d006      	beq.n	800466c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800465e:	4b31      	ldr	r3, [pc, #196]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	4930      	ldr	r1, [pc, #192]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	4313      	orrs	r3, r2
 8004668:	604b      	str	r3, [r1, #4]
 800466a:	e006      	b.n	800467a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800466c:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	43db      	mvns	r3, r3
 8004674:	492b      	ldr	r1, [pc, #172]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 8004676:	4013      	ands	r3, r2
 8004678:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d006      	beq.n	8004694 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004686:	4b27      	ldr	r3, [pc, #156]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	4926      	ldr	r1, [pc, #152]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
 8004692:	e006      	b.n	80046a2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004694:	4b23      	ldr	r3, [pc, #140]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	43db      	mvns	r3, r3
 800469c:	4921      	ldr	r1, [pc, #132]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 800469e:	4013      	ands	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d006      	beq.n	80046bc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046ae:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	491c      	ldr	r1, [pc, #112]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60cb      	str	r3, [r1, #12]
 80046ba:	e006      	b.n	80046ca <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	4917      	ldr	r1, [pc, #92]	; (8004724 <HAL_GPIO_Init+0x2d0>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	3301      	adds	r3, #1
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	fa22 f303 	lsr.w	r3, r2, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f47f aec4 	bne.w	8004468 <HAL_GPIO_Init+0x14>
  }
}
 80046e0:	bf00      	nop
 80046e2:	372c      	adds	r7, #44	; 0x2c
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	10210000 	.word	0x10210000
 80046f0:	10110000 	.word	0x10110000
 80046f4:	10120000 	.word	0x10120000
 80046f8:	10310000 	.word	0x10310000
 80046fc:	10320000 	.word	0x10320000
 8004700:	10220000 	.word	0x10220000
 8004704:	40021000 	.word	0x40021000
 8004708:	40010000 	.word	0x40010000
 800470c:	40010800 	.word	0x40010800
 8004710:	40010c00 	.word	0x40010c00
 8004714:	40011000 	.word	0x40011000
 8004718:	40011400 	.word	0x40011400
 800471c:	40011800 	.word	0x40011800
 8004720:	40011c00 	.word	0x40011c00
 8004724:	40010400 	.word	0x40010400

08004728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	807b      	strh	r3, [r7, #2]
 8004734:	4613      	mov	r3, r2
 8004736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004738:	787b      	ldrb	r3, [r7, #1]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800473e:	887a      	ldrh	r2, [r7, #2]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004744:	e003      	b.n	800474e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004746:	887b      	ldrh	r3, [r7, #2]
 8004748:	041a      	lsls	r2, r3, #16
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	611a      	str	r2, [r3, #16]
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e26c      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8087 	beq.w	8004886 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004778:	4b92      	ldr	r3, [pc, #584]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 030c 	and.w	r3, r3, #12
 8004780:	2b04      	cmp	r3, #4
 8004782:	d00c      	beq.n	800479e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004784:	4b8f      	ldr	r3, [pc, #572]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b08      	cmp	r3, #8
 800478e:	d112      	bne.n	80047b6 <HAL_RCC_OscConfig+0x5e>
 8004790:	4b8c      	ldr	r3, [pc, #560]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479c:	d10b      	bne.n	80047b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479e:	4b89      	ldr	r3, [pc, #548]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d06c      	beq.n	8004884 <HAL_RCC_OscConfig+0x12c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d168      	bne.n	8004884 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e246      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047be:	d106      	bne.n	80047ce <HAL_RCC_OscConfig+0x76>
 80047c0:	4b80      	ldr	r3, [pc, #512]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a7f      	ldr	r2, [pc, #508]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80047c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	e02e      	b.n	800482c <HAL_RCC_OscConfig+0xd4>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x98>
 80047d6:	4b7b      	ldr	r3, [pc, #492]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a7a      	ldr	r2, [pc, #488]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b78      	ldr	r3, [pc, #480]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a77      	ldr	r2, [pc, #476]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e01d      	b.n	800482c <HAL_RCC_OscConfig+0xd4>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f8:	d10c      	bne.n	8004814 <HAL_RCC_OscConfig+0xbc>
 80047fa:	4b72      	ldr	r3, [pc, #456]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a71      	ldr	r2, [pc, #452]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	4b6f      	ldr	r3, [pc, #444]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a6e      	ldr	r2, [pc, #440]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e00b      	b.n	800482c <HAL_RCC_OscConfig+0xd4>
 8004814:	4b6b      	ldr	r3, [pc, #428]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6a      	ldr	r2, [pc, #424]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 800481a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	4b68      	ldr	r3, [pc, #416]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a67      	ldr	r2, [pc, #412]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004834:	f7fe f86e 	bl	8002914 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800483c:	f7fe f86a 	bl	8002914 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e1fa      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b5d      	ldr	r3, [pc, #372]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCC_OscConfig+0xe4>
 800485a:	e014      	b.n	8004886 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fe f85a 	bl	8002914 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004864:	f7fe f856 	bl	8002914 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e1e6      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004876:	4b53      	ldr	r3, [pc, #332]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x10c>
 8004882:	e000      	b.n	8004886 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d063      	beq.n	800495a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004892:	4b4c      	ldr	r3, [pc, #304]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f003 030c 	and.w	r3, r3, #12
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800489e:	4b49      	ldr	r3, [pc, #292]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d11c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x18c>
 80048aa:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d116      	bne.n	80048e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b6:	4b43      	ldr	r3, [pc, #268]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_RCC_OscConfig+0x176>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e1ba      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ce:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4939      	ldr	r1, [pc, #228]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e2:	e03a      	b.n	800495a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d020      	beq.n	800492e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ec:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <HAL_RCC_OscConfig+0x270>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f2:	f7fe f80f 	bl	8002914 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048fa:	f7fe f80b 	bl	8002914 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e19b      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490c:	4b2d      	ldr	r3, [pc, #180]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004918:	4b2a      	ldr	r3, [pc, #168]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4927      	ldr	r1, [pc, #156]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]
 800492c:	e015      	b.n	800495a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492e:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <HAL_RCC_OscConfig+0x270>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fd ffee 	bl	8002914 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800493c:	f7fd ffea 	bl	8002914 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e17a      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494e:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d03a      	beq.n	80049dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d019      	beq.n	80049a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <HAL_RCC_OscConfig+0x274>)
 8004970:	2201      	movs	r2, #1
 8004972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004974:	f7fd ffce 	bl	8002914 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497c:	f7fd ffca 	bl	8002914 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e15a      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <HAL_RCC_OscConfig+0x26c>)
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800499a:	2001      	movs	r0, #1
 800499c:	f000 fada 	bl	8004f54 <RCC_Delay>
 80049a0:	e01c      	b.n	80049dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a2:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <HAL_RCC_OscConfig+0x274>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a8:	f7fd ffb4 	bl	8002914 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ae:	e00f      	b.n	80049d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b0:	f7fd ffb0 	bl	8002914 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d908      	bls.n	80049d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e140      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000
 80049c8:	42420000 	.word	0x42420000
 80049cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d0:	4b9e      	ldr	r3, [pc, #632]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e9      	bne.n	80049b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80a6 	beq.w	8004b36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ee:	4b97      	ldr	r3, [pc, #604]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10d      	bne.n	8004a16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fa:	4b94      	ldr	r3, [pc, #592]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	4a93      	ldr	r2, [pc, #588]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a04:	61d3      	str	r3, [r2, #28]
 8004a06:	4b91      	ldr	r3, [pc, #580]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a16:	4b8e      	ldr	r3, [pc, #568]	; (8004c50 <HAL_RCC_OscConfig+0x4f8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d118      	bne.n	8004a54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a22:	4b8b      	ldr	r3, [pc, #556]	; (8004c50 <HAL_RCC_OscConfig+0x4f8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a8a      	ldr	r2, [pc, #552]	; (8004c50 <HAL_RCC_OscConfig+0x4f8>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2e:	f7fd ff71 	bl	8002914 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a36:	f7fd ff6d 	bl	8002914 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b64      	cmp	r3, #100	; 0x64
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e0fd      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	4b81      	ldr	r3, [pc, #516]	; (8004c50 <HAL_RCC_OscConfig+0x4f8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCC_OscConfig+0x312>
 8004a5c:	4b7b      	ldr	r3, [pc, #492]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4a7a      	ldr	r2, [pc, #488]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	6213      	str	r3, [r2, #32]
 8004a68:	e02d      	b.n	8004ac6 <HAL_RCC_OscConfig+0x36e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCC_OscConfig+0x334>
 8004a72:	4b76      	ldr	r3, [pc, #472]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	4a75      	ldr	r2, [pc, #468]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	6213      	str	r3, [r2, #32]
 8004a7e:	4b73      	ldr	r3, [pc, #460]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	4a72      	ldr	r2, [pc, #456]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004a84:	f023 0304 	bic.w	r3, r3, #4
 8004a88:	6213      	str	r3, [r2, #32]
 8004a8a:	e01c      	b.n	8004ac6 <HAL_RCC_OscConfig+0x36e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b05      	cmp	r3, #5
 8004a92:	d10c      	bne.n	8004aae <HAL_RCC_OscConfig+0x356>
 8004a94:	4b6d      	ldr	r3, [pc, #436]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	4a6c      	ldr	r2, [pc, #432]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004a9a:	f043 0304 	orr.w	r3, r3, #4
 8004a9e:	6213      	str	r3, [r2, #32]
 8004aa0:	4b6a      	ldr	r3, [pc, #424]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	4a69      	ldr	r2, [pc, #420]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6213      	str	r3, [r2, #32]
 8004aac:	e00b      	b.n	8004ac6 <HAL_RCC_OscConfig+0x36e>
 8004aae:	4b67      	ldr	r3, [pc, #412]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	4a66      	ldr	r2, [pc, #408]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	6213      	str	r3, [r2, #32]
 8004aba:	4b64      	ldr	r3, [pc, #400]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	4a63      	ldr	r2, [pc, #396]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004ac0:	f023 0304 	bic.w	r3, r3, #4
 8004ac4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d015      	beq.n	8004afa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7fd ff21 	bl	8002914 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fd ff1d 	bl	8002914 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0ab      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aec:	4b57      	ldr	r3, [pc, #348]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ee      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x37e>
 8004af8:	e014      	b.n	8004b24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afa:	f7fd ff0b 	bl	8002914 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b02:	f7fd ff07 	bl	8002914 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e095      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b18:	4b4c      	ldr	r3, [pc, #304]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ee      	bne.n	8004b02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d105      	bne.n	8004b36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b2a:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	4a47      	ldr	r2, [pc, #284]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8081 	beq.w	8004c42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b40:	4b42      	ldr	r3, [pc, #264]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d061      	beq.n	8004c10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d146      	bne.n	8004be2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b54:	4b3f      	ldr	r3, [pc, #252]	; (8004c54 <HAL_RCC_OscConfig+0x4fc>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5a:	f7fd fedb 	bl	8002914 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b62:	f7fd fed7 	bl	8002914 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e067      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b74:	4b35      	ldr	r3, [pc, #212]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f0      	bne.n	8004b62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d108      	bne.n	8004b9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b8a:	4b30      	ldr	r3, [pc, #192]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	492d      	ldr	r1, [pc, #180]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a19      	ldr	r1, [r3, #32]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	430b      	orrs	r3, r1
 8004bae:	4927      	ldr	r1, [pc, #156]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <HAL_RCC_OscConfig+0x4fc>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bba:	f7fd feab 	bl	8002914 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc2:	f7fd fea7 	bl	8002914 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e037      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x46a>
 8004be0:	e02f      	b.n	8004c42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be2:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <HAL_RCC_OscConfig+0x4fc>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be8:	f7fd fe94 	bl	8002914 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fd fe90 	bl	8002914 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e020      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x498>
 8004c0e:	e018      	b.n	8004c42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e013      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_RCC_OscConfig+0x4f4>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d106      	bne.n	8004c3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d001      	beq.n	8004c42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40007000 	.word	0x40007000
 8004c54:	42420060 	.word	0x42420060

08004c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0d0      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b6a      	ldr	r3, [pc, #424]	; (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d910      	bls.n	8004c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7a:	4b67      	ldr	r3, [pc, #412]	; (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 0207 	bic.w	r2, r3, #7
 8004c82:	4965      	ldr	r1, [pc, #404]	; (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b63      	ldr	r3, [pc, #396]	; (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0b8      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d020      	beq.n	8004cea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cb4:	4b59      	ldr	r3, [pc, #356]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a58      	ldr	r2, [pc, #352]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ccc:	4b53      	ldr	r3, [pc, #332]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a52      	ldr	r2, [pc, #328]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004cd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd8:	4b50      	ldr	r3, [pc, #320]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	494d      	ldr	r1, [pc, #308]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d040      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfe:	4b47      	ldr	r3, [pc, #284]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d115      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e07f      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d16:	4b41      	ldr	r3, [pc, #260]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e073      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d26:	4b3d      	ldr	r3, [pc, #244]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e06b      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d36:	4b39      	ldr	r3, [pc, #228]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f023 0203 	bic.w	r2, r3, #3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4936      	ldr	r1, [pc, #216]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d48:	f7fd fde4 	bl	8002914 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d50:	f7fd fde0 	bl	8002914 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e053      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 020c 	and.w	r2, r3, #12
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d1eb      	bne.n	8004d50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d78:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d210      	bcs.n	8004da8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d86:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f023 0207 	bic.w	r2, r3, #7
 8004d8e:	4922      	ldr	r1, [pc, #136]	; (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e032      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004db4:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4916      	ldr	r1, [pc, #88]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	490e      	ldr	r1, [pc, #56]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004de6:	f000 f821 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 8004dea:	4601      	mov	r1, r0
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004df8:	5cd3      	ldrb	r3, [r2, r3]
 8004dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <HAL_RCC_ClockConfig+0x1cc>)
 8004e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e02:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <HAL_RCC_ClockConfig+0x1d0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fd fd42 	bl	8002890 <HAL_InitTick>

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40022000 	.word	0x40022000
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	080067d0 	.word	0x080067d0
 8004e24:	20000040 	.word	0x20000040
 8004e28:	20000044 	.word	0x20000044

08004e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e2c:	b490      	push	{r4, r7}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e32:	4b2a      	ldr	r3, [pc, #168]	; (8004edc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e34:	1d3c      	adds	r4, r7, #4
 8004e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e3c:	4b28      	ldr	r3, [pc, #160]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	2300      	movs	r3, #0
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e56:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d002      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x40>
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d003      	beq.n	8004e72 <HAL_RCC_GetSysClockFreq+0x46>
 8004e6a:	e02d      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e6e:	623b      	str	r3, [r7, #32]
      break;
 8004e70:	e02d      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	0c9b      	lsrs	r3, r3, #18
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e7e:	4413      	add	r3, r2
 8004e80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d013      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e90:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	0c5b      	lsrs	r3, r3, #17
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ea4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	4a0f      	ldr	r2, [pc, #60]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004eaa:	fb02 f203 	mul.w	r2, r2, r3
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	4a0c      	ldr	r2, [pc, #48]	; (8004eec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ebc:	fb02 f303 	mul.w	r3, r2, r3
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	623b      	str	r3, [r7, #32]
      break;
 8004ec6:	e002      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004eca:	623b      	str	r3, [r7, #32]
      break;
 8004ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ece:	6a3b      	ldr	r3, [r7, #32]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3728      	adds	r7, #40	; 0x28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc90      	pop	{r4, r7}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	08006770 	.word	0x08006770
 8004ee0:	08006780 	.word	0x08006780
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	007a1200 	.word	0x007a1200
 8004eec:	003d0900 	.word	0x003d0900

08004ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef4:	4b02      	ldr	r3, [pc, #8]	; (8004f00 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr
 8004f00:	20000040 	.word	0x20000040

08004f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f08:	f7ff fff2 	bl	8004ef0 <HAL_RCC_GetHCLKFreq>
 8004f0c:	4601      	mov	r1, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4a03      	ldr	r2, [pc, #12]	; (8004f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f1a:	5cd3      	ldrb	r3, [r2, r3]
 8004f1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000
 8004f28:	080067e0 	.word	0x080067e0

08004f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f30:	f7ff ffde 	bl	8004ef0 <HAL_RCC_GetHCLKFreq>
 8004f34:	4601      	mov	r1, r0
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	0adb      	lsrs	r3, r3, #11
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	4a03      	ldr	r2, [pc, #12]	; (8004f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f42:	5cd3      	ldrb	r3, [r2, r3]
 8004f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	080067e0 	.word	0x080067e0

08004f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <RCC_Delay+0x34>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <RCC_Delay+0x38>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	0a5b      	lsrs	r3, r3, #9
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f70:	bf00      	nop
  }
  while (Delay --);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1e5a      	subs	r2, r3, #1
 8004f76:	60fa      	str	r2, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f9      	bne.n	8004f70 <RCC_Delay+0x1c>
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000040 	.word	0x20000040
 8004f8c:	10624dd3 	.word	0x10624dd3

08004f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d07d      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004fac:	2300      	movs	r3, #0
 8004fae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb0:	4b4f      	ldr	r3, [pc, #316]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10d      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fbc:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	4a4b      	ldr	r2, [pc, #300]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	61d3      	str	r3, [r2, #28]
 8004fc8:	4b49      	ldr	r3, [pc, #292]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd8:	4b46      	ldr	r3, [pc, #280]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d118      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fe4:	4b43      	ldr	r3, [pc, #268]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a42      	ldr	r2, [pc, #264]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ff0:	f7fd fc90 	bl	8002914 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff6:	e008      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff8:	f7fd fc8c 	bl	8002914 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	; 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e06d      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500a:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005016:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02e      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	429a      	cmp	r2, r3
 8005032:	d027      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005034:	4b2e      	ldr	r3, [pc, #184]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800503e:	4b2e      	ldr	r3, [pc, #184]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005044:	4b2c      	ldr	r3, [pc, #176]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800504a:	4a29      	ldr	r2, [pc, #164]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d014      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505a:	f7fd fc5b 	bl	8002914 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005060:	e00a      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005062:	f7fd fc57 	bl	8002914 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005070:	4293      	cmp	r3, r2
 8005072:	d901      	bls.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e036      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ee      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005084:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	4917      	ldr	r1, [pc, #92]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005092:	4313      	orrs	r3, r2
 8005094:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005096:	7dfb      	ldrb	r3, [r7, #23]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d105      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	490b      	ldr	r1, [pc, #44]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d008      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050d2:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	4904      	ldr	r1, [pc, #16]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40007000 	.word	0x40007000
 80050f8:	42420440 	.word	0x42420440

080050fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b08d      	sub	sp, #52	; 0x34
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005104:	4b6b      	ldr	r3, [pc, #428]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005106:	f107 040c 	add.w	r4, r7, #12
 800510a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800510c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005110:	4b69      	ldr	r3, [pc, #420]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	2300      	movs	r3, #0
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511e:	2300      	movs	r3, #0
 8005120:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	2300      	movs	r3, #0
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3b01      	subs	r3, #1
 800512e:	2b0f      	cmp	r3, #15
 8005130:	f200 80b6 	bhi.w	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005134:	a201      	add	r2, pc, #4	; (adr r2, 800513c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	0800521f 	.word	0x0800521f
 8005140:	08005285 	.word	0x08005285
 8005144:	080052a1 	.word	0x080052a1
 8005148:	0800520f 	.word	0x0800520f
 800514c:	080052a1 	.word	0x080052a1
 8005150:	080052a1 	.word	0x080052a1
 8005154:	080052a1 	.word	0x080052a1
 8005158:	08005217 	.word	0x08005217
 800515c:	080052a1 	.word	0x080052a1
 8005160:	080052a1 	.word	0x080052a1
 8005164:	080052a1 	.word	0x080052a1
 8005168:	080052a1 	.word	0x080052a1
 800516c:	080052a1 	.word	0x080052a1
 8005170:	080052a1 	.word	0x080052a1
 8005174:	080052a1 	.word	0x080052a1
 8005178:	0800517d 	.word	0x0800517d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800517c:	4b4f      	ldr	r3, [pc, #316]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005182:	4b4e      	ldr	r3, [pc, #312]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 808a 	beq.w	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	0c9b      	lsrs	r3, r3, #18
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800519c:	4413      	add	r3, r2
 800519e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80051a2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d018      	beq.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051ae:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	0c5b      	lsrs	r3, r3, #17
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80051bc:	4413      	add	r3, r2
 80051be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80051ce:	4a3c      	ldr	r2, [pc, #240]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	fb02 f303 	mul.w	r3, r2, r3
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051de:	e004      	b.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	4a38      	ldr	r2, [pc, #224]	; (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80051ea:	4b34      	ldr	r3, [pc, #208]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f6:	d102      	bne.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80051fc:	e052      	b.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	4a31      	ldr	r2, [pc, #196]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	085b      	lsrs	r3, r3, #1
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800520c:	e04a      	b.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800520e:	f7ff fe0d 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 8005212:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005214:	e049      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005216:	f7ff fe09 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 800521a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800521c:	e045      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800521e:	4b27      	ldr	r3, [pc, #156]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522e:	d108      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 800523a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005240:	e01f      	b.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800524c:	d109      	bne.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800524e:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 800525a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005260:	e00f      	b.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800526c:	d11c      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800526e:	4b13      	ldr	r3, [pc, #76]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d016      	beq.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 800527a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005280:	e012      	b.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005282:	e011      	b.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005284:	f7ff fe52 	bl	8004f2c <HAL_RCC_GetPCLK2Freq>
 8005288:	4602      	mov	r2, r0
 800528a:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	0b9b      	lsrs	r3, r3, #14
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	3301      	adds	r3, #1
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800529e:	e004      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 80052a0:	bf00      	nop
 80052a2:	e002      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80052a4:	bf00      	nop
 80052a6:	e000      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80052a8:	bf00      	nop
    }
  }
  return (frequency);
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3734      	adds	r7, #52	; 0x34
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd90      	pop	{r4, r7, pc}
 80052b4:	08006784 	.word	0x08006784
 80052b8:	08006794 	.word	0x08006794
 80052bc:	40021000 	.word	0x40021000
 80052c0:	007a1200 	.word	0x007a1200
 80052c4:	003d0900 	.word	0x003d0900
 80052c8:	aaaaaaab 	.word	0xaaaaaaab

080052cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e041      	b.n	8005362 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fd f956 	bl	80025a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f000 fa72 	bl	80057f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d001      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e044      	b.n	800540e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <HAL_TIM_Base_Start_IT+0xac>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x6c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1c      	ldr	r2, [pc, #112]	; (800541c <HAL_TIM_Base_Start_IT+0xb0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x6c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b8:	d00e      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x6c>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_TIM_Base_Start_IT+0xb4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x6c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a16      	ldr	r2, [pc, #88]	; (8005424 <HAL_TIM_Base_Start_IT+0xb8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x6c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <HAL_TIM_Base_Start_IT+0xbc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d111      	bne.n	80053fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d010      	beq.n	800540c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0201 	orr.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fa:	e007      	b.n	800540c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40013400 	.word	0x40013400
 8005420:	40000400 	.word	0x40000400
 8005424:	40000800 	.word	0x40000800
 8005428:	40000c00 	.word	0x40000c00

0800542c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d122      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b02      	cmp	r3, #2
 800544e:	d11b      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0202 	mvn.w	r2, #2
 8005458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f9a4 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f997 	bl	80057aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f9a6 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b04      	cmp	r3, #4
 8005494:	d122      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d11b      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0204 	mvn.w	r2, #4
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f97a 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f96d 	bl	80057aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f97c 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0208 	mvn.w	r2, #8
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2204      	movs	r2, #4
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f950 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f943 	bl	80057aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f952 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b10      	cmp	r3, #16
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b10      	cmp	r3, #16
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0210 	mvn.w	r2, #16
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2208      	movs	r2, #8
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f926 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f919 	bl	80057aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f928 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b01      	cmp	r3, #1
 8005590:	d10e      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0201 	mvn.w	r2, #1
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc fc8a 	bl	8001ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d10e      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d107      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa91 	bl	8005afe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d10e      	bne.n	8005608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d107      	bne.n	8005608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f8ec 	bl	80057e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d10e      	bne.n	8005634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b20      	cmp	r3, #32
 8005622:	d107      	bne.n	8005634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0220 	mvn.w	r2, #32
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fa5c 	bl	8005aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005634:	bf00      	nop
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIM_ConfigClockSource+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e0a6      	b.n	80057a2 <HAL_TIM_ConfigClockSource+0x166>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d067      	beq.n	800575c <HAL_TIM_ConfigClockSource+0x120>
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d80b      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x6c>
 8005690:	2b10      	cmp	r3, #16
 8005692:	d073      	beq.n	800577c <HAL_TIM_ConfigClockSource+0x140>
 8005694:	2b10      	cmp	r3, #16
 8005696:	d802      	bhi.n	800569e <HAL_TIM_ConfigClockSource+0x62>
 8005698:	2b00      	cmp	r3, #0
 800569a:	d06f      	beq.n	800577c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800569c:	e078      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800569e:	2b20      	cmp	r3, #32
 80056a0:	d06c      	beq.n	800577c <HAL_TIM_ConfigClockSource+0x140>
 80056a2:	2b30      	cmp	r3, #48	; 0x30
 80056a4:	d06a      	beq.n	800577c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80056a6:	e073      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056a8:	2b70      	cmp	r3, #112	; 0x70
 80056aa:	d00d      	beq.n	80056c8 <HAL_TIM_ConfigClockSource+0x8c>
 80056ac:	2b70      	cmp	r3, #112	; 0x70
 80056ae:	d804      	bhi.n	80056ba <HAL_TIM_ConfigClockSource+0x7e>
 80056b0:	2b50      	cmp	r3, #80	; 0x50
 80056b2:	d033      	beq.n	800571c <HAL_TIM_ConfigClockSource+0xe0>
 80056b4:	2b60      	cmp	r3, #96	; 0x60
 80056b6:	d041      	beq.n	800573c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80056b8:	e06a      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056be:	d066      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x152>
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c4:	d017      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80056c6:	e063      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6899      	ldr	r1, [r3, #8]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f000 f97d 	bl	80059d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	609a      	str	r2, [r3, #8]
      break;
 80056f4:	e04c      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6899      	ldr	r1, [r3, #8]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f000 f966 	bl	80059d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005718:	609a      	str	r2, [r3, #8]
      break;
 800571a:	e039      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	6859      	ldr	r1, [r3, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	461a      	mov	r2, r3
 800572a:	f000 f8dd 	bl	80058e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2150      	movs	r1, #80	; 0x50
 8005734:	4618      	mov	r0, r3
 8005736:	f000 f934 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 800573a:	e029      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	461a      	mov	r2, r3
 800574a:	f000 f8fb 	bl	8005944 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2160      	movs	r1, #96	; 0x60
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f924 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 800575a:	e019      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6859      	ldr	r1, [r3, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	461a      	mov	r2, r3
 800576a:	f000 f8bd 	bl	80058e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2140      	movs	r1, #64	; 0x40
 8005774:	4618      	mov	r0, r3
 8005776:	f000 f914 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 800577a:	e009      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 f90b 	bl	80059a2 <TIM_ITRx_SetConfig>
        break;
 800578c:	e000      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800578e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr

080057bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr

080057ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr
	...

080057f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a33      	ldr	r2, [pc, #204]	; (80058d4 <TIM_Base_SetConfig+0xe0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a32      	ldr	r2, [pc, #200]	; (80058d8 <TIM_Base_SetConfig+0xe4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00f      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581a:	d00b      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a2f      	ldr	r2, [pc, #188]	; (80058dc <TIM_Base_SetConfig+0xe8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d007      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a2e      	ldr	r2, [pc, #184]	; (80058e0 <TIM_Base_SetConfig+0xec>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a2d      	ldr	r2, [pc, #180]	; (80058e4 <TIM_Base_SetConfig+0xf0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d108      	bne.n	8005846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <TIM_Base_SetConfig+0xe0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <TIM_Base_SetConfig+0x82>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a21      	ldr	r2, [pc, #132]	; (80058d8 <TIM_Base_SetConfig+0xe4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00f      	beq.n	8005876 <TIM_Base_SetConfig+0x82>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585c:	d00b      	beq.n	8005876 <TIM_Base_SetConfig+0x82>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a1e      	ldr	r2, [pc, #120]	; (80058dc <TIM_Base_SetConfig+0xe8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_Base_SetConfig+0x82>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <TIM_Base_SetConfig+0xec>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_Base_SetConfig+0x82>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a1c      	ldr	r2, [pc, #112]	; (80058e4 <TIM_Base_SetConfig+0xf0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <TIM_Base_SetConfig+0xe0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_Base_SetConfig+0xc8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a08      	ldr	r2, [pc, #32]	; (80058d8 <TIM_Base_SetConfig+0xe4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d103      	bne.n	80058c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	615a      	str	r2, [r3, #20]
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40013400 	.word	0x40013400
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00

080058e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f023 0201 	bic.w	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f023 030a 	bic.w	r3, r3, #10
 8005924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr

08005944 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f023 0210 	bic.w	r2, r3, #16
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800596e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	031b      	lsls	r3, r3, #12
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005980:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	621a      	str	r2, [r3, #32]
}
 8005998:	bf00      	nop
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr

080059a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	f043 0307 	orr.w	r3, r3, #7
 80059c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	609a      	str	r2, [r3, #8]
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr

080059d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b087      	sub	sp, #28
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	021a      	lsls	r2, r3, #8
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	431a      	orrs	r2, r3
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	609a      	str	r2, [r3, #8]
}
 8005a0a:	bf00      	nop
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e050      	b.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1b      	ldr	r2, [pc, #108]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a19      	ldr	r2, [pc, #100]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a82:	d00e      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a14      	ldr	r2, [pc, #80]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a12      	ldr	r2, [pc, #72]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10c      	bne.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	40013400 	.word	0x40013400
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00

08005aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e03f      	b.n	8005ba2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fc fd72 	bl	8002620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	; 0x24
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fcff 	bl	8006558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d11d      	bne.n	8005c00 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_UART_Receive_DMA+0x26>
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e016      	b.n	8005c02 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_UART_Receive_DMA+0x38>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e00f      	b.n	8005c02 <HAL_UART_Receive_DMA+0x58>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 fae4 	bl	80061c4 <UART_Start_Receive_DMA>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	e000      	b.n	8005c02 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005c00:	2302      	movs	r3, #2
  }
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	bf14      	ite	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	2300      	moveq	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b21      	cmp	r3, #33	; 0x21
 8005c36:	d116      	bne.n	8005c66 <HAL_UART_DMAStop+0x5c>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d013      	beq.n	8005c66 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695a      	ldr	r2, [r3, #20]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c4c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d004      	beq.n	8005c60 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fd fe5d 	bl	800391a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fb13 	bl	800628c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bf14      	ite	ne
 8005c74:	2301      	movne	r3, #1
 8005c76:	2300      	moveq	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b22      	cmp	r3, #34	; 0x22
 8005c86:	d116      	bne.n	8005cb6 <HAL_UART_DMAStop+0xac>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d013      	beq.n	8005cb6 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fd fe35 	bl	800391a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fb00 	bl	80062b6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10d      	bne.n	8005d12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <HAL_UART_IRQHandler+0x52>
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fb7a 	bl	8006404 <UART_Receive_IT>
      return;
 8005d10:	e17c      	b.n	800600c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 80b1 	beq.w	8005e7c <HAL_UART_IRQHandler+0x1bc>
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <HAL_UART_IRQHandler+0x70>
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 80a6 	beq.w	8005e7c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <HAL_UART_IRQHandler+0x90>
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	f043 0201 	orr.w	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <HAL_UART_IRQHandler+0xb0>
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	f043 0202 	orr.w	r2, r3, #2
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <HAL_UART_IRQHandler+0xd0>
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	f043 0204 	orr.w	r2, r3, #4
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00f      	beq.n	8005dba <HAL_UART_IRQHandler+0xfa>
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d104      	bne.n	8005dae <HAL_UART_IRQHandler+0xee>
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f043 0208 	orr.w	r2, r3, #8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 811f 	beq.w	8006002 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <HAL_UART_IRQHandler+0x11e>
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb13 	bl	8006404 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	f003 0308 	and.w	r3, r3, #8
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <HAL_UART_IRQHandler+0x146>
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d031      	beq.n	8005e6a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa55 	bl	80062b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d023      	beq.n	8005e62 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695a      	ldr	r2, [r3, #20]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e28:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d013      	beq.n	8005e5a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	4a77      	ldr	r2, [pc, #476]	; (8006014 <HAL_UART_IRQHandler+0x354>)
 8005e38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fd fda6 	bl	8003990 <HAL_DMA_Abort_IT>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d016      	beq.n	8005e78 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e54:	4610      	mov	r0, r2
 8005e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e58:	e00e      	b.n	8005e78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f8ee 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e60:	e00a      	b.n	8005e78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f8ea 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e68:	e006      	b.n	8005e78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f8e6 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e76:	e0c4      	b.n	8006002 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e78:	bf00      	nop
    return;
 8005e7a:	e0c2      	b.n	8006002 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	f040 80a1 	bne.w	8005fc8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 809b 	beq.w	8005fc8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8095 	beq.w	8005fc8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d04e      	beq.n	8005f60 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005ecc:	8a3b      	ldrh	r3, [r7, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8099 	beq.w	8006006 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ed8:	8a3a      	ldrh	r2, [r7, #16]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	f080 8093 	bcs.w	8006006 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8a3a      	ldrh	r2, [r7, #16]
 8005ee4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d02b      	beq.n	8005f48 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005efe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0210 	bic.w	r2, r2, #16
 8005f3c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fd fce9 	bl	800391a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f878 	bl	800604e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005f5e:	e052      	b.n	8006006 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d048      	beq.n	800600a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005f78:	8a7b      	ldrh	r3, [r7, #18]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d045      	beq.n	800600a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f8c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695a      	ldr	r2, [r3, #20]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0210 	bic.w	r2, r2, #16
 8005fba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fbc:	8a7b      	ldrh	r3, [r7, #18]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f844 	bl	800604e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005fc6:	e020      	b.n	800600a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d008      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x324>
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f9aa 	bl	8006336 <UART_Transmit_IT>
    return;
 8005fe2:	e013      	b.n	800600c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00e      	beq.n	800600c <HAL_UART_IRQHandler+0x34c>
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f9eb 	bl	80063d4 <UART_EndTransmit_IT>
    return;
 8005ffe:	bf00      	nop
 8006000:	e004      	b.n	800600c <HAL_UART_IRQHandler+0x34c>
    return;
 8006002:	bf00      	nop
 8006004:	e002      	b.n	800600c <HAL_UART_IRQHandler+0x34c>
      return;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <HAL_UART_IRQHandler+0x34c>
      return;
 800600a:	bf00      	nop
  }
}
 800600c:	3728      	adds	r7, #40	; 0x28
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	0800630f 	.word	0x0800630f

08006018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr

0800603c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	bc80      	pop	{r7}
 800604c:	4770      	bx	lr

0800604e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr

08006064 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d12a      	bne.n	80060d6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006094:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695a      	ldr	r2, [r3, #20]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0201 	bic.w	r2, r2, #1
 80060a4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695a      	ldr	r2, [r3, #20]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d107      	bne.n	80060d6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0210 	bic.w	r2, r2, #16
 80060d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d106      	bne.n	80060ec <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060e2:	4619      	mov	r1, r3
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff ffb2 	bl	800604e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060ea:	e002      	b.n	80060f2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7fb fedb 	bl	8001ea8 <HAL_UART_RxCpltCallback>
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	2b01      	cmp	r3, #1
 800610e:	d108      	bne.n	8006122 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	b29b      	uxth	r3, r3
 8006118:	4619      	mov	r1, r3
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff ff97 	bl	800604e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006120:	e002      	b.n	8006128 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7ff ff81 	bl	800602a <HAL_UART_RxHalfCpltCallback>
}
 8006128:	bf00      	nop
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614c:	2b00      	cmp	r3, #0
 800614e:	bf14      	ite	ne
 8006150:	2301      	movne	r3, #1
 8006152:	2300      	moveq	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b21      	cmp	r3, #33	; 0x21
 8006162:	d108      	bne.n	8006176 <UART_DMAError+0x46>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2200      	movs	r2, #0
 800616e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006170:	68b8      	ldr	r0, [r7, #8]
 8006172:	f000 f88b 	bl	800628c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b22      	cmp	r3, #34	; 0x22
 8006196:	d108      	bne.n	80061aa <UART_DMAError+0x7a>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d005      	beq.n	80061aa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2200      	movs	r2, #0
 80061a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80061a4:	68b8      	ldr	r0, [r7, #8]
 80061a6:	f000 f886 	bl	80062b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f043 0210 	orr.w	r2, r3, #16
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061b6:	68b8      	ldr	r0, [r7, #8]
 80061b8:	f7ff ff40 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	4613      	mov	r3, r2
 80061d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	88fa      	ldrh	r2, [r7, #6]
 80061dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2222      	movs	r2, #34	; 0x22
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	4a23      	ldr	r2, [pc, #140]	; (8006280 <UART_Start_Receive_DMA+0xbc>)
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	4a22      	ldr	r2, [pc, #136]	; (8006284 <UART_Start_Receive_DMA+0xc0>)
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	4a21      	ldr	r2, [pc, #132]	; (8006288 <UART_Start_Receive_DMA+0xc4>)
 8006202:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	2200      	movs	r2, #0
 800620a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800620c:	f107 0308 	add.w	r3, r7, #8
 8006210:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3304      	adds	r3, #4
 800621c:	4619      	mov	r1, r3
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	f7fd fb1a 	bl	800385c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006228:	2300      	movs	r3, #0
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006254:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0201 	orr.w	r2, r2, #1
 8006264:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695a      	ldr	r2, [r3, #20]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006274:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	08006065 	.word	0x08006065
 8006284:	080060fb 	.word	0x080060fb
 8006288:	08006131 	.word	0x08006131

0800628c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80062a2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr

080062b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0201 	bic.w	r2, r2, #1
 80062dc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d107      	bne.n	80062f6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0210 	bic.w	r2, r2, #16
 80062f4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr

0800630e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f7ff fe87 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b21      	cmp	r3, #33	; 0x21
 8006348:	d13e      	bne.n	80063c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d114      	bne.n	800637e <UART_Transmit_IT+0x48>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d110      	bne.n	800637e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006370:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	1c9a      	adds	r2, r3, #2
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]
 800637c:	e008      	b.n	8006390 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6211      	str	r1, [r2, #32]
 8006388:	781a      	ldrb	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29b      	uxth	r3, r3
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	4619      	mov	r1, r3
 800639e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10f      	bne.n	80063c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr

080063d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff fe0f 	bl	8006018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b22      	cmp	r3, #34	; 0x22
 8006416:	f040 8099 	bne.w	800654c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006422:	d117      	bne.n	8006454 <UART_Receive_IT+0x50>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d113      	bne.n	8006454 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006434:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	b29b      	uxth	r3, r3
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	b29a      	uxth	r2, r3
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	1c9a      	adds	r2, r3, #2
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	629a      	str	r2, [r3, #40]	; 0x28
 8006452:	e026      	b.n	80064a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006466:	d007      	beq.n	8006478 <UART_Receive_IT+0x74>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <UART_Receive_IT+0x82>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d106      	bne.n	8006486 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	b2da      	uxtb	r2, r3
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	e008      	b.n	8006498 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006492:	b2da      	uxtb	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	4619      	mov	r1, r3
 80064b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d148      	bne.n	8006548 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0220 	bic.w	r2, r2, #32
 80064c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0201 	bic.w	r2, r2, #1
 80064e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d123      	bne.n	800653e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0210 	bic.w	r2, r2, #16
 800650a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0310 	and.w	r3, r3, #16
 8006516:	2b10      	cmp	r3, #16
 8006518:	d10a      	bne.n	8006530 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff fd89 	bl	800604e <HAL_UARTEx_RxEventCallback>
 800653c:	e002      	b.n	8006544 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7fb fcb2 	bl	8001ea8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e002      	b.n	800654e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	e000      	b.n	800654e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800654c:	2302      	movs	r3, #2
  }
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006592:	f023 030c 	bic.w	r3, r3, #12
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	430b      	orrs	r3, r1
 800659e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a2c      	ldr	r2, [pc, #176]	; (800666c <UART_SetConfig+0x114>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d103      	bne.n	80065c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80065c0:	f7fe fcb4 	bl	8004f2c <HAL_RCC_GetPCLK2Freq>
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	e002      	b.n	80065ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80065c8:	f7fe fc9c 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 80065cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009a      	lsls	r2, r3, #2
 80065d8:	441a      	add	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e4:	4a22      	ldr	r2, [pc, #136]	; (8006670 <UART_SetConfig+0x118>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	095b      	lsrs	r3, r3, #5
 80065ec:	0119      	lsls	r1, r3, #4
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009a      	lsls	r2, r3, #2
 80065f8:	441a      	add	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	fbb2 f2f3 	udiv	r2, r2, r3
 8006604:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <UART_SetConfig+0x118>)
 8006606:	fba3 0302 	umull	r0, r3, r3, r2
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	2064      	movs	r0, #100	; 0x64
 800660e:	fb00 f303 	mul.w	r3, r0, r3
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	3332      	adds	r3, #50	; 0x32
 8006618:	4a15      	ldr	r2, [pc, #84]	; (8006670 <UART_SetConfig+0x118>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006624:	4419      	add	r1, r3
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009a      	lsls	r2, r3, #2
 8006630:	441a      	add	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	fbb2 f2f3 	udiv	r2, r2, r3
 800663c:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <UART_SetConfig+0x118>)
 800663e:	fba3 0302 	umull	r0, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	2064      	movs	r0, #100	; 0x64
 8006646:	fb00 f303 	mul.w	r3, r0, r3
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	3332      	adds	r3, #50	; 0x32
 8006650:	4a07      	ldr	r2, [pc, #28]	; (8006670 <UART_SetConfig+0x118>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	f003 020f 	and.w	r2, r3, #15
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	440a      	add	r2, r1
 8006662:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40013800 	.word	0x40013800
 8006670:	51eb851f 	.word	0x51eb851f

08006674 <__libc_init_array>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	2500      	movs	r5, #0
 8006678:	4e0c      	ldr	r6, [pc, #48]	; (80066ac <__libc_init_array+0x38>)
 800667a:	4c0d      	ldr	r4, [pc, #52]	; (80066b0 <__libc_init_array+0x3c>)
 800667c:	1ba4      	subs	r4, r4, r6
 800667e:	10a4      	asrs	r4, r4, #2
 8006680:	42a5      	cmp	r5, r4
 8006682:	d109      	bne.n	8006698 <__libc_init_array+0x24>
 8006684:	f000 f868 	bl	8006758 <_init>
 8006688:	2500      	movs	r5, #0
 800668a:	4e0a      	ldr	r6, [pc, #40]	; (80066b4 <__libc_init_array+0x40>)
 800668c:	4c0a      	ldr	r4, [pc, #40]	; (80066b8 <__libc_init_array+0x44>)
 800668e:	1ba4      	subs	r4, r4, r6
 8006690:	10a4      	asrs	r4, r4, #2
 8006692:	42a5      	cmp	r5, r4
 8006694:	d105      	bne.n	80066a2 <__libc_init_array+0x2e>
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800669c:	4798      	blx	r3
 800669e:	3501      	adds	r5, #1
 80066a0:	e7ee      	b.n	8006680 <__libc_init_array+0xc>
 80066a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066a6:	4798      	blx	r3
 80066a8:	3501      	adds	r5, #1
 80066aa:	e7f2      	b.n	8006692 <__libc_init_array+0x1e>
 80066ac:	080067e8 	.word	0x080067e8
 80066b0:	080067e8 	.word	0x080067e8
 80066b4:	080067e8 	.word	0x080067e8
 80066b8:	080067ec 	.word	0x080067ec

080066bc <memset>:
 80066bc:	4603      	mov	r3, r0
 80066be:	4402      	add	r2, r0
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d100      	bne.n	80066c6 <memset+0xa>
 80066c4:	4770      	bx	lr
 80066c6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ca:	e7f9      	b.n	80066c0 <memset+0x4>

080066cc <round>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80066d2:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80066d6:	2c13      	cmp	r4, #19
 80066d8:	4606      	mov	r6, r0
 80066da:	460d      	mov	r5, r1
 80066dc:	460b      	mov	r3, r1
 80066de:	468c      	mov	ip, r1
 80066e0:	4602      	mov	r2, r0
 80066e2:	dc17      	bgt.n	8006714 <round+0x48>
 80066e4:	2c00      	cmp	r4, #0
 80066e6:	da09      	bge.n	80066fc <round+0x30>
 80066e8:	3401      	adds	r4, #1
 80066ea:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80066ee:	d103      	bne.n	80066f8 <round+0x2c>
 80066f0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80066f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066f8:	2200      	movs	r2, #0
 80066fa:	e028      	b.n	800674e <round+0x82>
 80066fc:	4915      	ldr	r1, [pc, #84]	; (8006754 <round+0x88>)
 80066fe:	4121      	asrs	r1, r4
 8006700:	420d      	tst	r5, r1
 8006702:	d100      	bne.n	8006706 <round+0x3a>
 8006704:	b178      	cbz	r0, 8006726 <round+0x5a>
 8006706:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800670a:	4123      	asrs	r3, r4
 800670c:	4463      	add	r3, ip
 800670e:	ea23 0301 	bic.w	r3, r3, r1
 8006712:	e7f1      	b.n	80066f8 <round+0x2c>
 8006714:	2c33      	cmp	r4, #51	; 0x33
 8006716:	dd09      	ble.n	800672c <round+0x60>
 8006718:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800671c:	d103      	bne.n	8006726 <round+0x5a>
 800671e:	f7f9 fd89 	bl	8000234 <__adddf3>
 8006722:	4606      	mov	r6, r0
 8006724:	460d      	mov	r5, r1
 8006726:	4630      	mov	r0, r6
 8006728:	4629      	mov	r1, r5
 800672a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800672c:	f04f 30ff 	mov.w	r0, #4294967295
 8006730:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006734:	40f8      	lsrs	r0, r7
 8006736:	4206      	tst	r6, r0
 8006738:	d0f5      	beq.n	8006726 <round+0x5a>
 800673a:	2101      	movs	r1, #1
 800673c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006740:	fa01 f404 	lsl.w	r4, r1, r4
 8006744:	1932      	adds	r2, r6, r4
 8006746:	bf28      	it	cs
 8006748:	185b      	addcs	r3, r3, r1
 800674a:	ea22 0200 	bic.w	r2, r2, r0
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	e7e6      	b.n	8006722 <round+0x56>
 8006754:	000fffff 	.word	0x000fffff

08006758 <_init>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr

08006764 <_fini>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr
