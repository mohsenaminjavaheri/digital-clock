
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d6c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f90  08002f90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f90  08002f90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f90  08002f90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f90  08002f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002fa4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002fa4  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f48  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017bf  00000000  00000000  00026f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000658  00000000  00000000  00028740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000580  00000000  00000000  00028d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000190e9  00000000  00000000  00029318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007403  00000000  00000000  00042401  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009346c  00000000  00000000  00049804  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcc70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001730  00000000  00000000  000dccec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002f38 	.word	0x08002f38

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002f38 	.word	0x08002f38

08000224 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000228:	f000 fc4a 	bl	8000ac0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800022c:	f000 f824 	bl	8000278 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//ADC_ChannelConfTypeDef sConfig = {0};
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000230:	f000 f8ec 	bl	800040c <MX_GPIO_Init>
	MX_DMA_Init();
 8000234:	f000 f8cc 	bl	80003d0 <MX_DMA_Init>
	MX_ADC1_Init();
 8000238:	f000 f87c 	bl	8000334 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 800023c:	480c      	ldr	r0, [pc, #48]	; (8000270 <main+0x4c>)
 800023e:	f001 fa23 	bl	8001688 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, AD_RES, 2);
 8000242:	2202      	movs	r2, #2
 8000244:	490b      	ldr	r1, [pc, #44]	; (8000274 <main+0x50>)
 8000246:	480a      	ldr	r0, [pc, #40]	; (8000270 <main+0x4c>)
 8000248:	f000 fe5e 	bl	8000f08 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 800024c:	4808      	ldr	r0, [pc, #32]	; (8000270 <main+0x4c>)
 800024e:	f000 fda5 	bl	8000d9c <HAL_ADC_Start_IT>


	HAL_Delay(200);
 8000252:	20c8      	movs	r0, #200	; 0xc8
 8000254:	f000 fc96 	bl	8000b84 <HAL_Delay>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_ADC_Start_IT(&hadc1);
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <main+0x4c>)
 800025a:	f000 fd9f 	bl	8000d9c <HAL_ADC_Start_IT>

		//motor1(0,512);
		//motor2(1,512);
//		if(flag==1 && flag_1==1)
//		{
			motors(0,256,1,256);
 800025e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000262:	2201      	movs	r2, #1
 8000264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f935 	bl	80004d8 <motors>
		HAL_ADC_Start_IT(&hadc1);
 800026e:	e7f3      	b.n	8000258 <main+0x34>
 8000270:	20000034 	.word	0x20000034
 8000274:	2000002c 	.word	0x2000002c

08000278 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b096      	sub	sp, #88	; 0x58
 800027c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fe4e 	bl	8002f28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 031c 	add.w	r3, r7, #28
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ac:	2301      	movs	r3, #1
 80002ae:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	2301      	movs	r3, #1
 80002bc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	2302      	movs	r3, #2
 80002c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002cc:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 f85e 	bl	8002394 <HAL_RCC_OscConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 80002de:	f000 f8f7 	bl	80004d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	230f      	movs	r3, #15
 80002e4:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e6:	2302      	movs	r3, #2
 80002e8:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f8:	f107 031c 	add.w	r3, r7, #28
 80002fc:	2102      	movs	r1, #2
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fac8 	bl	8002894 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800030a:	f000 f8e1 	bl	80004d0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800030e:	2302      	movs	r3, #2
 8000310:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000316:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4618      	mov	r0, r3
 800031c:	f002 fc42 	bl	8002ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8000326:	f000 f8d3 	bl	80004d0 <Error_Handler>
	}
}
 800032a:	bf00      	nop
 800032c:	3758      	adds	r7, #88	; 0x58
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <MX_ADC1_Init+0x94>)
 8000346:	4a21      	ldr	r2, [pc, #132]	; (80003cc <MX_ADC1_Init+0x98>)
 8000348:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800034a:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <MX_ADC1_Init+0x94>)
 800034c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000350:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000352:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <MX_ADC1_Init+0x94>)
 8000354:	2201      	movs	r2, #1
 8000356:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_ADC1_Init+0x94>)
 800035a:	2200      	movs	r2, #0
 800035c:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_ADC1_Init+0x94>)
 8000360:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000364:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000366:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_ADC1_Init+0x94>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 800036c:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <MX_ADC1_Init+0x94>)
 800036e:	2202      	movs	r2, #2
 8000370:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000372:	4815      	ldr	r0, [pc, #84]	; (80003c8 <MX_ADC1_Init+0x94>)
 8000374:	f000 fc28 	bl	8000bc8 <HAL_ADC_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 800037e:	f000 f8a7 	bl	80004d0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000382:	2301      	movs	r3, #1
 8000384:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000386:	2301      	movs	r3, #1
 8000388:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800038a:	2305      	movs	r3, #5
 800038c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	4619      	mov	r1, r3
 8000392:	480d      	ldr	r0, [pc, #52]	; (80003c8 <MX_ADC1_Init+0x94>)
 8000394:	f000 ff7e 	bl	8001294 <HAL_ADC_ConfigChannel>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 800039e:	f000 f897 	bl	80004d0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80003a2:	2302      	movs	r3, #2
 80003a4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80003a6:	2302      	movs	r3, #2
 80003a8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4619      	mov	r1, r3
 80003ae:	4806      	ldr	r0, [pc, #24]	; (80003c8 <MX_ADC1_Init+0x94>)
 80003b0:	f000 ff70 	bl	8001294 <HAL_ADC_ConfigChannel>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC1_Init+0x8a>
	{
		Error_Handler();
 80003ba:	f000 f889 	bl	80004d0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000034 	.word	0x20000034
 80003cc:	40012400 	.word	0x40012400

080003d0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_DMA_Init+0x38>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <MX_DMA_Init+0x38>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_DMA_Init+0x38>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2100      	movs	r1, #0
 80003f2:	200b      	movs	r0, #11
 80003f4:	f001 fad5 	bl	80019a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003f8:	200b      	movs	r0, #11
 80003fa:	f001 faee 	bl	80019da <HAL_NVIC_EnableIRQ>

}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <MX_GPIO_Init+0xb8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a27      	ldr	r2, [pc, #156]	; (80004c4 <MX_GPIO_Init+0xb8>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <MX_GPIO_Init+0xb8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <MX_GPIO_Init+0xb8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a21      	ldr	r2, [pc, #132]	; (80004c4 <MX_GPIO_Init+0xb8>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <MX_GPIO_Init+0xb8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0308 	and.w	r3, r3, #8
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <MX_GPIO_Init+0xb8>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a1b      	ldr	r2, [pc, #108]	; (80004c4 <MX_GPIO_Init+0xb8>)
 8000456:	f043 0320 	orr.w	r3, r3, #32
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <MX_GPIO_Init+0xb8>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0320 	and.w	r3, r3, #32
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800046e:	4816      	ldr	r0, [pc, #88]	; (80004c8 <MX_GPIO_Init+0xbc>)
 8000470:	f001 ff78 	bl	8002364 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800047a:	4814      	ldr	r0, [pc, #80]	; (80004cc <MX_GPIO_Init+0xc0>)
 800047c:	f001 ff72 	bl	8002364 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000480:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000484:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	2301      	movs	r3, #1
 8000488:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2302      	movs	r3, #2
 8000490:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	480b      	ldr	r0, [pc, #44]	; (80004c8 <MX_GPIO_Init+0xbc>)
 800049a:	f001 fdf9 	bl	8002090 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800049e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80004a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_GPIO_Init+0xc0>)
 80004b8:	f001 fdea 	bl	8002090 <HAL_GPIO_Init>

}
 80004bc:	bf00      	nop
 80004be:	3720      	adds	r7, #32
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010c00 	.word	0x40010c00
 80004cc:	40011400 	.word	0x40011400

080004d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80004d6:	e7fe      	b.n	80004d6 <Error_Handler+0x6>

080004d8 <motors>:

}


void motors(uint8_t Direction_1, uint32_t step_1 ,uint8_t Direction_2, uint32_t step_2)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60b9      	str	r1, [r7, #8]
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	4603      	mov	r3, r0
 80004e4:	73fb      	strb	r3, [r7, #15]
 80004e6:	4613      	mov	r3, r2
 80004e8:	73bb      	strb	r3, [r7, #14]
	if(Direction_1==0 && i<step_1 && Direction_2==0 && i<step_2)
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d145      	bne.n	800057c <motors+0xa4>
 80004f0:	4ba5      	ldr	r3, [pc, #660]	; (8000788 <motors+0x2b0>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	68ba      	ldr	r2, [r7, #8]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d940      	bls.n	800057c <motors+0xa4>
 80004fa:	7bbb      	ldrb	r3, [r7, #14]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d13d      	bne.n	800057c <motors+0xa4>
 8000500:	4ba1      	ldr	r3, [pc, #644]	; (8000788 <motors+0x2b0>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	429a      	cmp	r2, r3
 8000508:	d938      	bls.n	800057c <motors+0xa4>
	{
		GPIOD->ODR = 0xC000;
 800050a:	4ba0      	ldr	r3, [pc, #640]	; (800078c <motors+0x2b4>)
 800050c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000510:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f000 fb36 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0xC000;
 8000518:	4b9d      	ldr	r3, [pc, #628]	; (8000790 <motors+0x2b8>)
 800051a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800051e:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fb2f 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x6000;
 8000526:	4b99      	ldr	r3, [pc, #612]	; (800078c <motors+0x2b4>)
 8000528:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800052c:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f000 fb28 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x6000;
 8000534:	4b96      	ldr	r3, [pc, #600]	; (8000790 <motors+0x2b8>)
 8000536:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800053a:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f000 fb21 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x3000;
 8000542:	4b92      	ldr	r3, [pc, #584]	; (800078c <motors+0x2b4>)
 8000544:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000548:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 800054a:	2001      	movs	r0, #1
 800054c:	f000 fb1a 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x3000;
 8000550:	4b8f      	ldr	r3, [pc, #572]	; (8000790 <motors+0x2b8>)
 8000552:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000556:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000558:	2001      	movs	r0, #1
 800055a:	f000 fb13 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x9000;
 800055e:	4b8b      	ldr	r3, [pc, #556]	; (800078c <motors+0x2b4>)
 8000560:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8000564:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000566:	2001      	movs	r0, #1
 8000568:	f000 fb0c 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x9000;
 800056c:	4b88      	ldr	r3, [pc, #544]	; (8000790 <motors+0x2b8>)
 800056e:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8000572:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f000 fb05 	bl	8000b84 <HAL_Delay>
 800057a:	e188      	b.n	800088e <motors+0x3b6>
	}
	else if(Direction_1==0 && i<step_1 && Direction_2==1 && i<step_2)
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d145      	bne.n	800060e <motors+0x136>
 8000582:	4b81      	ldr	r3, [pc, #516]	; (8000788 <motors+0x2b0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	429a      	cmp	r2, r3
 800058a:	d940      	bls.n	800060e <motors+0x136>
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d13d      	bne.n	800060e <motors+0x136>
 8000592:	4b7d      	ldr	r3, [pc, #500]	; (8000788 <motors+0x2b0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	d938      	bls.n	800060e <motors+0x136>
	{
		GPIOD->ODR = 0xC000;
 800059c:	4b7b      	ldr	r3, [pc, #492]	; (800078c <motors+0x2b4>)
 800059e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80005a2:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 faed 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x9000;
 80005aa:	4b79      	ldr	r3, [pc, #484]	; (8000790 <motors+0x2b8>)
 80005ac:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80005b0:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80005b2:	2001      	movs	r0, #1
 80005b4:	f000 fae6 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x6000;
 80005b8:	4b74      	ldr	r3, [pc, #464]	; (800078c <motors+0x2b4>)
 80005ba:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80005be:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 fadf 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x3000;
 80005c6:	4b72      	ldr	r3, [pc, #456]	; (8000790 <motors+0x2b8>)
 80005c8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80005cc:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 fad8 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x3000;
 80005d4:	4b6d      	ldr	r3, [pc, #436]	; (800078c <motors+0x2b4>)
 80005d6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80005da:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fad1 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x6000;
 80005e2:	4b6b      	ldr	r3, [pc, #428]	; (8000790 <motors+0x2b8>)
 80005e4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80005e8:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 faca 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x9000;
 80005f0:	4b66      	ldr	r3, [pc, #408]	; (800078c <motors+0x2b4>)
 80005f2:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80005f6:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 fac3 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0xC000;
 80005fe:	4b64      	ldr	r3, [pc, #400]	; (8000790 <motors+0x2b8>)
 8000600:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000604:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f000 fabc 	bl	8000b84 <HAL_Delay>
 800060c:	e13f      	b.n	800088e <motors+0x3b6>
	}
	else if(Direction_1==0 && i<step_1 && i>=step_2)
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d126      	bne.n	8000662 <motors+0x18a>
 8000614:	4b5c      	ldr	r3, [pc, #368]	; (8000788 <motors+0x2b0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	429a      	cmp	r2, r3
 800061c:	d921      	bls.n	8000662 <motors+0x18a>
 800061e:	4b5a      	ldr	r3, [pc, #360]	; (8000788 <motors+0x2b0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	d81c      	bhi.n	8000662 <motors+0x18a>
	{
		GPIOD->ODR = 0xC000;
 8000628:	4b58      	ldr	r3, [pc, #352]	; (800078c <motors+0x2b4>)
 800062a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800062e:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 8000630:	2002      	movs	r0, #2
 8000632:	f000 faa7 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x6000;
 8000636:	4b55      	ldr	r3, [pc, #340]	; (800078c <motors+0x2b4>)
 8000638:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800063c:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 800063e:	2002      	movs	r0, #2
 8000640:	f000 faa0 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x3000;
 8000644:	4b51      	ldr	r3, [pc, #324]	; (800078c <motors+0x2b4>)
 8000646:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800064a:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 800064c:	2002      	movs	r0, #2
 800064e:	f000 fa99 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x9000;
 8000652:	4b4e      	ldr	r3, [pc, #312]	; (800078c <motors+0x2b4>)
 8000654:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8000658:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 800065a:	2002      	movs	r0, #2
 800065c:	f000 fa92 	bl	8000b84 <HAL_Delay>
 8000660:	e115      	b.n	800088e <motors+0x3b6>

	}
	else if(Direction_1==1 && i<step_1 && Direction_2==0 && i<step_2)
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d145      	bne.n	80006f4 <motors+0x21c>
 8000668:	4b47      	ldr	r3, [pc, #284]	; (8000788 <motors+0x2b0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	429a      	cmp	r2, r3
 8000670:	d940      	bls.n	80006f4 <motors+0x21c>
 8000672:	7bbb      	ldrb	r3, [r7, #14]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d13d      	bne.n	80006f4 <motors+0x21c>
 8000678:	4b43      	ldr	r3, [pc, #268]	; (8000788 <motors+0x2b0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	429a      	cmp	r2, r3
 8000680:	d938      	bls.n	80006f4 <motors+0x21c>
	{
		GPIOD->ODR = 0x9000;
 8000682:	4b42      	ldr	r3, [pc, #264]	; (800078c <motors+0x2b4>)
 8000684:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8000688:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f000 fa7a 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0xC000;
 8000690:	4b3f      	ldr	r3, [pc, #252]	; (8000790 <motors+0x2b8>)
 8000692:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000696:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f000 fa73 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x3000;
 800069e:	4b3b      	ldr	r3, [pc, #236]	; (800078c <motors+0x2b4>)
 80006a0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80006a4:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 fa6c 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x6000;
 80006ac:	4b38      	ldr	r3, [pc, #224]	; (8000790 <motors+0x2b8>)
 80006ae:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80006b2:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fa65 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x6000;
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <motors+0x2b4>)
 80006bc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80006c0:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 fa5e 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x3000;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <motors+0x2b8>)
 80006ca:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80006ce:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f000 fa57 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0xC000;
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <motors+0x2b4>)
 80006d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80006dc:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fa50 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x9000;
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <motors+0x2b8>)
 80006e6:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80006ea:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 fa49 	bl	8000b84 <HAL_Delay>
 80006f2:	e0cc      	b.n	800088e <motors+0x3b6>

	}
	else if(Direction_1==1 && i<step_1 && Direction_2==1 && i<step_2)
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d14c      	bne.n	8000794 <motors+0x2bc>
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <motors+0x2b0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	429a      	cmp	r2, r3
 8000702:	d947      	bls.n	8000794 <motors+0x2bc>
 8000704:	7bbb      	ldrb	r3, [r7, #14]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d144      	bne.n	8000794 <motors+0x2bc>
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <motors+0x2b0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	429a      	cmp	r2, r3
 8000712:	d93f      	bls.n	8000794 <motors+0x2bc>
	{
		GPIOD->ODR = 0x9000;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <motors+0x2b4>)
 8000716:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800071a:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f000 fa31 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x9000;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <motors+0x2b8>)
 8000724:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8000728:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 800072a:	2001      	movs	r0, #1
 800072c:	f000 fa2a 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x3000;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <motors+0x2b4>)
 8000732:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000736:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000738:	2001      	movs	r0, #1
 800073a:	f000 fa23 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x3000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <motors+0x2b8>)
 8000740:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000744:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f000 fa1c 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x6000;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <motors+0x2b4>)
 800074e:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000752:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f000 fa15 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x6000;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <motors+0x2b8>)
 800075c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000760:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fa0e 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0xC000;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <motors+0x2b4>)
 800076a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800076e:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fa07 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0xC000;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <motors+0x2b8>)
 8000778:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800077c:	60da      	str	r2, [r3, #12]
		HAL_Delay(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f000 fa00 	bl	8000b84 <HAL_Delay>
 8000784:	e083      	b.n	800088e <motors+0x3b6>
 8000786:	bf00      	nop
 8000788:	20000028 	.word	0x20000028
 800078c:	40011400 	.word	0x40011400
 8000790:	40010c00 	.word	0x40010c00

	}
	else if(Direction_1==1 && i<step_1 && i>=step_2)
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d126      	bne.n	80007e8 <motors+0x310>
 800079a:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <motors+0x3c8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d921      	bls.n	80007e8 <motors+0x310>
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <motors+0x3c8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d81c      	bhi.n	80007e8 <motors+0x310>
	{
		GPIOD->ODR = 0x9000;
 80007ae:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <motors+0x3cc>)
 80007b0:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80007b4:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 80007b6:	2002      	movs	r0, #2
 80007b8:	f000 f9e4 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x3000;
 80007bc:	4b39      	ldr	r3, [pc, #228]	; (80008a4 <motors+0x3cc>)
 80007be:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80007c2:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 80007c4:	2002      	movs	r0, #2
 80007c6:	f000 f9dd 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0x6000;
 80007ca:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <motors+0x3cc>)
 80007cc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007d0:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 80007d2:	2002      	movs	r0, #2
 80007d4:	f000 f9d6 	bl	8000b84 <HAL_Delay>
		GPIOD->ODR = 0xC000;
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <motors+0x3cc>)
 80007da:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80007de:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 80007e0:	2002      	movs	r0, #2
 80007e2:	f000 f9cf 	bl	8000b84 <HAL_Delay>
 80007e6:	e052      	b.n	800088e <motors+0x3b6>

	}
	else if(i>=step_1 && Direction_2==0 && i<step_2)
 80007e8:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <motors+0x3c8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d824      	bhi.n	800083c <motors+0x364>
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d121      	bne.n	800083c <motors+0x364>
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <motors+0x3c8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d91c      	bls.n	800083c <motors+0x364>
	{
		GPIOB->ODR = 0xC000;
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <motors+0x3d0>)
 8000804:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000808:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 800080a:	2002      	movs	r0, #2
 800080c:	f000 f9ba 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x6000;
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <motors+0x3d0>)
 8000812:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000816:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 8000818:	2002      	movs	r0, #2
 800081a:	f000 f9b3 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x3000;
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <motors+0x3d0>)
 8000820:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000824:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 8000826:	2002      	movs	r0, #2
 8000828:	f000 f9ac 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x9000;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <motors+0x3d0>)
 800082e:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 8000832:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 8000834:	2002      	movs	r0, #2
 8000836:	f000 f9a5 	bl	8000b84 <HAL_Delay>
 800083a:	e028      	b.n	800088e <motors+0x3b6>

	}
	else if(i>=step_1 && Direction_2==1 && i<step_2)
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <motors+0x3c8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	429a      	cmp	r2, r3
 8000844:	d823      	bhi.n	800088e <motors+0x3b6>
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d120      	bne.n	800088e <motors+0x3b6>
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <motors+0x3c8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	429a      	cmp	r2, r3
 8000854:	d91b      	bls.n	800088e <motors+0x3b6>
	{
		GPIOB->ODR = 0x9000;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <motors+0x3d0>)
 8000858:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800085c:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 800085e:	2002      	movs	r0, #2
 8000860:	f000 f990 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x3000;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <motors+0x3d0>)
 8000866:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800086a:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 800086c:	2002      	movs	r0, #2
 800086e:	f000 f989 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0x6000;
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <motors+0x3d0>)
 8000874:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000878:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 800087a:	2002      	movs	r0, #2
 800087c:	f000 f982 	bl	8000b84 <HAL_Delay>
		GPIOB->ODR = 0xC000;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <motors+0x3d0>)
 8000882:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000886:	60da      	str	r2, [r3, #12]
		HAL_Delay(2);
 8000888:	2002      	movs	r0, #2
 800088a:	f000 f97b 	bl	8000b84 <HAL_Delay>

	}
	i++;
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <motors+0x3c8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	4a02      	ldr	r2, [pc, #8]	; (80008a0 <motors+0x3c8>)
 8000896:	6013      	str	r3, [r2, #0]

}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000028 	.word	0x20000028
 80008a4:	40011400 	.word	0x40011400
 80008a8:	40010c00 	.word	0x40010c00

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_MspInit+0x5c>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a14      	ldr	r2, [pc, #80]	; (8000908 <HAL_MspInit+0x5c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_MspInit+0x5c>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x5c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_MspInit+0x5c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_MspInit+0x5c>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_MspInit+0x60>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_MspInit+0x60>)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000
 800090c:	40010000 	.word	0x40010000

08000910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a2c      	ldr	r2, [pc, #176]	; (80009dc <HAL_ADC_MspInit+0xcc>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d151      	bne.n	80009d4 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <HAL_ADC_MspInit+0xd0>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <HAL_ADC_MspInit+0xd0>)
 8000936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <HAL_ADC_MspInit+0xd0>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <HAL_ADC_MspInit+0xd0>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a24      	ldr	r2, [pc, #144]	; (80009e0 <HAL_ADC_MspInit+0xd0>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <HAL_ADC_MspInit+0xd0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000960:	2306      	movs	r3, #6
 8000962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000964:	2303      	movs	r3, #3
 8000966:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4619      	mov	r1, r3
 800096e:	481d      	ldr	r0, [pc, #116]	; (80009e4 <HAL_ADC_MspInit+0xd4>)
 8000970:	f001 fb8e 	bl	8002090 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <HAL_ADC_MspInit+0xd8>)
 8000976:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <HAL_ADC_MspInit+0xdc>)
 8000978:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <HAL_ADC_MspInit+0xd8>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <HAL_ADC_MspInit+0xd8>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_ADC_MspInit+0xd8>)
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_ADC_MspInit+0xd8>)
 800098e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000992:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_ADC_MspInit+0xd8>)
 8000996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800099a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_ADC_MspInit+0xd8>)
 800099e:	2220      	movs	r2, #32
 80009a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_ADC_MspInit+0xd8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009a8:	480f      	ldr	r0, [pc, #60]	; (80009e8 <HAL_ADC_MspInit+0xd8>)
 80009aa:	f001 f831 	bl	8001a10 <HAL_DMA_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80009b4:	f7ff fd8c 	bl	80004d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <HAL_ADC_MspInit+0xd8>)
 80009bc:	621a      	str	r2, [r3, #32]
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_ADC_MspInit+0xd8>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2012      	movs	r0, #18
 80009ca:	f000 ffea 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80009ce:	2012      	movs	r0, #18
 80009d0:	f001 f803 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40012400 	.word	0x40012400
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010800 	.word	0x40010800
 80009e8:	20000064 	.word	0x20000064
 80009ec:	40020008 	.word	0x40020008

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr

08000a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr

08000a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a36:	f000 f889 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <DMA1_Channel1_IRQHandler+0x10>)
 8000a46:	f001 f8b9 	bl	8001bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000064 	.word	0x20000064

08000a54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <ADC1_2_IRQHandler+0x10>)
 8000a5a:	f000 fb33 	bl	80010c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000034 	.word	0x20000034

08000a68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <Reset_Handler>:
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <LoopFillZerobss+0x12>)
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x1a>)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:
 8000a7e:	58d4      	ldr	r4, [r2, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:
 8000a84:	18c4      	adds	r4, r0, r3
 8000a86:	428c      	cmp	r4, r1
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopFillZerobss+0x1e>)
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	; (8000ab8 <LoopFillZerobss+0x22>)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:
 8000a96:	42a2      	cmp	r2, r4
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>
 8000a9a:	f7ff ffe5 	bl	8000a68 <SystemInit>
 8000a9e:	f002 fa1f 	bl	8002ee0 <__libc_init_array>
 8000aa2:	f7ff fbbf 	bl	8000224 <main>
 8000aa6:	4770      	bx	lr
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	2000000c 	.word	0x2000000c
 8000ab0:	08002f98 	.word	0x08002f98
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	200000b0 	.word	0x200000b0

08000abc <ADC3_IRQHandler>:
 8000abc:	e7fe      	b.n	8000abc <ADC3_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x28>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x28>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 ff5b 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fee6 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 ff73 	bl	80019f6 <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 ff3b 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x1c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x20>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <HAL_IncTick+0x20>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	200000ac 	.word	0x200000ac

08000b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <HAL_GetTick+0x10>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	200000ac 	.word	0x200000ac

08000b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b8c:	f7ff fff0 	bl	8000b70 <HAL_GetTick>
 8000b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9c:	d005      	beq.n	8000baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_Delay+0x40>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000baa:	bf00      	nop
 8000bac:	f7ff ffe0 	bl	8000b70 <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d8f7      	bhi.n	8000bac <HAL_Delay+0x28>
  {
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e0ce      	b.n	8000d88 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff fe82 	bl	8000910 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f000 fc93 	bl	8001538 <ADC_ConversionStop_Disable>
 8000c12:	4603      	mov	r3, r0
 8000c14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 80a9 	bne.w	8000d76 <HAL_ADC_Init+0x1ae>
 8000c24:	7dfb      	ldrb	r3, [r7, #23]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 80a5 	bne.w	8000d76 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c34:	f023 0302 	bic.w	r3, r3, #2
 8000c38:	f043 0202 	orr.w	r2, r3, #2
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4951      	ldr	r1, [pc, #324]	; (8000d90 <HAL_ADC_Init+0x1c8>)
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d10a      	bne.n	8000c64 <HAL_ADC_Init+0x9c>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000c56:	d002      	beq.n	8000c5e <HAL_ADC_Init+0x96>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	e004      	b.n	8000c68 <HAL_ADC_Init+0xa0>
 8000c5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c62:	e001      	b.n	8000c68 <HAL_ADC_Init+0xa0>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7b1b      	ldrb	r3, [r3, #12]
 8000c6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c80:	d003      	beq.n	8000c8a <HAL_ADC_Init+0xc2>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d102      	bne.n	8000c90 <HAL_ADC_Init+0xc8>
 8000c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8e:	e000      	b.n	8000c92 <HAL_ADC_Init+0xca>
 8000c90:	2300      	movs	r3, #0
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7d1b      	ldrb	r3, [r3, #20]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d119      	bne.n	8000cd4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7b1b      	ldrb	r3, [r3, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d109      	bne.n	8000cbc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	035a      	lsls	r2, r3, #13
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	e00b      	b.n	8000cd4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc0:	f043 0220 	orr.w	r2, r3, #32
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	f043 0201 	orr.w	r2, r3, #1
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <HAL_ADC_Init+0x1cc>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6812      	ldr	r2, [r2, #0]
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d04:	d003      	beq.n	8000d0e <HAL_ADC_Init+0x146>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d104      	bne.n	8000d18 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	051b      	lsls	r3, r3, #20
 8000d16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_ADC_Init+0x1d0>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d10b      	bne.n	8000d54 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	f023 0303 	bic.w	r3, r3, #3
 8000d4a:	f043 0201 	orr.w	r2, r3, #1
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d52:	e018      	b.n	8000d86 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d58:	f023 0312 	bic.w	r3, r3, #18
 8000d5c:	f043 0210 	orr.w	r2, r3, #16
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d68:	f043 0201 	orr.w	r2, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d74:	e007      	b.n	8000d86 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	f043 0210 	orr.w	r2, r3, #16
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40013c00 	.word	0x40013c00
 8000d94:	ffe1f7fd 	.word	0xffe1f7fd
 8000d98:	ff1f0efe 	.word	0xff1f0efe

08000d9c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d101      	bne.n	8000db6 <HAL_ADC_Start_IT+0x1a>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e0a0      	b.n	8000ef8 <HAL_ADC_Start_IT+0x15c>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fb60 	bl	8001484 <ADC_Enable>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f040 808f 	bne.w	8000eee <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000dd8:	f023 0301 	bic.w	r3, r3, #1
 8000ddc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a45      	ldr	r2, [pc, #276]	; (8000f00 <HAL_ADC_Start_IT+0x164>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d105      	bne.n	8000dfa <HAL_ADC_Start_IT+0x5e>
 8000dee:	4b45      	ldr	r3, [pc, #276]	; (8000f04 <HAL_ADC_Start_IT+0x168>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d115      	bne.n	8000e26 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d026      	beq.n	8000e62 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e24:	e01d      	b.n	8000e62 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a33      	ldr	r2, [pc, #204]	; (8000f04 <HAL_ADC_Start_IT+0x168>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d004      	beq.n	8000e46 <HAL_ADC_Start_IT+0xaa>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <HAL_ADC_Start_IT+0x164>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10d      	bne.n	8000e62 <HAL_ADC_Start_IT+0xc6>
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <HAL_ADC_Start_IT+0x168>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d007      	beq.n	8000e62 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	f023 0206 	bic.w	r2, r3, #6
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e7a:	e002      	b.n	8000e82 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f06f 0202 	mvn.w	r2, #2
 8000e92:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0220 	orr.w	r2, r2, #32
 8000ea2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000eae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eb2:	d113      	bne.n	8000edc <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000eb8:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <HAL_ADC_Start_IT+0x164>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d105      	bne.n	8000eca <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_ADC_Start_IT+0x168>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d108      	bne.n	8000edc <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	e00c      	b.n	8000ef6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	e003      	b.n	8000ef6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40012800 	.word	0x40012800
 8000f04:	40012400 	.word	0x40012400

08000f08 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a64      	ldr	r2, [pc, #400]	; (80010b0 <HAL_ADC_Start_DMA+0x1a8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d004      	beq.n	8000f2c <HAL_ADC_Start_DMA+0x24>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a63      	ldr	r2, [pc, #396]	; (80010b4 <HAL_ADC_Start_DMA+0x1ac>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d106      	bne.n	8000f3a <HAL_ADC_Start_DMA+0x32>
 8000f2c:	4b60      	ldr	r3, [pc, #384]	; (80010b0 <HAL_ADC_Start_DMA+0x1a8>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f040 80b3 	bne.w	80010a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d101      	bne.n	8000f48 <HAL_ADC_Start_DMA+0x40>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e0ae      	b.n	80010a6 <HAL_ADC_Start_DMA+0x19e>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f000 fa97 	bl	8001484 <ADC_Enable>
 8000f56:	4603      	mov	r3, r0
 8000f58:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f040 809a 	bne.w	8001096 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a4e      	ldr	r2, [pc, #312]	; (80010b4 <HAL_ADC_Start_DMA+0x1ac>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d105      	bne.n	8000f8c <HAL_ADC_Start_DMA+0x84>
 8000f80:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <HAL_ADC_Start_DMA+0x1a8>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d115      	bne.n	8000fb8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d026      	beq.n	8000ff4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fb6:	e01d      	b.n	8000ff4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a39      	ldr	r2, [pc, #228]	; (80010b0 <HAL_ADC_Start_DMA+0x1a8>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d004      	beq.n	8000fd8 <HAL_ADC_Start_DMA+0xd0>
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a38      	ldr	r2, [pc, #224]	; (80010b4 <HAL_ADC_Start_DMA+0x1ac>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d10d      	bne.n	8000ff4 <HAL_ADC_Start_DMA+0xec>
 8000fd8:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <HAL_ADC_Start_DMA+0x1a8>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d007      	beq.n	8000ff4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	f023 0206 	bic.w	r2, r3, #6
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
 800100c:	e002      	b.n	8001014 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a25      	ldr	r2, [pc, #148]	; (80010b8 <HAL_ADC_Start_DMA+0x1b0>)
 8001022:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4a24      	ldr	r2, [pc, #144]	; (80010bc <HAL_ADC_Start_DMA+0x1b4>)
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <HAL_ADC_Start_DMA+0x1b8>)
 8001032:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f06f 0202 	mvn.w	r2, #2
 800103c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800104c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6a18      	ldr	r0, [r3, #32]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	334c      	adds	r3, #76	; 0x4c
 8001058:	4619      	mov	r1, r3
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f000 fd4d 	bl	8001afc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800106c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001070:	d108      	bne.n	8001084 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001080:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001082:	e00f      	b.n	80010a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001092:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001094:	e006      	b.n	80010a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800109e:	e001      	b.n	80010a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40012400 	.word	0x40012400
 80010b4:	40012800 	.word	0x40012800
 80010b8:	080015bb 	.word	0x080015bb
 80010bc:	08001637 	.word	0x08001637
 80010c0:	08001653 	.word	0x08001653

080010c4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0320 	and.w	r3, r3, #32
 80010d6:	2b20      	cmp	r3, #32
 80010d8:	d140      	bne.n	800115c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d139      	bne.n	800115c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d105      	bne.n	8001100 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800110a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800110e:	d11d      	bne.n	800114c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001114:	2b00      	cmp	r3, #0
 8001116:	d119      	bne.n	800114c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0220 	bic.w	r2, r2, #32
 8001126:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d105      	bne.n	800114c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f87c 	bl	800124a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f06f 0212 	mvn.w	r2, #18
 800115a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	2b80      	cmp	r3, #128	; 0x80
 8001168:	d14f      	bne.n	800120a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b04      	cmp	r3, #4
 8001176:	d148      	bne.n	800120a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	d105      	bne.n	8001190 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800119a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800119e:	d012      	beq.n	80011c6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d125      	bne.n	80011fa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80011b8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011bc:	d11d      	bne.n	80011fa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d119      	bne.n	80011fa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011d4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d105      	bne.n	80011fa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f2:	f043 0201 	orr.w	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 faf0 	bl	80017e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f06f 020c 	mvn.w	r2, #12
 8001208:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001214:	2b40      	cmp	r3, #64	; 0x40
 8001216:	d114      	bne.n	8001242 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10d      	bne.n	8001242 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f81b 	bl	800126e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f06f 0201 	mvn.w	r2, #1
 8001240:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
	...

08001294 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x20>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e0dc      	b.n	800146e <HAL_ADC_ConfigChannel+0x1da>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b06      	cmp	r3, #6
 80012c2:	d81c      	bhi.n	80012fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	3b05      	subs	r3, #5
 80012d6:	221f      	movs	r2, #31
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	4019      	ands	r1, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	3b05      	subs	r3, #5
 80012f0:	fa00 f203 	lsl.w	r2, r0, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	635a      	str	r2, [r3, #52]	; 0x34
 80012fc:	e03c      	b.n	8001378 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b0c      	cmp	r3, #12
 8001304:	d81c      	bhi.n	8001340 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	3b23      	subs	r3, #35	; 0x23
 8001318:	221f      	movs	r2, #31
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	4019      	ands	r1, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3b23      	subs	r3, #35	; 0x23
 8001332:	fa00 f203 	lsl.w	r2, r0, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	631a      	str	r2, [r3, #48]	; 0x30
 800133e:	e01b      	b.n	8001378 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	3b41      	subs	r3, #65	; 0x41
 8001352:	221f      	movs	r2, #31
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	4019      	ands	r1, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	3b41      	subs	r3, #65	; 0x41
 800136c:	fa00 f203 	lsl.w	r2, r0, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b09      	cmp	r3, #9
 800137e:	d91c      	bls.n	80013ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68d9      	ldr	r1, [r3, #12]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	3b1e      	subs	r3, #30
 8001392:	2207      	movs	r2, #7
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	4019      	ands	r1, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	6898      	ldr	r0, [r3, #8]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	3b1e      	subs	r3, #30
 80013ac:	fa00 f203 	lsl.w	r2, r0, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	e019      	b.n	80013ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6919      	ldr	r1, [r3, #16]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	2207      	movs	r2, #7
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	4019      	ands	r1, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	6898      	ldr	r0, [r3, #8]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	fa00 f203 	lsl.w	r2, r0, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b10      	cmp	r3, #16
 80013f4:	d003      	beq.n	80013fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013fa:	2b11      	cmp	r3, #17
 80013fc:	d132      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_ADC_ConfigChannel+0x1e4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d125      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d126      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001424:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b10      	cmp	r3, #16
 800142c:	d11a      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_ADC_ConfigChannel+0x1e8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <HAL_ADC_ConfigChannel+0x1ec>)
 8001434:	fba2 2303 	umull	r2, r3, r2, r3
 8001438:	0c9a      	lsrs	r2, r3, #18
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001444:	e002      	b.n	800144c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	3b01      	subs	r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f9      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x1b2>
 8001452:	e007      	b.n	8001464 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	f043 0220 	orr.w	r2, r3, #32
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800146c:	7bfb      	ldrb	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40012400 	.word	0x40012400
 800147c:	20000000 	.word	0x20000000
 8001480:	431bde83 	.word	0x431bde83

08001484 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d040      	beq.n	8001524 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0201 	orr.w	r2, r2, #1
 80014b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <ADC_Enable+0xac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a1f      	ldr	r2, [pc, #124]	; (8001534 <ADC_Enable+0xb0>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	0c9b      	lsrs	r3, r3, #18
 80014be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014c0:	e002      	b.n	80014c8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f9      	bne.n	80014c2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ce:	f7ff fb4f 	bl	8000b70 <HAL_GetTick>
 80014d2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014d4:	e01f      	b.n	8001516 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014d6:	f7ff fb4b 	bl	8000b70 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d918      	bls.n	8001516 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d011      	beq.n	8001516 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	f043 0210 	orr.w	r2, r3, #16
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	f043 0201 	orr.w	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e007      	b.n	8001526 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b01      	cmp	r3, #1
 8001522:	d1d8      	bne.n	80014d6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000
 8001534:	431bde83 	.word	0x431bde83

08001538 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b01      	cmp	r3, #1
 8001550:	d12e      	bne.n	80015b0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001562:	f7ff fb05 	bl	8000b70 <HAL_GetTick>
 8001566:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001568:	e01b      	b.n	80015a2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800156a:	f7ff fb01 	bl	8000b70 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d914      	bls.n	80015a2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d10d      	bne.n	80015a2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	f043 0210 	orr.w	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e007      	b.n	80015b2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d0dc      	beq.n	800156a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d127      	bne.n	8001624 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015ee:	d115      	bne.n	800161c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d111      	bne.n	800161c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d105      	bne.n	800161c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	f043 0201 	orr.w	r2, r3, #1
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff fe14 	bl	800124a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001622:	e004      	b.n	800162e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff fe09 	bl	800125c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	f043 0204 	orr.w	r2, r3, #4
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff fe01 	bl	8001280 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_ADCEx_Calibration_Start+0x1e>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e095      	b.n	80017d2 <HAL_ADCEx_Calibration_Start+0x14a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ff42 	bl	8001538 <ADC_ConversionStop_Disable>
 80016b4:	4603      	mov	r3, r0
 80016b6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 8084 	bne.w	80017c8 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016c8:	f023 0302 	bic.w	r3, r3, #2
 80016cc:	f043 0202 	orr.w	r2, r3, #2
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016d4:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_ADCEx_Calibration_Start+0x154>)
 80016d6:	681c      	ldr	r4, [r3, #0]
 80016d8:	2002      	movs	r0, #2
 80016da:	f001 fb19 	bl	8002d10 <HAL_RCCEx_GetPeriphCLKFreq>
 80016de:	4603      	mov	r3, r0
 80016e0:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80016e4:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80016e6:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80016e8:	e002      	b.n	80016f0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f9      	bne.n	80016ea <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fec4 	bl	8001484 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0208 	orr.w	r2, r2, #8
 800170a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800170c:	f7ff fa30 	bl	8000b70 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001712:	e01b      	b.n	800174c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001714:	f7ff fa2c 	bl	8000b70 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b0a      	cmp	r3, #10
 8001720:	d914      	bls.n	800174c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00d      	beq.n	800174c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f023 0312 	bic.w	r3, r3, #18
 8001738:	f043 0210 	orr.w	r2, r3, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e042      	b.n	80017d2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1dc      	bne.n	8001714 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0204 	orr.w	r2, r2, #4
 8001768:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800176a:	f7ff fa01 	bl	8000b70 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001770:	e01b      	b.n	80017aa <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001772:	f7ff f9fd 	bl	8000b70 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b0a      	cmp	r3, #10
 800177e:	d914      	bls.n	80017aa <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00d      	beq.n	80017aa <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	f023 0312 	bic.w	r3, r3, #18
 8001796:	f043 0210 	orr.w	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e013      	b.n	80017d2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1dc      	bne.n	8001772 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f023 0303 	bic.w	r3, r3, #3
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd90      	pop	{r4, r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000000 	.word	0x20000000

080017e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <__NVIC_GetPriorityGrouping+0x18>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0307 	and.w	r3, r3, #7
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	db0b      	blt.n	8001882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	f003 021f 	and.w	r2, r3, #31
 8001870:	4906      	ldr	r1, [pc, #24]	; (800188c <__NVIC_EnableIRQ+0x34>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	2001      	movs	r0, #1
 800187a:	fa00 f202 	lsl.w	r2, r0, r2
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff90 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff2d 	bl	80017f4 <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff42 	bl	800183c <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff90 	bl	80018e4 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5f 	bl	8001890 <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff35 	bl	8001858 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e059      	b.n	8001ada <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_DMA_Init+0xd4>)
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d80f      	bhi.n	8001a52 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_DMA_Init+0xd8>)
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	; (8001aec <HAL_DMA_Init+0xdc>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	009a      	lsls	r2, r3, #2
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a28      	ldr	r2, [pc, #160]	; (8001af0 <HAL_DMA_Init+0xe0>)
 8001a4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a50:	e00e      	b.n	8001a70 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <HAL_DMA_Init+0xe4>)
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a23      	ldr	r2, [pc, #140]	; (8001aec <HAL_DMA_Init+0xdc>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	009a      	lsls	r2, r3, #2
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <HAL_DMA_Init+0xe8>)
 8001a6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40020407 	.word	0x40020407
 8001ae8:	bffdfff8 	.word	0xbffdfff8
 8001aec:	cccccccd 	.word	0xcccccccd
 8001af0:	40020000 	.word	0x40020000
 8001af4:	bffdfbf8 	.word	0xbffdfbf8
 8001af8:	40020400 	.word	0x40020400

08001afc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_DMA_Start_IT+0x20>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e04a      	b.n	8001bb2 <HAL_DMA_Start_IT+0xb6>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d13a      	bne.n	8001ba4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2202      	movs	r2, #2
 8001b32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0201 	bic.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 fa6e 	bl	8002034 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 020e 	orr.w	r2, r2, #14
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e00f      	b.n	8001b92 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0204 	bic.w	r2, r2, #4
 8001b80:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 020a 	orr.w	r2, r2, #10
 8001b90:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0201 	orr.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e005      	b.n	8001bb0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bac:	2302      	movs	r3, #2
 8001bae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2204      	movs	r2, #4
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80d6 	beq.w	8001d92 <HAL_DMA_IRQHandler+0x1d6>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80d0 	beq.w	8001d92 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0204 	bic.w	r2, r2, #4
 8001c0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b9b      	ldr	r3, [pc, #620]	; (8001e84 <HAL_DMA_IRQHandler+0x2c8>)
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d958      	bls.n	8001cce <HAL_DMA_IRQHandler+0x112>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a99      	ldr	r2, [pc, #612]	; (8001e88 <HAL_DMA_IRQHandler+0x2cc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d04f      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x10a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a98      	ldr	r2, [pc, #608]	; (8001e8c <HAL_DMA_IRQHandler+0x2d0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d048      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x106>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a96      	ldr	r2, [pc, #600]	; (8001e90 <HAL_DMA_IRQHandler+0x2d4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d040      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x100>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a95      	ldr	r2, [pc, #596]	; (8001e94 <HAL_DMA_IRQHandler+0x2d8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d038      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0xfa>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a93      	ldr	r2, [pc, #588]	; (8001e98 <HAL_DMA_IRQHandler+0x2dc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d030      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0xf4>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a92      	ldr	r2, [pc, #584]	; (8001e9c <HAL_DMA_IRQHandler+0x2e0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d028      	beq.n	8001caa <HAL_DMA_IRQHandler+0xee>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a89      	ldr	r2, [pc, #548]	; (8001e84 <HAL_DMA_IRQHandler+0x2c8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d020      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0xe8>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a8e      	ldr	r2, [pc, #568]	; (8001ea0 <HAL_DMA_IRQHandler+0x2e4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d019      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0xe4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a8c      	ldr	r2, [pc, #560]	; (8001ea4 <HAL_DMA_IRQHandler+0x2e8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d012      	beq.n	8001c9c <HAL_DMA_IRQHandler+0xe0>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a8b      	ldr	r2, [pc, #556]	; (8001ea8 <HAL_DMA_IRQHandler+0x2ec>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d00a      	beq.n	8001c96 <HAL_DMA_IRQHandler+0xda>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a89      	ldr	r2, [pc, #548]	; (8001eac <HAL_DMA_IRQHandler+0x2f0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d102      	bne.n	8001c90 <HAL_DMA_IRQHandler+0xd4>
 8001c8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c8e:	e01b      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x10c>
 8001c90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c94:	e018      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x10c>
 8001c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9a:	e015      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x10c>
 8001c9c:	2340      	movs	r3, #64	; 0x40
 8001c9e:	e013      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x10c>
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	e011      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x10c>
 8001ca4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ca8:	e00e      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x10c>
 8001caa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cae:	e00b      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x10c>
 8001cb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001cb4:	e008      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x10c>
 8001cb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cba:	e005      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x10c>
 8001cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc0:	e002      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x10c>
 8001cc2:	2340      	movs	r3, #64	; 0x40
 8001cc4:	e000      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x10c>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	4a79      	ldr	r2, [pc, #484]	; (8001eb0 <HAL_DMA_IRQHandler+0x2f4>)
 8001cca:	6053      	str	r3, [r2, #4]
 8001ccc:	e057      	b.n	8001d7e <HAL_DMA_IRQHandler+0x1c2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6d      	ldr	r2, [pc, #436]	; (8001e88 <HAL_DMA_IRQHandler+0x2cc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d04f      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x1bc>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6b      	ldr	r2, [pc, #428]	; (8001e8c <HAL_DMA_IRQHandler+0x2d0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d048      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x1b8>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6a      	ldr	r2, [pc, #424]	; (8001e90 <HAL_DMA_IRQHandler+0x2d4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d040      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x1b2>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <HAL_DMA_IRQHandler+0x2d8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d038      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x1ac>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <HAL_DMA_IRQHandler+0x2dc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d030      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x1a6>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a65      	ldr	r2, [pc, #404]	; (8001e9c <HAL_DMA_IRQHandler+0x2e0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d028      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x1a0>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <HAL_DMA_IRQHandler+0x2c8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d020      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x19a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a61      	ldr	r2, [pc, #388]	; (8001ea0 <HAL_DMA_IRQHandler+0x2e4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x196>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a60      	ldr	r2, [pc, #384]	; (8001ea4 <HAL_DMA_IRQHandler+0x2e8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d012      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x192>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a5e      	ldr	r2, [pc, #376]	; (8001ea8 <HAL_DMA_IRQHandler+0x2ec>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00a      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x18c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a5d      	ldr	r2, [pc, #372]	; (8001eac <HAL_DMA_IRQHandler+0x2f0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d102      	bne.n	8001d42 <HAL_DMA_IRQHandler+0x186>
 8001d3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d40:	e01b      	b.n	8001d7a <HAL_DMA_IRQHandler+0x1be>
 8001d42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d46:	e018      	b.n	8001d7a <HAL_DMA_IRQHandler+0x1be>
 8001d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4c:	e015      	b.n	8001d7a <HAL_DMA_IRQHandler+0x1be>
 8001d4e:	2340      	movs	r3, #64	; 0x40
 8001d50:	e013      	b.n	8001d7a <HAL_DMA_IRQHandler+0x1be>
 8001d52:	2304      	movs	r3, #4
 8001d54:	e011      	b.n	8001d7a <HAL_DMA_IRQHandler+0x1be>
 8001d56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d5a:	e00e      	b.n	8001d7a <HAL_DMA_IRQHandler+0x1be>
 8001d5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d60:	e00b      	b.n	8001d7a <HAL_DMA_IRQHandler+0x1be>
 8001d62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d66:	e008      	b.n	8001d7a <HAL_DMA_IRQHandler+0x1be>
 8001d68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d6c:	e005      	b.n	8001d7a <HAL_DMA_IRQHandler+0x1be>
 8001d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d72:	e002      	b.n	8001d7a <HAL_DMA_IRQHandler+0x1be>
 8001d74:	2340      	movs	r3, #64	; 0x40
 8001d76:	e000      	b.n	8001d7a <HAL_DMA_IRQHandler+0x1be>
 8001d78:	2304      	movs	r3, #4
 8001d7a:	4a4e      	ldr	r2, [pc, #312]	; (8001eb4 <HAL_DMA_IRQHandler+0x2f8>)
 8001d7c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8136 	beq.w	8001ff4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d90:	e130      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2202      	movs	r2, #2
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80f8 	beq.w	8001f94 <HAL_DMA_IRQHandler+0x3d8>
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80f2 	beq.w	8001f94 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 020a 	bic.w	r2, r2, #10
 8001dcc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <HAL_DMA_IRQHandler+0x2c8>)
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d973      	bls.n	8001eca <HAL_DMA_IRQHandler+0x30e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <HAL_DMA_IRQHandler+0x2cc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d06a      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x306>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <HAL_DMA_IRQHandler+0x2d0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d063      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x302>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <HAL_DMA_IRQHandler+0x2d4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d05b      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x2fc>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <HAL_DMA_IRQHandler+0x2d8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d038      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x2c0>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <HAL_DMA_IRQHandler+0x2dc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d030      	beq.n	8001e76 <HAL_DMA_IRQHandler+0x2ba>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a20      	ldr	r2, [pc, #128]	; (8001e9c <HAL_DMA_IRQHandler+0x2e0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d028      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x2b4>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_DMA_IRQHandler+0x2c8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d020      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x2ae>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <HAL_DMA_IRQHandler+0x2e4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d019      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x2aa>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_DMA_IRQHandler+0x2e8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d012      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x2a6>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_DMA_IRQHandler+0x2ec>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00a      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x2a0>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a18      	ldr	r2, [pc, #96]	; (8001eac <HAL_DMA_IRQHandler+0x2f0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d102      	bne.n	8001e56 <HAL_DMA_IRQHandler+0x29a>
 8001e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e54:	e036      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x308>
 8001e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5a:	e033      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x308>
 8001e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e60:	e030      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x308>
 8001e62:	2320      	movs	r3, #32
 8001e64:	e02e      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x308>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e02c      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x308>
 8001e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6e:	e029      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x308>
 8001e70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e74:	e026      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x308>
 8001e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e7a:	e023      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x308>
 8001e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e80:	e020      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x308>
 8001e82:	bf00      	nop
 8001e84:	40020080 	.word	0x40020080
 8001e88:	40020008 	.word	0x40020008
 8001e8c:	4002001c 	.word	0x4002001c
 8001e90:	40020030 	.word	0x40020030
 8001e94:	40020044 	.word	0x40020044
 8001e98:	40020058 	.word	0x40020058
 8001e9c:	4002006c 	.word	0x4002006c
 8001ea0:	40020408 	.word	0x40020408
 8001ea4:	4002041c 	.word	0x4002041c
 8001ea8:	40020430 	.word	0x40020430
 8001eac:	40020444 	.word	0x40020444
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebc:	e002      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x308>
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	e000      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x308>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	4a4e      	ldr	r2, [pc, #312]	; (8002000 <HAL_DMA_IRQHandler+0x444>)
 8001ec6:	6053      	str	r3, [r2, #4]
 8001ec8:	e057      	b.n	8001f7a <HAL_DMA_IRQHandler+0x3be>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a4d      	ldr	r2, [pc, #308]	; (8002004 <HAL_DMA_IRQHandler+0x448>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d04f      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x3b8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a4b      	ldr	r2, [pc, #300]	; (8002008 <HAL_DMA_IRQHandler+0x44c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d048      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x3b4>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a4a      	ldr	r2, [pc, #296]	; (800200c <HAL_DMA_IRQHandler+0x450>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d040      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x3ae>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a48      	ldr	r2, [pc, #288]	; (8002010 <HAL_DMA_IRQHandler+0x454>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d038      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x3a8>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a47      	ldr	r2, [pc, #284]	; (8002014 <HAL_DMA_IRQHandler+0x458>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d030      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x3a2>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a45      	ldr	r2, [pc, #276]	; (8002018 <HAL_DMA_IRQHandler+0x45c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d028      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x39c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a44      	ldr	r2, [pc, #272]	; (800201c <HAL_DMA_IRQHandler+0x460>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d020      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x396>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a42      	ldr	r2, [pc, #264]	; (8002020 <HAL_DMA_IRQHandler+0x464>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x392>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a41      	ldr	r2, [pc, #260]	; (8002024 <HAL_DMA_IRQHandler+0x468>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d012      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x38e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a3f      	ldr	r2, [pc, #252]	; (8002028 <HAL_DMA_IRQHandler+0x46c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x388>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a3e      	ldr	r2, [pc, #248]	; (800202c <HAL_DMA_IRQHandler+0x470>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d102      	bne.n	8001f3e <HAL_DMA_IRQHandler+0x382>
 8001f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3c:	e01b      	b.n	8001f76 <HAL_DMA_IRQHandler+0x3ba>
 8001f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f42:	e018      	b.n	8001f76 <HAL_DMA_IRQHandler+0x3ba>
 8001f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f48:	e015      	b.n	8001f76 <HAL_DMA_IRQHandler+0x3ba>
 8001f4a:	2320      	movs	r3, #32
 8001f4c:	e013      	b.n	8001f76 <HAL_DMA_IRQHandler+0x3ba>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e011      	b.n	8001f76 <HAL_DMA_IRQHandler+0x3ba>
 8001f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f56:	e00e      	b.n	8001f76 <HAL_DMA_IRQHandler+0x3ba>
 8001f58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f5c:	e00b      	b.n	8001f76 <HAL_DMA_IRQHandler+0x3ba>
 8001f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f62:	e008      	b.n	8001f76 <HAL_DMA_IRQHandler+0x3ba>
 8001f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f68:	e005      	b.n	8001f76 <HAL_DMA_IRQHandler+0x3ba>
 8001f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6e:	e002      	b.n	8001f76 <HAL_DMA_IRQHandler+0x3ba>
 8001f70:	2320      	movs	r3, #32
 8001f72:	e000      	b.n	8001f76 <HAL_DMA_IRQHandler+0x3ba>
 8001f74:	2302      	movs	r3, #2
 8001f76:	4a2e      	ldr	r2, [pc, #184]	; (8002030 <HAL_DMA_IRQHandler+0x474>)
 8001f78:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d034      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f92:	e02f      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	2208      	movs	r2, #8
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d028      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x43a>
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d023      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 020e 	bic.w	r2, r2, #14
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fcc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
    }
  }
  return;
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
}
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40020400 	.word	0x40020400
 8002004:	40020008 	.word	0x40020008
 8002008:	4002001c 	.word	0x4002001c
 800200c:	40020030 	.word	0x40020030
 8002010:	40020044 	.word	0x40020044
 8002014:	40020058 	.word	0x40020058
 8002018:	4002006c 	.word	0x4002006c
 800201c:	40020080 	.word	0x40020080
 8002020:	40020408 	.word	0x40020408
 8002024:	4002041c 	.word	0x4002041c
 8002028:	40020430 	.word	0x40020430
 800202c:	40020444 	.word	0x40020444
 8002030:	40020000 	.word	0x40020000

08002034 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	2101      	movs	r1, #1
 800204c:	fa01 f202 	lsl.w	r2, r1, r2
 8002050:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b10      	cmp	r3, #16
 8002060:	d108      	bne.n	8002074 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002072:	e007      	b.n	8002084 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	60da      	str	r2, [r3, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b08b      	sub	sp, #44	; 0x2c
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	e133      	b.n	800230c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020a4:	2201      	movs	r2, #1
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 8122 	bne.w	8002306 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b12      	cmp	r3, #18
 80020c8:	d034      	beq.n	8002134 <HAL_GPIO_Init+0xa4>
 80020ca:	2b12      	cmp	r3, #18
 80020cc:	d80d      	bhi.n	80020ea <HAL_GPIO_Init+0x5a>
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d02b      	beq.n	800212a <HAL_GPIO_Init+0x9a>
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d804      	bhi.n	80020e0 <HAL_GPIO_Init+0x50>
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d031      	beq.n	800213e <HAL_GPIO_Init+0xae>
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d01c      	beq.n	8002118 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020de:	e048      	b.n	8002172 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d043      	beq.n	800216c <HAL_GPIO_Init+0xdc>
 80020e4:	2b11      	cmp	r3, #17
 80020e6:	d01b      	beq.n	8002120 <HAL_GPIO_Init+0x90>
          break;
 80020e8:	e043      	b.n	8002172 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020ea:	4a8f      	ldr	r2, [pc, #572]	; (8002328 <HAL_GPIO_Init+0x298>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d026      	beq.n	800213e <HAL_GPIO_Init+0xae>
 80020f0:	4a8d      	ldr	r2, [pc, #564]	; (8002328 <HAL_GPIO_Init+0x298>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d806      	bhi.n	8002104 <HAL_GPIO_Init+0x74>
 80020f6:	4a8d      	ldr	r2, [pc, #564]	; (800232c <HAL_GPIO_Init+0x29c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d020      	beq.n	800213e <HAL_GPIO_Init+0xae>
 80020fc:	4a8c      	ldr	r2, [pc, #560]	; (8002330 <HAL_GPIO_Init+0x2a0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01d      	beq.n	800213e <HAL_GPIO_Init+0xae>
          break;
 8002102:	e036      	b.n	8002172 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002104:	4a8b      	ldr	r2, [pc, #556]	; (8002334 <HAL_GPIO_Init+0x2a4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0xae>
 800210a:	4a8b      	ldr	r2, [pc, #556]	; (8002338 <HAL_GPIO_Init+0x2a8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d016      	beq.n	800213e <HAL_GPIO_Init+0xae>
 8002110:	4a8a      	ldr	r2, [pc, #552]	; (800233c <HAL_GPIO_Init+0x2ac>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0xae>
          break;
 8002116:	e02c      	b.n	8002172 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e028      	b.n	8002172 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	3304      	adds	r3, #4
 8002126:	623b      	str	r3, [r7, #32]
          break;
 8002128:	e023      	b.n	8002172 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	3308      	adds	r3, #8
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e01e      	b.n	8002172 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	330c      	adds	r3, #12
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e019      	b.n	8002172 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002146:	2304      	movs	r3, #4
 8002148:	623b      	str	r3, [r7, #32]
          break;
 800214a:	e012      	b.n	8002172 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002154:	2308      	movs	r3, #8
 8002156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	611a      	str	r2, [r3, #16]
          break;
 800215e:	e008      	b.n	8002172 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	615a      	str	r2, [r3, #20]
          break;
 800216a:	e002      	b.n	8002172 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2bff      	cmp	r3, #255	; 0xff
 8002176:	d801      	bhi.n	800217c <HAL_GPIO_Init+0xec>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	e001      	b.n	8002180 <HAL_GPIO_Init+0xf0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3304      	adds	r3, #4
 8002180:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2bff      	cmp	r3, #255	; 0xff
 8002186:	d802      	bhi.n	800218e <HAL_GPIO_Init+0xfe>
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	e002      	b.n	8002194 <HAL_GPIO_Init+0x104>
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	3b08      	subs	r3, #8
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	210f      	movs	r1, #15
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	401a      	ands	r2, r3
 80021a6:	6a39      	ldr	r1, [r7, #32]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	431a      	orrs	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a2 	beq.w	8002306 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021c2:	4b5f      	ldr	r3, [pc, #380]	; (8002340 <HAL_GPIO_Init+0x2b0>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	4a5e      	ldr	r2, [pc, #376]	; (8002340 <HAL_GPIO_Init+0x2b0>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6193      	str	r3, [r2, #24]
 80021ce:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <HAL_GPIO_Init+0x2b0>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021da:	4a5a      	ldr	r2, [pc, #360]	; (8002344 <HAL_GPIO_Init+0x2b4>)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a51      	ldr	r2, [pc, #324]	; (8002348 <HAL_GPIO_Init+0x2b8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d01f      	beq.n	8002246 <HAL_GPIO_Init+0x1b6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a50      	ldr	r2, [pc, #320]	; (800234c <HAL_GPIO_Init+0x2bc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0x1b2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4f      	ldr	r2, [pc, #316]	; (8002350 <HAL_GPIO_Init+0x2c0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0x1ae>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <HAL_GPIO_Init+0x2c4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_Init+0x1aa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4d      	ldr	r2, [pc, #308]	; (8002358 <HAL_GPIO_Init+0x2c8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x1a6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4c      	ldr	r2, [pc, #304]	; (800235c <HAL_GPIO_Init+0x2cc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x1a2>
 800222e:	2305      	movs	r3, #5
 8002230:	e00a      	b.n	8002248 <HAL_GPIO_Init+0x1b8>
 8002232:	2306      	movs	r3, #6
 8002234:	e008      	b.n	8002248 <HAL_GPIO_Init+0x1b8>
 8002236:	2304      	movs	r3, #4
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x1b8>
 800223a:	2303      	movs	r3, #3
 800223c:	e004      	b.n	8002248 <HAL_GPIO_Init+0x1b8>
 800223e:	2302      	movs	r3, #2
 8002240:	e002      	b.n	8002248 <HAL_GPIO_Init+0x1b8>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x1b8>
 8002246:	2300      	movs	r3, #0
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	f002 0203 	and.w	r2, r2, #3
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	4093      	lsls	r3, r2
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002258:	493a      	ldr	r1, [pc, #232]	; (8002344 <HAL_GPIO_Init+0x2b4>)
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	493a      	ldr	r1, [pc, #232]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
 800227e:	e006      	b.n	800228e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	43db      	mvns	r3, r3
 8002288:	4935      	ldr	r1, [pc, #212]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 800228a:	4013      	ands	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800229a:	4b31      	ldr	r3, [pc, #196]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4930      	ldr	r1, [pc, #192]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
 80022a6:	e006      	b.n	80022b6 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	492b      	ldr	r1, [pc, #172]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c2:	4b27      	ldr	r3, [pc, #156]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	4926      	ldr	r1, [pc, #152]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
 80022ce:	e006      	b.n	80022de <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022d0:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	4921      	ldr	r1, [pc, #132]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022da:	4013      	ands	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	491c      	ldr	r1, [pc, #112]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60cb      	str	r3, [r1, #12]
 80022f6:	e006      	b.n	8002306 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	43db      	mvns	r3, r3
 8002300:	4917      	ldr	r1, [pc, #92]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 8002302:	4013      	ands	r3, r2
 8002304:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	3301      	adds	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	f47f aec4 	bne.w	80020a4 <HAL_GPIO_Init+0x14>
  }
}
 800231c:	bf00      	nop
 800231e:	372c      	adds	r7, #44	; 0x2c
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	10210000 	.word	0x10210000
 800232c:	10110000 	.word	0x10110000
 8002330:	10120000 	.word	0x10120000
 8002334:	10310000 	.word	0x10310000
 8002338:	10320000 	.word	0x10320000
 800233c:	10220000 	.word	0x10220000
 8002340:	40021000 	.word	0x40021000
 8002344:	40010000 	.word	0x40010000
 8002348:	40010800 	.word	0x40010800
 800234c:	40010c00 	.word	0x40010c00
 8002350:	40011000 	.word	0x40011000
 8002354:	40011400 	.word	0x40011400
 8002358:	40011800 	.word	0x40011800
 800235c:	40011c00 	.word	0x40011c00
 8002360:	40010400 	.word	0x40010400

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002380:	e003      	b.n	800238a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	041a      	lsls	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	611a      	str	r2, [r3, #16]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e26c      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8087 	beq.w	80024c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b4:	4b92      	ldr	r3, [pc, #584]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d00c      	beq.n	80023da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c0:	4b8f      	ldr	r3, [pc, #572]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d112      	bne.n	80023f2 <HAL_RCC_OscConfig+0x5e>
 80023cc:	4b8c      	ldr	r3, [pc, #560]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d8:	d10b      	bne.n	80023f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023da:	4b89      	ldr	r3, [pc, #548]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d06c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x12c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d168      	bne.n	80024c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e246      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x76>
 80023fc:	4b80      	ldr	r3, [pc, #512]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a7f      	ldr	r2, [pc, #508]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	e02e      	b.n	8002468 <HAL_RCC_OscConfig+0xd4>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x98>
 8002412:	4b7b      	ldr	r3, [pc, #492]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7a      	ldr	r2, [pc, #488]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b78      	ldr	r3, [pc, #480]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a77      	ldr	r2, [pc, #476]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e01d      	b.n	8002468 <HAL_RCC_OscConfig+0xd4>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0xbc>
 8002436:	4b72      	ldr	r3, [pc, #456]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a71      	ldr	r2, [pc, #452]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 800243c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b6f      	ldr	r3, [pc, #444]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a6e      	ldr	r2, [pc, #440]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e00b      	b.n	8002468 <HAL_RCC_OscConfig+0xd4>
 8002450:	4b6b      	ldr	r3, [pc, #428]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a6a      	ldr	r2, [pc, #424]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b68      	ldr	r3, [pc, #416]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a67      	ldr	r2, [pc, #412]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002466:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe fb7e 	bl	8000b70 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe fb7a 	bl	8000b70 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e1fa      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b5d      	ldr	r3, [pc, #372]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0xe4>
 8002496:	e014      	b.n	80024c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fb6a 	bl	8000b70 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe fb66 	bl	8000b70 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1e6      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	4b53      	ldr	r3, [pc, #332]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x10c>
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d063      	beq.n	8002596 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ce:	4b4c      	ldr	r3, [pc, #304]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024da:	4b49      	ldr	r3, [pc, #292]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d11c      	bne.n	8002520 <HAL_RCC_OscConfig+0x18c>
 80024e6:	4b46      	ldr	r3, [pc, #280]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d116      	bne.n	8002520 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	4b43      	ldr	r3, [pc, #268]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_RCC_OscConfig+0x176>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e1ba      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4939      	ldr	r1, [pc, #228]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	e03a      	b.n	8002596 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002528:	4b36      	ldr	r3, [pc, #216]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fb1f 	bl	8000b70 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002536:	f7fe fb1b 	bl	8000b70 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e19b      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002548:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4927      	ldr	r1, [pc, #156]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]
 8002568:	e015      	b.n	8002596 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256a:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fafe 	bl	8000b70 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002578:	f7fe fafa 	bl	8000b70 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e17a      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d03a      	beq.n	8002618 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d019      	beq.n	80025de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <HAL_RCC_OscConfig+0x274>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b0:	f7fe fade 	bl	8000b70 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b8:	f7fe fada 	bl	8000b70 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e15a      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ca:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025d6:	2001      	movs	r0, #1
 80025d8:	f000 fac6 	bl	8002b68 <RCC_Delay>
 80025dc:	e01c      	b.n	8002618 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_RCC_OscConfig+0x274>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e4:	f7fe fac4 	bl	8000b70 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ea:	e00f      	b.n	800260c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7fe fac0 	bl	8000b70 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d908      	bls.n	800260c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e140      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	42420000 	.word	0x42420000
 8002608:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	4b9e      	ldr	r3, [pc, #632]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1e9      	bne.n	80025ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a6 	beq.w	8002772 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262a:	4b97      	ldr	r3, [pc, #604]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	4b94      	ldr	r3, [pc, #592]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4a93      	ldr	r2, [pc, #588]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	61d3      	str	r3, [r2, #28]
 8002642:	4b91      	ldr	r3, [pc, #580]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	4b8e      	ldr	r3, [pc, #568]	; (800288c <HAL_RCC_OscConfig+0x4f8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265e:	4b8b      	ldr	r3, [pc, #556]	; (800288c <HAL_RCC_OscConfig+0x4f8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a8a      	ldr	r2, [pc, #552]	; (800288c <HAL_RCC_OscConfig+0x4f8>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7fe fa81 	bl	8000b70 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7fe fa7d 	bl	8000b70 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b64      	cmp	r3, #100	; 0x64
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e0fd      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_RCC_OscConfig+0x4f8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x312>
 8002698:	4b7b      	ldr	r3, [pc, #492]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a7a      	ldr	r2, [pc, #488]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	e02d      	b.n	8002702 <HAL_RCC_OscConfig+0x36e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x334>
 80026ae:	4b76      	ldr	r3, [pc, #472]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4a75      	ldr	r2, [pc, #468]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6213      	str	r3, [r2, #32]
 80026ba:	4b73      	ldr	r3, [pc, #460]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4a72      	ldr	r2, [pc, #456]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	f023 0304 	bic.w	r3, r3, #4
 80026c4:	6213      	str	r3, [r2, #32]
 80026c6:	e01c      	b.n	8002702 <HAL_RCC_OscConfig+0x36e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0x356>
 80026d0:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4a6c      	ldr	r2, [pc, #432]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	6213      	str	r3, [r2, #32]
 80026dc:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4a69      	ldr	r2, [pc, #420]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6213      	str	r3, [r2, #32]
 80026e8:	e00b      	b.n	8002702 <HAL_RCC_OscConfig+0x36e>
 80026ea:	4b67      	ldr	r3, [pc, #412]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a66      	ldr	r2, [pc, #408]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6213      	str	r3, [r2, #32]
 80026f6:	4b64      	ldr	r3, [pc, #400]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a63      	ldr	r2, [pc, #396]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d015      	beq.n	8002736 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270a:	f7fe fa31 	bl	8000b70 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe fa2d 	bl	8000b70 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0ab      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	4b57      	ldr	r3, [pc, #348]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ee      	beq.n	8002712 <HAL_RCC_OscConfig+0x37e>
 8002734:	e014      	b.n	8002760 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002736:	f7fe fa1b 	bl	8000b70 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe fa17 	bl	8000b70 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e095      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	4b4c      	ldr	r3, [pc, #304]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ee      	bne.n	800273e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4b48      	ldr	r3, [pc, #288]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4a47      	ldr	r2, [pc, #284]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002770:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8081 	beq.w	800287e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800277c:	4b42      	ldr	r3, [pc, #264]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b08      	cmp	r3, #8
 8002786:	d061      	beq.n	800284c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d146      	bne.n	800281e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002790:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCC_OscConfig+0x4fc>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe f9eb 	bl	8000b70 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279e:	f7fe f9e7 	bl	8000b70 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e067      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b0:	4b35      	ldr	r3, [pc, #212]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c4:	d108      	bne.n	80027d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027c6:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	492d      	ldr	r1, [pc, #180]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a19      	ldr	r1, [r3, #32]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	430b      	orrs	r3, r1
 80027ea:	4927      	ldr	r1, [pc, #156]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f0:	4b27      	ldr	r3, [pc, #156]	; (8002890 <HAL_RCC_OscConfig+0x4fc>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe f9bb 	bl	8000b70 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe f9b7 	bl	8000b70 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e037      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x46a>
 800281c:	e02f      	b.n	800287e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <HAL_RCC_OscConfig+0x4fc>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe f9a4 	bl	8000b70 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe f9a0 	bl	8000b70 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e020      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x498>
 800284a:	e018      	b.n	800287e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e013      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	429a      	cmp	r2, r3
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	40007000 	.word	0x40007000
 8002890:	42420060 	.word	0x42420060

08002894 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0d0      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a8:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d910      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 0207 	bic.w	r2, r3, #7
 80028be:	4965      	ldr	r1, [pc, #404]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0b8      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f0:	4b59      	ldr	r3, [pc, #356]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a58      	ldr	r2, [pc, #352]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002908:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a52      	ldr	r2, [pc, #328]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002912:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b50      	ldr	r3, [pc, #320]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	494d      	ldr	r1, [pc, #308]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d040      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d115      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e07f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e073      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e06b      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4936      	ldr	r1, [pc, #216]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002984:	f7fe f8f4 	bl	8000b70 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298c:	f7fe f8f0 	bl	8000b70 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e053      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 020c 	and.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1eb      	bne.n	800298c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b4:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d210      	bcs.n	80029e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 0207 	bic.w	r2, r3, #7
 80029ca:	4922      	ldr	r1, [pc, #136]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e032      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4916      	ldr	r1, [pc, #88]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	490e      	ldr	r1, [pc, #56]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a22:	f000 f821 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002a26:	4601      	mov	r1, r0
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a34:	5cd3      	ldrb	r3, [r2, r3]
 8002a36:	fa21 f303 	lsr.w	r3, r1, r3
 8002a3a:	4a09      	ldr	r2, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1cc>)
 8002a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_RCC_ClockConfig+0x1d0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f852 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	08002f78 	.word	0x08002f78
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	b490      	push	{r4, r7}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a70:	1d3c      	adds	r4, r7, #4
 8002a72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a78:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d002      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d003      	beq.n	8002aae <HAL_RCC_GetSysClockFreq+0x46>
 8002aa6:	e02d      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aaa:	623b      	str	r3, [r7, #32]
      break;
 8002aac:	e02d      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	0c9b      	lsrs	r3, r3, #18
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aba:	4413      	add	r3, r2
 8002abc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ac0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	0c5b      	lsrs	r3, r3, #17
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ada:	4413      	add	r3, r2
 8002adc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ae0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ae6:	fb02 f203 	mul.w	r2, r2, r3
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
 8002af2:	e004      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	623b      	str	r3, [r7, #32]
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b06:	623b      	str	r3, [r7, #32]
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3728      	adds	r7, #40	; 0x28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc90      	pop	{r4, r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	08002f50 	.word	0x08002f50
 8002b1c:	08002f60 	.word	0x08002f60
 8002b20:	40021000 	.word	0x40021000
 8002b24:	007a1200 	.word	0x007a1200
 8002b28:	003d0900 	.word	0x003d0900

08002b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b30:	4b02      	ldr	r3, [pc, #8]	; (8002b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	20000000 	.word	0x20000000

08002b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b44:	f7ff fff2 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b48:	4601      	mov	r1, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	0adb      	lsrs	r3, r3, #11
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4a03      	ldr	r2, [pc, #12]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08002f88 	.word	0x08002f88

08002b68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <RCC_Delay+0x34>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <RCC_Delay+0x38>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0a5b      	lsrs	r3, r3, #9
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b84:	bf00      	nop
  }
  while (Delay --);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1e5a      	subs	r2, r3, #1
 8002b8a:	60fa      	str	r2, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f9      	bne.n	8002b84 <RCC_Delay+0x1c>
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	10624dd3 	.word	0x10624dd3

08002ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d07d      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc4:	4b4f      	ldr	r3, [pc, #316]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10d      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b4c      	ldr	r3, [pc, #304]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bda:	61d3      	str	r3, [r2, #28]
 8002bdc:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be8:	2301      	movs	r3, #1
 8002bea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	4b46      	ldr	r3, [pc, #280]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d118      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf8:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a42      	ldr	r2, [pc, #264]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c04:	f7fd ffb4 	bl	8000b70 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	e008      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fd ffb0 	bl	8000b70 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e06d      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d02e      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d027      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c48:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c52:	4b2e      	ldr	r3, [pc, #184]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c58:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c5e:	4a29      	ldr	r2, [pc, #164]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d014      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7fd ff7f 	bl	8000b70 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7fd ff7b 	bl	8000b70 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e036      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ee      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4917      	ldr	r1, [pc, #92]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	490b      	ldr	r1, [pc, #44]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4904      	ldr	r1, [pc, #16]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	42420440 	.word	0x42420440

08002d10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b08d      	sub	sp, #52	; 0x34
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d18:	4b6b      	ldr	r3, [pc, #428]	; (8002ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002d1a:	f107 040c 	add.w	r4, r7, #12
 8002d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d24:	4b69      	ldr	r3, [pc, #420]	; (8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	2300      	movs	r3, #0
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f200 80b6 	bhi.w	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002d48:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002e33 	.word	0x08002e33
 8002d54:	08002e99 	.word	0x08002e99
 8002d58:	08002eb5 	.word	0x08002eb5
 8002d5c:	08002e23 	.word	0x08002e23
 8002d60:	08002eb5 	.word	0x08002eb5
 8002d64:	08002eb5 	.word	0x08002eb5
 8002d68:	08002eb5 	.word	0x08002eb5
 8002d6c:	08002e2b 	.word	0x08002e2b
 8002d70:	08002eb5 	.word	0x08002eb5
 8002d74:	08002eb5 	.word	0x08002eb5
 8002d78:	08002eb5 	.word	0x08002eb5
 8002d7c:	08002eb5 	.word	0x08002eb5
 8002d80:	08002eb5 	.word	0x08002eb5
 8002d84:	08002eb5 	.word	0x08002eb5
 8002d88:	08002eb5 	.word	0x08002eb5
 8002d8c:	08002d91 	.word	0x08002d91
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002d90:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d96:	4b4e      	ldr	r3, [pc, #312]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 808a 	beq.w	8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	0c9b      	lsrs	r3, r3, #18
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002db0:	4413      	add	r3, r2
 8002db2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002db6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d018      	beq.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dc2:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	0c5b      	lsrs	r3, r3, #17
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002de2:	4a3c      	ldr	r2, [pc, #240]	; (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	fb02 f303 	mul.w	r3, r2, r3
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df2:	e004      	b.n	8002dfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	4a38      	ldr	r2, [pc, #224]	; (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8002df8:	fb02 f303 	mul.w	r3, r2, r3
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002dfe:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002e10:	e052      	b.n	8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4a31      	ldr	r2, [pc, #196]	; (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e20:	e04a      	b.n	8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002e22:	f7ff fe21 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002e26:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e28:	e049      	b.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002e2a:	f7ff fe1d 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002e2e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e30:	e045      	b.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002e32:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e42:	d108      	bne.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8002e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e54:	e01f      	b.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e60:	d109      	bne.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8002e6e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e74:	e00f      	b.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e80:	d11c      	bne.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8002e8e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002e94:	e012      	b.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002e96:	e011      	b.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e98:	f7ff fe52 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	0b9b      	lsrs	r3, r3, #14
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002eb2:	e004      	b.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8002eb4:	bf00      	nop
 8002eb6:	e002      	b.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002ebc:	bf00      	nop
    }
  }
  return (frequency);
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3734      	adds	r7, #52	; 0x34
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd90      	pop	{r4, r7, pc}
 8002ec8:	08002f64 	.word	0x08002f64
 8002ecc:	08002f74 	.word	0x08002f74
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	007a1200 	.word	0x007a1200
 8002ed8:	003d0900 	.word	0x003d0900
 8002edc:	aaaaaaab 	.word	0xaaaaaaab

08002ee0 <__libc_init_array>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	2500      	movs	r5, #0
 8002ee4:	4e0c      	ldr	r6, [pc, #48]	; (8002f18 <__libc_init_array+0x38>)
 8002ee6:	4c0d      	ldr	r4, [pc, #52]	; (8002f1c <__libc_init_array+0x3c>)
 8002ee8:	1ba4      	subs	r4, r4, r6
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	42a5      	cmp	r5, r4
 8002eee:	d109      	bne.n	8002f04 <__libc_init_array+0x24>
 8002ef0:	f000 f822 	bl	8002f38 <_init>
 8002ef4:	2500      	movs	r5, #0
 8002ef6:	4e0a      	ldr	r6, [pc, #40]	; (8002f20 <__libc_init_array+0x40>)
 8002ef8:	4c0a      	ldr	r4, [pc, #40]	; (8002f24 <__libc_init_array+0x44>)
 8002efa:	1ba4      	subs	r4, r4, r6
 8002efc:	10a4      	asrs	r4, r4, #2
 8002efe:	42a5      	cmp	r5, r4
 8002f00:	d105      	bne.n	8002f0e <__libc_init_array+0x2e>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f08:	4798      	blx	r3
 8002f0a:	3501      	adds	r5, #1
 8002f0c:	e7ee      	b.n	8002eec <__libc_init_array+0xc>
 8002f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f12:	4798      	blx	r3
 8002f14:	3501      	adds	r5, #1
 8002f16:	e7f2      	b.n	8002efe <__libc_init_array+0x1e>
 8002f18:	08002f90 	.word	0x08002f90
 8002f1c:	08002f90 	.word	0x08002f90
 8002f20:	08002f90 	.word	0x08002f90
 8002f24:	08002f94 	.word	0x08002f94

08002f28 <memset>:
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4402      	add	r2, r0
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <memset+0xa>
 8002f30:	4770      	bx	lr
 8002f32:	f803 1b01 	strb.w	r1, [r3], #1
 8002f36:	e7f9      	b.n	8002f2c <memset+0x4>

08002f38 <_init>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	bf00      	nop
 8002f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3e:	bc08      	pop	{r3}
 8002f40:	469e      	mov	lr, r3
 8002f42:	4770      	bx	lr

08002f44 <_fini>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr
